name: api

on:
  schedule:
    # Run daily at 2:00 UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    # Allow manual trigger from GitHub UI

permissions:
  contents: read

jobs:
  update-api:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper commit messages

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true

      - name: Set up Git
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BOT_SSH_PRIVATE_KEY }}" > ~/.ssh/bot_signing_key
          chmod 600 ~/.ssh/bot_signing_key
          git config user.name "lineofflightbot"
          git config user.email "bot@lineofflig.ht"
          git config --global commit.gpgsign true
          git config --global gpg.format ssh
          # Get the key fingerprint using standard format instead of -Y option
          KEY_FINGERPRINT=$(ssh-keygen -l -f ~/.ssh/bot_signing_key | awk '{print $2}')
          git config --global user.signingkey "$KEY_FINGERPRINT"

      - name: Install dependencies
        run: |
          bundle install

      - name: Generate code from API models
        run: bin/generate-code

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            # Store the list of changed files for commit message
            git status --porcelain | grep -v '??' | sed 's/^...//' > /tmp/changed_files
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a new branch with a timestamp to ensure uniqueness
          BRANCH_NAME="update-api-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME

          # Create PR title
          PR_TITLE="Update Amazon models - $(date +%Y-%m-%d)"

          # Create PR body with proper newlines using -e flag with echo
          PR_BODY=$(echo -e "This PR was automatically generated to update the Amazon API models.\n\nChanges include:\n$(cat /tmp/changed_files | sed 's/^/- /')\n\nCreated by GitHub Actions workflow.")

          # Extract API names from changed files
          API_UPDATES=$(grep -o 'lib/peddler/apis/[^/]*\.rb' /tmp/changed_files | sed -E 's|lib/peddler/apis/(.*)\.rb|\1|' | sort | uniq)

          if [[ -n "$API_UPDATES" ]]; then
            # Create commit message with API list
            COMMIT_MSG="Update Amazon models\n\nUpdated APIs:\n$(echo "$API_UPDATES" | sed 's/^/- /')"
            git add -A
            git commit -m "$(echo -e "$COMMIT_MSG")"
          else
            # Fallback to simple commit message if no APIs could be identified
            git add -A
            git commit -m "Update Amazon models"
          fi
          git push --set-upstream origin $BRANCH_NAME

          # Create the PR using GitHub CLI (pre-installed on runners)
          gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head "$BRANCH_NAME"
