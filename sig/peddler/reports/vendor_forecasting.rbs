module Peddler
  module Reports
    module VendorForecasting
      class ForecastByASIN < Data
        def self.new: (asin: String?, end_date: Date?, forecast_generation_date: Date?, mean_forecast_units: Float?, p70_forecast_units: Float?, p80_forecast_units: Float?, p90_forecast_units: Float?, start_date: Date?) -> Peddler::Reports::VendorForecasting::ForecastByASIN
                    | (String?, Date?, Date?, Float?, Float?, Float?, Float?, Date?) -> Peddler::Reports::VendorForecasting::ForecastByASIN
        def self.[]: (asin: String?, end_date: Date?, forecast_generation_date: Date?, mean_forecast_units: Float?, p70_forecast_units: Float?, p80_forecast_units: Float?, p90_forecast_units: Float?, start_date: Date?) -> Peddler::Reports::VendorForecasting::ForecastByASIN
                   | (String?, Date?, Date?, Float?, Float?, Float?, Float?, Date?) -> Peddler::Reports::VendorForecasting::ForecastByASIN

        def self.members: () -> [ :asin, :end_date, :forecast_generation_date, :mean_forecast_units, :p70_forecast_units, :p80_forecast_units, :p90_forecast_units, :start_date ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorForecasting::ForecastByASIN

        attr_reader asin: String?
        attr_reader end_date: Date?
        attr_reader forecast_generation_date: Date?
        attr_reader mean_forecast_units: Float?
        attr_reader p70_forecast_units: Float?
        attr_reader p80_forecast_units: Float?
        attr_reader p90_forecast_units: Float?
        attr_reader start_date: Date?

        def members: () -> [ :asin, :end_date, :forecast_generation_date, :mean_forecast_units, :p70_forecast_units, :p80_forecast_units, :p90_forecast_units, :start_date ]
        def to_h: () -> { asin: String?, end_date: Date?, forecast_generation_date: Date?, mean_forecast_units: Float?, p70_forecast_units: Float?, p80_forecast_units: Float?, p90_forecast_units: Float?, start_date: Date? }
      end

      class Report < Data
        def self.new: (forecast_by_asin: Array[Peddler::Reports::VendorForecasting::ForecastByASIN]?, report_specification: Peddler::Reports::VendorForecasting::ReportSpecification?) -> Peddler::Reports::VendorForecasting::Report
                    | (Array[Peddler::Reports::VendorForecasting::ForecastByASIN]?, Peddler::Reports::VendorForecasting::ReportSpecification?) -> Peddler::Reports::VendorForecasting::Report
        def self.[]: (forecast_by_asin: Array[Peddler::Reports::VendorForecasting::ForecastByASIN]?, report_specification: Peddler::Reports::VendorForecasting::ReportSpecification?) -> Peddler::Reports::VendorForecasting::Report
                   | (Array[Peddler::Reports::VendorForecasting::ForecastByASIN]?, Peddler::Reports::VendorForecasting::ReportSpecification?) -> Peddler::Reports::VendorForecasting::Report

        def self.members: () -> [ :forecast_by_asin, :report_specification ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorForecasting::Report

        attr_reader forecast_by_asin: Array[Peddler::Reports::VendorForecasting::ForecastByASIN]?
        attr_reader report_specification: Peddler::Reports::VendorForecasting::ReportSpecification?

        def members: () -> [ :forecast_by_asin, :report_specification ]
        def to_h: () -> { forecast_by_asin: Array[Peddler::Reports::VendorForecasting::ForecastByASIN]?, report_specification: Peddler::Reports::VendorForecasting::ReportSpecification? }
      end

      class ReportOptions < Data
        def self.new: (selling_program: String?) -> Peddler::Reports::VendorForecasting::ReportOptions
                    | (String?) -> Peddler::Reports::VendorForecasting::ReportOptions
        def self.[]: (selling_program: String?) -> Peddler::Reports::VendorForecasting::ReportOptions
                   | (String?) -> Peddler::Reports::VendorForecasting::ReportOptions

        def self.members: () -> [ :selling_program ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorForecasting::ReportOptions

        attr_reader selling_program: String?

        def members: () -> [ :selling_program ]
        def to_h: () -> { selling_program: String? }
      end

      class ReportSpecification < Data
        def self.new: (last_updated_date: Date?, marketplace_ids: Array[String]?, report_options: Peddler::Reports::VendorForecasting::ReportOptions?, report_type: String?) -> Peddler::Reports::VendorForecasting::ReportSpecification
                    | (Date?, Array[String]?, Peddler::Reports::VendorForecasting::ReportOptions?, String?) -> Peddler::Reports::VendorForecasting::ReportSpecification
        def self.[]: (last_updated_date: Date?, marketplace_ids: Array[String]?, report_options: Peddler::Reports::VendorForecasting::ReportOptions?, report_type: String?) -> Peddler::Reports::VendorForecasting::ReportSpecification
                   | (Date?, Array[String]?, Peddler::Reports::VendorForecasting::ReportOptions?, String?) -> Peddler::Reports::VendorForecasting::ReportSpecification

        def self.members: () -> [ :last_updated_date, :marketplace_ids, :report_options, :report_type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorForecasting::ReportSpecification

        attr_reader last_updated_date: Date?
        attr_reader marketplace_ids: Array[String]?
        attr_reader report_options: Peddler::Reports::VendorForecasting::ReportOptions?
        attr_reader report_type: String?

        def members: () -> [ :last_updated_date, :marketplace_ids, :report_options, :report_type ]
        def to_h: () -> { last_updated_date: Date?, marketplace_ids: Array[String]?, report_options: Peddler::Reports::VendorForecasting::ReportOptions?, report_type: String? }
      end

      def self.parse: (Hash[String | Symbol, untyped]) -> Peddler::Reports::VendorForecasting::Report
    end
  end
end
