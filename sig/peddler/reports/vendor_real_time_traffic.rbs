module Peddler
  module Reports
    module VendorRealTimeTraffic
      class Report < Data
        def self.new: (report_data: Array[Peddler::Reports::VendorRealTimeTraffic::ReportData]?, report_specification: Peddler::Reports::VendorRealTimeTraffic::ReportSpecification?) -> Peddler::Reports::VendorRealTimeTraffic::Report
                    | (Array[Peddler::Reports::VendorRealTimeTraffic::ReportData]?, Peddler::Reports::VendorRealTimeTraffic::ReportSpecification?) -> Peddler::Reports::VendorRealTimeTraffic::Report
        def self.[]: (report_data: Array[Peddler::Reports::VendorRealTimeTraffic::ReportData]?, report_specification: Peddler::Reports::VendorRealTimeTraffic::ReportSpecification?) -> Peddler::Reports::VendorRealTimeTraffic::Report
                   | (Array[Peddler::Reports::VendorRealTimeTraffic::ReportData]?, Peddler::Reports::VendorRealTimeTraffic::ReportSpecification?) -> Peddler::Reports::VendorRealTimeTraffic::Report

        def self.members: () -> [ :report_data, :report_specification ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorRealTimeTraffic::Report

        attr_reader report_data: Array[Peddler::Reports::VendorRealTimeTraffic::ReportData]?
        attr_reader report_specification: Peddler::Reports::VendorRealTimeTraffic::ReportSpecification?

        def members: () -> [ :report_data, :report_specification ]
        def to_h: () -> { report_data: Array[Peddler::Reports::VendorRealTimeTraffic::ReportData]?, report_specification: Peddler::Reports::VendorRealTimeTraffic::ReportSpecification? }
      end

      class ReportData < Data
        def self.new: (asin: String?, end_time: Time?, glance_views: Integer?, start_time: Time?) -> Peddler::Reports::VendorRealTimeTraffic::ReportData
                    | (String?, Time?, Integer?, Time?) -> Peddler::Reports::VendorRealTimeTraffic::ReportData
        def self.[]: (asin: String?, end_time: Time?, glance_views: Integer?, start_time: Time?) -> Peddler::Reports::VendorRealTimeTraffic::ReportData
                   | (String?, Time?, Integer?, Time?) -> Peddler::Reports::VendorRealTimeTraffic::ReportData

        def self.members: () -> [ :asin, :end_time, :glance_views, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorRealTimeTraffic::ReportData

        attr_reader asin: String?
        attr_reader end_time: Time?
        attr_reader glance_views: Integer?
        attr_reader start_time: Time?

        def members: () -> [ :asin, :end_time, :glance_views, :start_time ]
        def to_h: () -> { asin: String?, end_time: Time?, glance_views: Integer?, start_time: Time? }
      end

      class ReportSpecification < Data
        def self.new: (data_end_time: Time?, data_start_time: Time?, marketplace_ids: Array[String]?, report_type: String?) -> Peddler::Reports::VendorRealTimeTraffic::ReportSpecification
                    | (Time?, Time?, Array[String]?, String?) -> Peddler::Reports::VendorRealTimeTraffic::ReportSpecification
        def self.[]: (data_end_time: Time?, data_start_time: Time?, marketplace_ids: Array[String]?, report_type: String?) -> Peddler::Reports::VendorRealTimeTraffic::ReportSpecification
                   | (Time?, Time?, Array[String]?, String?) -> Peddler::Reports::VendorRealTimeTraffic::ReportSpecification

        def self.members: () -> [ :data_end_time, :data_start_time, :marketplace_ids, :report_type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Reports::VendorRealTimeTraffic::ReportSpecification

        attr_reader data_end_time: Time?
        attr_reader data_start_time: Time?
        attr_reader marketplace_ids: Array[String]?
        attr_reader report_type: String?

        def members: () -> [ :data_end_time, :data_start_time, :marketplace_ids, :report_type ]
        def to_h: () -> { data_end_time: Time?, data_start_time: Time?, marketplace_ids: Array[String]?, report_type: String? }
      end

      def self.parse: (Hash[String | Symbol, untyped]) -> Peddler::Reports::VendorRealTimeTraffic::Report
    end
  end
end
