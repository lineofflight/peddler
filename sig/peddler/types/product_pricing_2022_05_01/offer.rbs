module Peddler
  module Types
    module ProductPricing20220501
      class Offer < Data
        def self.new: (condition: String?, fulfillment_type: String?, listing_price: Peddler::Types::Money?, seller_id: String?, ?points: Peddler::Types::ProductPricing20220501::Points?, ?prime_details: Peddler::Types::ProductPricing20220501::PrimeDetails?, ?shipping_options: Array[Peddler::Types::ProductPricing20220501::ShippingOption]?, ?sub_condition: String?) -> Peddler::Types::ProductPricing20220501::Offer
                    | (String?, String?, Peddler::Types::Money?, String?, Peddler::Types::ProductPricing20220501::Points?, Peddler::Types::ProductPricing20220501::PrimeDetails?, Array[Peddler::Types::ProductPricing20220501::ShippingOption]?, String?) -> Peddler::Types::ProductPricing20220501::Offer

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductPricing20220501::Offer

        attr_reader condition: String?
        attr_reader fulfillment_type: String?
        attr_reader listing_price: Peddler::Types::Money?

        attr_reader points: Peddler::Types::ProductPricing20220501::Points?
        attr_reader prime_details: Peddler::Types::ProductPricing20220501::PrimeDetails?
        attr_reader seller_id: String?

        attr_reader shipping_options: Array[Peddler::Types::ProductPricing20220501::ShippingOption]?
        attr_reader sub_condition: String?

        def to_h: () -> { condition: String?, fulfillment_type: String?, listing_price: Peddler::Types::Money?, seller_id: String?, points: Peddler::Types::ProductPricing20220501::Points?, prime_details: Peddler::Types::ProductPricing20220501::PrimeDetails?, shipping_options: Array[Peddler::Types::ProductPricing20220501::ShippingOption]?, sub_condition: String? }
      end
    end
  end
end
