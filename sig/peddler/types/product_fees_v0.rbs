module Peddler
  module Types
    module ProductFeesV0
      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::ProductFeesV0::Error
                    | (String?, String?, String?) -> Peddler::Types::ProductFeesV0::Error

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::Error

        attr_reader code: String?

        attr_reader details: String?
        attr_reader message: String?

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class FeeDetail < Data
        def self.new: (fee_amount: Peddler::Types::Money?, fee_type: String?, final_fee: Peddler::Types::Money?, ?fee_promotion: Peddler::Types::Money?, ?included_fee_detail_list: Array[Peddler::Types::ProductFeesV0::IncludedFeeDetail]?, ?tax_amount: Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::FeeDetail
                    | (Peddler::Types::Money?, String?, Peddler::Types::Money?, Peddler::Types::Money?, Array[Peddler::Types::ProductFeesV0::IncludedFeeDetail]?, Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::FeeDetail

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeeDetail

        attr_reader fee_amount: Peddler::Types::Money?

        attr_reader fee_promotion: Peddler::Types::Money?
        attr_reader fee_type: String?
        attr_reader final_fee: Peddler::Types::Money?

        attr_reader included_fee_detail_list: Array[Peddler::Types::ProductFeesV0::IncludedFeeDetail]?
        attr_reader tax_amount: Peddler::Types::Money?

        def to_h: () -> { fee_amount: Peddler::Types::Money?, fee_type: String?, final_fee: Peddler::Types::Money?, fee_promotion: Peddler::Types::Money?, included_fee_detail_list: Array[Peddler::Types::ProductFeesV0::IncludedFeeDetail]?, tax_amount: Peddler::Types::Money? }
      end

      class FeeDetailList < Array[FeeDetail]
        def self.parse: (Array[untyped]) -> FeeDetailList
      end

      class FeesEstimate < Data
        def self.new: (time_of_fees_estimation: String?, ?fee_detail_list: Array[Peddler::Types::ProductFeesV0::FeeDetail]?, ?total_fees_estimate: Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::FeesEstimate
                    | (String?, Array[Peddler::Types::ProductFeesV0::FeeDetail]?, Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::FeesEstimate

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeesEstimate

        attr_reader fee_detail_list: Array[Peddler::Types::ProductFeesV0::FeeDetail]?
        attr_reader time_of_fees_estimation: String?

        attr_reader total_fees_estimate: Peddler::Types::Money?

        def to_h: () -> { time_of_fees_estimation: String?, fee_detail_list: Array[Peddler::Types::ProductFeesV0::FeeDetail]?, total_fees_estimate: Peddler::Types::Money? }
      end

      class FeesEstimateByIdRequest < Data
        def self.new: (id_type: String?, id_value: String?, ?fees_estimate_request: Peddler::Types::ProductFeesV0::FeesEstimateRequest?) -> Peddler::Types::ProductFeesV0::FeesEstimateByIdRequest
                    | (String?, String?, Peddler::Types::ProductFeesV0::FeesEstimateRequest?) -> Peddler::Types::ProductFeesV0::FeesEstimateByIdRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeesEstimateByIdRequest

        attr_reader fees_estimate_request: Peddler::Types::ProductFeesV0::FeesEstimateRequest?
        attr_reader id_type: String?
        attr_reader id_value: String?

        def to_h: () -> { id_type: String?, id_value: String?, fees_estimate_request: Peddler::Types::ProductFeesV0::FeesEstimateRequest? }
      end

      class FeesEstimateError < Data
        def self.new: (code: String?, detail: Array[untyped]?, message: String?, type: String?) -> Peddler::Types::ProductFeesV0::FeesEstimateError
                    | (String?, Array[untyped]?, String?, String?) -> Peddler::Types::ProductFeesV0::FeesEstimateError

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeesEstimateError

        attr_reader code: String?
        attr_reader detail: Array[untyped]?
        attr_reader message: String?
        attr_reader type: String?

        def to_h: () -> { code: String?, detail: Array[untyped]?, message: String?, type: String? }
      end

      class FeesEstimateErrorDetail < Array[untyped]
        def self.parse: (Array[untyped]) -> FeesEstimateErrorDetail
      end

      class FeesEstimateIdentifier < Data
        def self.new: (?id_type: String?, ?id_value: String?, ?amazon_fulfilled: bool?, ?marketplace_id: String?, ?optional_fulfillment_program: String?, ?price_to_estimate_fees: Peddler::Types::ProductFeesV0::PriceToEstimateFees?, ?seller_id: String?, ?seller_input_identifier: String?) -> Peddler::Types::ProductFeesV0::FeesEstimateIdentifier
                    | (String?, String?, bool?, String?, String?, Peddler::Types::ProductFeesV0::PriceToEstimateFees?, String?, String?) -> Peddler::Types::ProductFeesV0::FeesEstimateIdentifier

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeesEstimateIdentifier

        attr_reader amazon_fulfilled: bool?
        attr_reader id_type: String?
        attr_reader id_value: String?

        attr_reader marketplace_id: String?
        attr_reader optional_fulfillment_program: String?
        attr_reader price_to_estimate_fees: Peddler::Types::ProductFeesV0::PriceToEstimateFees?
        attr_reader seller_id: String?
        attr_reader seller_input_identifier: String?

        def amazon_fulfilled?: () -> bool
        def to_h: () -> { id_type: String?, id_value: String?, amazon_fulfilled: bool?, marketplace_id: String?, optional_fulfillment_program: String?, price_to_estimate_fees: Peddler::Types::ProductFeesV0::PriceToEstimateFees?, seller_id: String?, seller_input_identifier: String? }
      end

      class FeesEstimateRequest < Data
        def self.new: (identifier: String?, marketplace_id: String?, price_to_estimate_fees: Peddler::Types::ProductFeesV0::PriceToEstimateFees?, ?amazon_fulfilled: bool?, ?optional_fulfillment_program: String?) -> Peddler::Types::ProductFeesV0::FeesEstimateRequest
                    | (String?, String?, Peddler::Types::ProductFeesV0::PriceToEstimateFees?, bool?, String?) -> Peddler::Types::ProductFeesV0::FeesEstimateRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeesEstimateRequest

        attr_reader amazon_fulfilled: bool?
        attr_reader identifier: String?
        attr_reader marketplace_id: String?

        attr_reader optional_fulfillment_program: String?
        attr_reader price_to_estimate_fees: Peddler::Types::ProductFeesV0::PriceToEstimateFees?

        def amazon_fulfilled?: () -> bool
        def to_h: () -> { identifier: String?, marketplace_id: String?, price_to_estimate_fees: Peddler::Types::ProductFeesV0::PriceToEstimateFees?, amazon_fulfilled: bool?, optional_fulfillment_program: String? }
      end

      class FeesEstimateResult < Data
        def self.new: (?error: Peddler::Types::ProductFeesV0::FeesEstimateError?, ?fees_estimate: Peddler::Types::ProductFeesV0::FeesEstimate?, ?fees_estimate_identifier: Peddler::Types::ProductFeesV0::FeesEstimateIdentifier?, ?status: String?) -> Peddler::Types::ProductFeesV0::FeesEstimateResult
                    | (Peddler::Types::ProductFeesV0::FeesEstimateError?, Peddler::Types::ProductFeesV0::FeesEstimate?, Peddler::Types::ProductFeesV0::FeesEstimateIdentifier?, String?) -> Peddler::Types::ProductFeesV0::FeesEstimateResult

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::FeesEstimateResult

        attr_reader error: Peddler::Types::ProductFeesV0::FeesEstimateError?
        attr_reader fees_estimate: Peddler::Types::ProductFeesV0::FeesEstimate?
        attr_reader fees_estimate_identifier: Peddler::Types::ProductFeesV0::FeesEstimateIdentifier?
        attr_reader status: String?

        def to_h: () -> { error: Peddler::Types::ProductFeesV0::FeesEstimateError?, fees_estimate: Peddler::Types::ProductFeesV0::FeesEstimate?, fees_estimate_identifier: Peddler::Types::ProductFeesV0::FeesEstimateIdentifier?, status: String? }
      end

      class GetMyFeesEstimateRequest < Data
        def self.new: (?fees_estimate_request: Peddler::Types::ProductFeesV0::FeesEstimateRequest?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateRequest
                    | (Peddler::Types::ProductFeesV0::FeesEstimateRequest?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateRequest

        attr_reader fees_estimate_request: Peddler::Types::ProductFeesV0::FeesEstimateRequest?

        def to_h: () -> { fees_estimate_request: Peddler::Types::ProductFeesV0::FeesEstimateRequest? }
      end

      class GetMyFeesEstimateResponse < Data
        def self.new: (?errors: Array[Peddler::Types::ProductFeesV0::Error]?, ?payload: Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateResponse
                    | (Array[Peddler::Types::ProductFeesV0::Error]?, Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateResponse

        attr_reader errors: Array[Peddler::Types::ProductFeesV0::Error]?
        attr_reader payload: Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult?

        def to_h: () -> { errors: Array[Peddler::Types::ProductFeesV0::Error]?, payload: Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult? }
      end

      class GetMyFeesEstimateResult < Data
        def self.new: (?fees_estimate_result: Peddler::Types::ProductFeesV0::FeesEstimateResult?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult
                    | (Peddler::Types::ProductFeesV0::FeesEstimateResult?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimateResult

        attr_reader fees_estimate_result: Peddler::Types::ProductFeesV0::FeesEstimateResult?

        def to_h: () -> { fees_estimate_result: Peddler::Types::ProductFeesV0::FeesEstimateResult? }
      end

      class GetMyFeesEstimatesErrorList < Data
        def self.new: (errors: Array[Peddler::Types::ProductFeesV0::Error]?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimatesErrorList
                    | (Array[Peddler::Types::ProductFeesV0::Error]?) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimatesErrorList

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::GetMyFeesEstimatesErrorList

        attr_reader errors: Array[Peddler::Types::ProductFeesV0::Error]?

        def to_h: () -> { errors: Array[Peddler::Types::ProductFeesV0::Error]? }
      end

      class GetMyFeesEstimatesRequest < Array[FeesEstimateByIdRequest]
        def self.parse: (Array[untyped]) -> GetMyFeesEstimatesRequest
      end

      class GetMyFeesEstimatesResponse < Array[FeesEstimateResult]
        def self.parse: (Array[untyped]) -> GetMyFeesEstimatesResponse
      end

      class IncludedFeeDetail < Data
        def self.new: (fee_amount: Peddler::Types::Money?, fee_type: String?, final_fee: Peddler::Types::Money?, ?fee_promotion: Peddler::Types::Money?, ?tax_amount: Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::IncludedFeeDetail
                    | (Peddler::Types::Money?, String?, Peddler::Types::Money?, Peddler::Types::Money?, Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::IncludedFeeDetail

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::IncludedFeeDetail

        attr_reader fee_amount: Peddler::Types::Money?

        attr_reader fee_promotion: Peddler::Types::Money?
        attr_reader fee_type: String?
        attr_reader final_fee: Peddler::Types::Money?

        attr_reader tax_amount: Peddler::Types::Money?

        def to_h: () -> { fee_amount: Peddler::Types::Money?, fee_type: String?, final_fee: Peddler::Types::Money?, fee_promotion: Peddler::Types::Money?, tax_amount: Peddler::Types::Money? }
      end

      class IncludedFeeDetailList < Array[IncludedFeeDetail]
        def self.parse: (Array[untyped]) -> IncludedFeeDetailList
      end

      class Points < Data
        def self.new: (?points_monetary_value: Peddler::Types::Money?, ?points_number: Integer?) -> Peddler::Types::ProductFeesV0::Points
                    | (Peddler::Types::Money?, Integer?) -> Peddler::Types::ProductFeesV0::Points

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::Points

        attr_reader points_monetary_value: Peddler::Types::Money?
        attr_reader points_number: Integer?

        def to_h: () -> { points_monetary_value: Peddler::Types::Money?, points_number: Integer? }
      end

      class PriceToEstimateFees < Data
        def self.new: (listing_price: Peddler::Types::Money?, ?points: Peddler::Types::ProductFeesV0::Points?, ?shipping: Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::PriceToEstimateFees
                    | (Peddler::Types::Money?, Peddler::Types::ProductFeesV0::Points?, Peddler::Types::Money?) -> Peddler::Types::ProductFeesV0::PriceToEstimateFees

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductFeesV0::PriceToEstimateFees

        attr_reader listing_price: Peddler::Types::Money?
        attr_reader points: Peddler::Types::ProductFeesV0::Points?
        attr_reader shipping: Peddler::Types::Money?

        def to_h: () -> { listing_price: Peddler::Types::Money?, points: Peddler::Types::ProductFeesV0::Points?, shipping: Peddler::Types::Money? }
      end
    end
  end
end
