module Peddler
  module Types
    module ProductPricingV0
      class BuyBoxPriceType < Data
        def self.new: (landed_price: Peddler::Types::Money?, listing_price: Peddler::Types::Money?, shipping: Peddler::Types::Money?, condition: String?, ?points: Peddler::Types::ProductPricingV0::Points?, ?offer_type: String?, ?quantity_discount_type: String?, ?quantity_tier: Integer?, ?seller_id: String?) -> Peddler::Types::ProductPricingV0::BuyBoxPriceType
                    | (Peddler::Types::Money?, Peddler::Types::Money?, Peddler::Types::Money?, String?, Peddler::Types::ProductPricingV0::Points?, String?, String?, Integer?, String?) -> Peddler::Types::ProductPricingV0::BuyBoxPriceType

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ProductPricingV0::BuyBoxPriceType

        attr_reader condition: String?
        attr_reader landed_price: Peddler::Types::Money?
        attr_reader listing_price: Peddler::Types::Money?

        attr_reader offer_type: String?
        attr_reader points: Peddler::Types::ProductPricingV0::Points?

        attr_reader quantity_discount_type: String?
        attr_reader quantity_tier: Integer?
        attr_reader seller_id: String?
        attr_reader shipping: Peddler::Types::Money?

        def to_h: () -> { landed_price: Peddler::Types::Money?, listing_price: Peddler::Types::Money?, shipping: Peddler::Types::Money?, condition: String?, points: Peddler::Types::ProductPricingV0::Points?, offer_type: String?, quantity_discount_type: String?, quantity_tier: Integer?, seller_id: String? }
      end
    end
  end
end
