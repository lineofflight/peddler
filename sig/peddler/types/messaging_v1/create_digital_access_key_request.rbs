module Peddler
  module Types
    module MessagingV1
      class CreateDigitalAccessKeyRequest < Data
        def self.new: (?attachments: Array[Peddler::Types::MessagingV1::Attachment]?, ?text: String?) -> Peddler::Types::MessagingV1::CreateDigitalAccessKeyRequest
                    | (Array[Peddler::Types::MessagingV1::Attachment]?, String?) -> Peddler::Types::MessagingV1::CreateDigitalAccessKeyRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MessagingV1::CreateDigitalAccessKeyRequest

        attr_reader attachments: Array[Peddler::Types::MessagingV1::Attachment]?
        attr_reader text: String?

        def to_h: () -> { attachments: Array[Peddler::Types::MessagingV1::Attachment]?, text: String? }
      end
    end
  end
end
