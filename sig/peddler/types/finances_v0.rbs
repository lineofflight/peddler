module Peddler
  module Types
    module FinancesV0
      class AdhocDisbursementEvent < Data
        def self.new: (?posted_date: String?, ?transaction_amount: Peddler::Types::Money?, ?transaction_id: String?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::AdhocDisbursementEvent
                    | (String?, Peddler::Types::Money?, String?, String?) -> Peddler::Types::FinancesV0::AdhocDisbursementEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::AdhocDisbursementEvent

        attr_reader posted_date: String?
        attr_reader transaction_amount: Peddler::Types::Money?
        attr_reader transaction_id: String?
        attr_reader transaction_type: String?

        def to_h: () -> { posted_date: String?, transaction_amount: Peddler::Types::Money?, transaction_id: String?, transaction_type: String? }
      end

      class AdhocDisbursementEventList < Array[AdhocDisbursementEvent]
        def self.parse: (Array[untyped]) -> AdhocDisbursementEventList
      end

      class AdjustmentEvent < Data
        def self.new: (?adjustment_amount: Peddler::Types::Money?, ?adjustment_item_list: Array[Peddler::Types::FinancesV0::AdjustmentItem]?, ?adjustment_type: String?, ?posted_date: String?, ?store_name: String?) -> Peddler::Types::FinancesV0::AdjustmentEvent
                    | (Peddler::Types::Money?, Array[Peddler::Types::FinancesV0::AdjustmentItem]?, String?, String?, String?) -> Peddler::Types::FinancesV0::AdjustmentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::AdjustmentEvent

        attr_reader adjustment_amount: Peddler::Types::Money?
        attr_reader adjustment_item_list: Array[Peddler::Types::FinancesV0::AdjustmentItem]?
        attr_reader adjustment_type: String?
        attr_reader posted_date: String?
        attr_reader store_name: String?

        def to_h: () -> { adjustment_amount: Peddler::Types::Money?, adjustment_item_list: Array[Peddler::Types::FinancesV0::AdjustmentItem]?, adjustment_type: String?, posted_date: String?, store_name: String? }
      end

      class AdjustmentEventList < Array[AdjustmentEvent]
        def self.parse: (Array[untyped]) -> AdjustmentEventList
      end

      class AdjustmentItem < Data
        def self.new: (?asin: String?, ?fn_sku: String?, ?per_unit_amount: Peddler::Types::Money?, ?product_description: String?, ?quantity: String?, ?seller_sku: String?, ?total_amount: Peddler::Types::Money?, ?transaction_number: String?) -> Peddler::Types::FinancesV0::AdjustmentItem
                    | (String?, String?, Peddler::Types::Money?, String?, String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::AdjustmentItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::AdjustmentItem

        attr_reader asin: String?
        attr_reader fn_sku: String?
        attr_reader per_unit_amount: Peddler::Types::Money?
        attr_reader product_description: String?
        attr_reader quantity: String?
        attr_reader seller_sku: String?
        attr_reader total_amount: Peddler::Types::Money?
        attr_reader transaction_number: String?

        def to_h: () -> { asin: String?, fn_sku: String?, per_unit_amount: Peddler::Types::Money?, product_description: String?, quantity: String?, seller_sku: String?, total_amount: Peddler::Types::Money?, transaction_number: String? }
      end

      class AdjustmentItemList < Array[AdjustmentItem]
        def self.parse: (Array[untyped]) -> AdjustmentItemList
      end

      class AffordabilityExpenseEvent < Data
        def self.new: (tax_type_cgst: Peddler::Types::Money?, tax_type_igst: Peddler::Types::Money?, tax_type_sgst: Peddler::Types::Money?, ?amazon_order_id: String?, ?base_expense: Peddler::Types::Money?, ?marketplace_id: String?, ?posted_date: String?, ?total_expense: Peddler::Types::Money?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::AffordabilityExpenseEvent
                    | (Peddler::Types::Money?, Peddler::Types::Money?, Peddler::Types::Money?, String?, Peddler::Types::Money?, String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::AffordabilityExpenseEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::AffordabilityExpenseEvent

        attr_reader amazon_order_id: String?
        attr_reader base_expense: Peddler::Types::Money?
        attr_reader marketplace_id: String?
        attr_reader posted_date: String?
        attr_reader tax_type_cgst: Peddler::Types::Money?
        attr_reader tax_type_igst: Peddler::Types::Money?
        attr_reader tax_type_sgst: Peddler::Types::Money?

        attr_reader total_expense: Peddler::Types::Money?
        attr_reader transaction_type: String?

        def to_h: () -> { tax_type_cgst: Peddler::Types::Money?, tax_type_igst: Peddler::Types::Money?, tax_type_sgst: Peddler::Types::Money?, amazon_order_id: String?, base_expense: Peddler::Types::Money?, marketplace_id: String?, posted_date: String?, total_expense: Peddler::Types::Money?, transaction_type: String? }
      end

      class AffordabilityExpenseEventList < Array[AffordabilityExpenseEvent]
        def self.parse: (Array[untyped]) -> AffordabilityExpenseEventList
      end

      class CapacityReservationBillingEvent < Data
        def self.new: (?description: String?, ?posted_date: String?, ?transaction_amount: Peddler::Types::Money?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::CapacityReservationBillingEvent
                    | (String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::CapacityReservationBillingEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::CapacityReservationBillingEvent

        attr_reader description: String?
        attr_reader posted_date: String?
        attr_reader transaction_amount: Peddler::Types::Money?
        attr_reader transaction_type: String?

        def to_h: () -> { description: String?, posted_date: String?, transaction_amount: Peddler::Types::Money?, transaction_type: String? }
      end

      class CapacityReservationBillingEventList < Array[CapacityReservationBillingEvent]
        def self.parse: (Array[untyped]) -> CapacityReservationBillingEventList
      end

      class ChargeComponent < Data
        def self.new: (?charge_amount: Peddler::Types::Money?, ?charge_type: String?) -> Peddler::Types::FinancesV0::ChargeComponent
                    | (Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::ChargeComponent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ChargeComponent

        attr_reader charge_amount: Peddler::Types::Money?
        attr_reader charge_type: String?

        def to_h: () -> { charge_amount: Peddler::Types::Money?, charge_type: String? }
      end

      class ChargeComponentList < Array[ChargeComponent]
        def self.parse: (Array[untyped]) -> ChargeComponentList
      end

      class ChargeInstrument < Data
        def self.new: (?amount: Peddler::Types::Money?, ?description: String?, ?tail: String?) -> Peddler::Types::FinancesV0::ChargeInstrument
                    | (Peddler::Types::Money?, String?, String?) -> Peddler::Types::FinancesV0::ChargeInstrument

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ChargeInstrument

        attr_reader amount: Peddler::Types::Money?
        attr_reader description: String?
        attr_reader tail: String?

        def to_h: () -> { amount: Peddler::Types::Money?, description: String?, tail: String? }
      end

      class ChargeInstrumentList < Array[ChargeInstrument]
        def self.parse: (Array[untyped]) -> ChargeInstrumentList
      end

      class ChargeRefundEvent < Data
        def self.new: (?charge_refund_transactions: Array[Peddler::Types::FinancesV0::ChargeRefundTransaction]?, ?posted_date: String?, ?reason_code: String?, ?reason_code_description: String?) -> Peddler::Types::FinancesV0::ChargeRefundEvent
                    | (Array[Peddler::Types::FinancesV0::ChargeRefundTransaction]?, String?, String?, String?) -> Peddler::Types::FinancesV0::ChargeRefundEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ChargeRefundEvent

        attr_reader charge_refund_transactions: Array[Peddler::Types::FinancesV0::ChargeRefundTransaction]?
        attr_reader posted_date: String?
        attr_reader reason_code: String?
        attr_reader reason_code_description: String?

        def to_h: () -> { charge_refund_transactions: Array[Peddler::Types::FinancesV0::ChargeRefundTransaction]?, posted_date: String?, reason_code: String?, reason_code_description: String? }
      end

      class ChargeRefundEventList < Array[ChargeRefundEvent]
        def self.parse: (Array[untyped]) -> ChargeRefundEventList
      end

      class ChargeRefundTransaction < Data
        def self.new: (?charge_amount: Peddler::Types::Money?, ?charge_type: String?) -> Peddler::Types::FinancesV0::ChargeRefundTransaction
                    | (Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::ChargeRefundTransaction

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ChargeRefundTransaction

        attr_reader charge_amount: Peddler::Types::Money?
        attr_reader charge_type: String?

        def to_h: () -> { charge_amount: Peddler::Types::Money?, charge_type: String? }
      end

      class ChargeRefundTransactions < Array[ChargeRefundTransaction]
        def self.parse: (Array[untyped]) -> ChargeRefundTransactions
      end

      class CouponPaymentEvent < Data
        def self.new: (?charge_component: Peddler::Types::FinancesV0::ChargeComponent?, ?clip_or_redemption_count: Integer?, ?coupon_id: String?, ?fee_component: Peddler::Types::FinancesV0::FeeComponent?, ?payment_event_id: String?, ?posted_date: String?, ?seller_coupon_description: String?, ?total_amount: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::CouponPaymentEvent
                    | (Peddler::Types::FinancesV0::ChargeComponent?, Integer?, String?, Peddler::Types::FinancesV0::FeeComponent?, String?, String?, String?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::CouponPaymentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::CouponPaymentEvent

        attr_reader charge_component: Peddler::Types::FinancesV0::ChargeComponent?
        attr_reader clip_or_redemption_count: Integer?
        attr_reader coupon_id: String?
        attr_reader fee_component: Peddler::Types::FinancesV0::FeeComponent?
        attr_reader payment_event_id: String?
        attr_reader posted_date: String?
        attr_reader seller_coupon_description: String?
        attr_reader total_amount: Peddler::Types::Money?

        def to_h: () -> { charge_component: Peddler::Types::FinancesV0::ChargeComponent?, clip_or_redemption_count: Integer?, coupon_id: String?, fee_component: Peddler::Types::FinancesV0::FeeComponent?, payment_event_id: String?, posted_date: String?, seller_coupon_description: String?, total_amount: Peddler::Types::Money? }
      end

      class CouponPaymentEventList < Array[CouponPaymentEvent]
        def self.parse: (Array[untyped]) -> CouponPaymentEventList
      end

      class DebtRecoveryEvent < Data
        def self.new: (?charge_instrument_list: Array[Peddler::Types::FinancesV0::ChargeInstrument]?, ?debt_recovery_item_list: Array[Peddler::Types::FinancesV0::DebtRecoveryItem]?, ?debt_recovery_type: String?, ?over_payment_credit: Peddler::Types::Money?, ?recovery_amount: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::DebtRecoveryEvent
                    | (Array[Peddler::Types::FinancesV0::ChargeInstrument]?, Array[Peddler::Types::FinancesV0::DebtRecoveryItem]?, String?, Peddler::Types::Money?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::DebtRecoveryEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::DebtRecoveryEvent

        attr_reader charge_instrument_list: Array[Peddler::Types::FinancesV0::ChargeInstrument]?
        attr_reader debt_recovery_item_list: Array[Peddler::Types::FinancesV0::DebtRecoveryItem]?
        attr_reader debt_recovery_type: String?
        attr_reader over_payment_credit: Peddler::Types::Money?
        attr_reader recovery_amount: Peddler::Types::Money?

        def to_h: () -> { charge_instrument_list: Array[Peddler::Types::FinancesV0::ChargeInstrument]?, debt_recovery_item_list: Array[Peddler::Types::FinancesV0::DebtRecoveryItem]?, debt_recovery_type: String?, over_payment_credit: Peddler::Types::Money?, recovery_amount: Peddler::Types::Money? }
      end

      class DebtRecoveryEventList < Array[DebtRecoveryEvent]
        def self.parse: (Array[untyped]) -> DebtRecoveryEventList
      end

      class DebtRecoveryItem < Data
        def self.new: (?group_begin_date: String?, ?group_end_date: String?, ?original_amount: Peddler::Types::Money?, ?recovery_amount: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::DebtRecoveryItem
                    | (String?, String?, Peddler::Types::Money?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::DebtRecoveryItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::DebtRecoveryItem

        attr_reader group_begin_date: String?
        attr_reader group_end_date: String?
        attr_reader original_amount: Peddler::Types::Money?
        attr_reader recovery_amount: Peddler::Types::Money?

        def to_h: () -> { group_begin_date: String?, group_end_date: String?, original_amount: Peddler::Types::Money?, recovery_amount: Peddler::Types::Money? }
      end

      class DebtRecoveryItemList < Array[DebtRecoveryItem]
        def self.parse: (Array[untyped]) -> DebtRecoveryItemList
      end

      class DirectPayment < Data
        def self.new: (?direct_payment_amount: Peddler::Types::Money?, ?direct_payment_type: String?) -> Peddler::Types::FinancesV0::DirectPayment
                    | (Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::DirectPayment

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::DirectPayment

        attr_reader direct_payment_amount: Peddler::Types::Money?
        attr_reader direct_payment_type: String?

        def to_h: () -> { direct_payment_amount: Peddler::Types::Money?, direct_payment_type: String? }
      end

      class DirectPaymentList < Array[DirectPayment]
        def self.parse: (Array[untyped]) -> DirectPaymentList
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::FinancesV0::Error
                    | (String?, String?, String?) -> Peddler::Types::FinancesV0::Error

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::Error

        attr_reader code: String?

        attr_reader details: String?
        attr_reader message: String?

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class FBALiquidationEvent < Data
        def self.new: (?liquidation_fee_amount: Peddler::Types::Money?, ?liquidation_proceeds_amount: Peddler::Types::Money?, ?original_removal_order_id: String?, ?posted_date: String?) -> Peddler::Types::FinancesV0::FBALiquidationEvent
                    | (Peddler::Types::Money?, Peddler::Types::Money?, String?, String?) -> Peddler::Types::FinancesV0::FBALiquidationEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::FBALiquidationEvent

        attr_reader liquidation_fee_amount: Peddler::Types::Money?
        attr_reader liquidation_proceeds_amount: Peddler::Types::Money?
        attr_reader original_removal_order_id: String?
        attr_reader posted_date: String?

        def to_h: () -> { liquidation_fee_amount: Peddler::Types::Money?, liquidation_proceeds_amount: Peddler::Types::Money?, original_removal_order_id: String?, posted_date: String? }
      end

      class FBALiquidationEventList < Array[FBALiquidationEvent]
        def self.parse: (Array[untyped]) -> FBALiquidationEventList
      end

      class FailedAdhocDisbursementEvent < Data
        def self.new: (?disbursement_id: String?, ?funds_transfers_type: String?, ?payment_disbursement_type: String?, ?posted_date: String?, ?status: String?, ?transfer_amount: Peddler::Types::Money?, ?transfer_id: String?) -> Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent
                    | (String?, String?, String?, String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent

        attr_reader disbursement_id: String?
        attr_reader funds_transfers_type: String?
        attr_reader payment_disbursement_type: String?
        attr_reader posted_date: String?
        attr_reader status: String?
        attr_reader transfer_amount: Peddler::Types::Money?
        attr_reader transfer_id: String?

        def to_h: () -> { disbursement_id: String?, funds_transfers_type: String?, payment_disbursement_type: String?, posted_date: String?, status: String?, transfer_amount: Peddler::Types::Money?, transfer_id: String? }
      end

      class FailedAdhocDisbursementEventList < Array[FailedAdhocDisbursementEvent]
        def self.parse: (Array[untyped]) -> FailedAdhocDisbursementEventList
      end

      class FeeComponent < Data
        def self.new: (?fee_amount: Peddler::Types::Money?, ?fee_type: String?) -> Peddler::Types::FinancesV0::FeeComponent
                    | (Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::FeeComponent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::FeeComponent

        attr_reader fee_amount: Peddler::Types::Money?
        attr_reader fee_type: String?

        def to_h: () -> { fee_amount: Peddler::Types::Money?, fee_type: String? }
      end

      class FeeComponentList < Array[FeeComponent]
        def self.parse: (Array[untyped]) -> FeeComponentList
      end

      class FinancialEventGroup < Data
        def self.new: (?account_tail: String?, ?beginning_balance: Peddler::Types::Money?, ?converted_total: Peddler::Types::Money?, ?financial_event_group_end: String?, ?financial_event_group_id: String?, ?financial_event_group_start: String?, ?fund_transfer_date: String?, ?fund_transfer_status: String?, ?original_total: Peddler::Types::Money?, ?processing_status: String?, ?trace_id: String?) -> Peddler::Types::FinancesV0::FinancialEventGroup
                    | (String?, Peddler::Types::Money?, Peddler::Types::Money?, String?, String?, String?, String?, String?, Peddler::Types::Money?, String?, String?) -> Peddler::Types::FinancesV0::FinancialEventGroup

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::FinancialEventGroup

        attr_reader account_tail: String?
        attr_reader beginning_balance: Peddler::Types::Money?
        attr_reader converted_total: Peddler::Types::Money?
        attr_reader financial_event_group_end: String?
        attr_reader financial_event_group_id: String?
        attr_reader financial_event_group_start: String?
        attr_reader fund_transfer_date: String?
        attr_reader fund_transfer_status: String?
        attr_reader original_total: Peddler::Types::Money?
        attr_reader processing_status: String?
        attr_reader trace_id: String?

        def to_h: () -> { account_tail: String?, beginning_balance: Peddler::Types::Money?, converted_total: Peddler::Types::Money?, financial_event_group_end: String?, financial_event_group_id: String?, financial_event_group_start: String?, fund_transfer_date: String?, fund_transfer_status: String?, original_total: Peddler::Types::Money?, processing_status: String?, trace_id: String? }
      end

      class FinancialEventGroupList < Array[FinancialEventGroup]
        def self.parse: (Array[untyped]) -> FinancialEventGroupList
      end

      class FinancialEvents < Data
        def self.new: (?adhoc_disbursement_event_list: Array[Peddler::Types::FinancesV0::AdhocDisbursementEvent]?, ?adjustment_event_list: Array[Peddler::Types::FinancesV0::AdjustmentEvent]?, ?affordability_expense_event_list: Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?, ?affordability_expense_reversal_event_list: Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?, ?capacity_reservation_billing_event_list: Array[Peddler::Types::FinancesV0::CapacityReservationBillingEvent]?, ?charge_refund_event_list: Array[Peddler::Types::FinancesV0::ChargeRefundEvent]?, ?chargeback_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, ?coupon_payment_event_list: Array[Peddler::Types::FinancesV0::CouponPaymentEvent]?, ?debt_recovery_event_list: Array[Peddler::Types::FinancesV0::DebtRecoveryEvent]?, ?fba_liquidation_event_list: Array[Peddler::Types::FinancesV0::FBALiquidationEvent]?, ?failed_adhoc_disbursement_event_list: Array[Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent]?, ?guarantee_claim_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, ?imaging_services_fee_event_list: Array[Peddler::Types::FinancesV0::ImagingServicesFeeEvent]?, ?loan_servicing_event_list: Array[Peddler::Types::FinancesV0::LoanServicingEvent]?, ?network_commingling_transaction_event_list: Array[Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent]?, ?pay_with_amazon_event_list: Array[Peddler::Types::FinancesV0::PayWithAmazonEvent]?, ?product_ads_payment_event_list: Array[Peddler::Types::FinancesV0::ProductAdsPaymentEvent]?, ?refund_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, ?removal_shipment_adjustment_event_list: Array[Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent]?, ?removal_shipment_event_list: Array[Peddler::Types::FinancesV0::RemovalShipmentEvent]?, ?rental_transaction_event_list: Array[Peddler::Types::FinancesV0::RentalTransactionEvent]?, ?retrocharge_event_list: Array[Peddler::Types::FinancesV0::RetrochargeEvent]?, ?safet_reimbursement_event_list: Array[Peddler::Types::FinancesV0::SAFETReimbursementEvent]?, ?seller_deal_payment_event_list: Array[Peddler::Types::FinancesV0::SellerDealPaymentEvent]?, ?seller_review_enrollment_payment_event_list: Array[Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent]?, ?service_fee_event_list: Array[Peddler::Types::FinancesV0::ServiceFeeEvent]?, ?service_provider_credit_event_list: Array[Peddler::Types::FinancesV0::SolutionProviderCreditEvent]?, ?shipment_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, ?shipment_settle_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, ?tds_reimbursement_event_list: Array[Peddler::Types::FinancesV0::TDSReimbursementEvent]?, ?tax_withholding_event_list: Array[Peddler::Types::FinancesV0::TaxWithholdingEvent]?, ?trial_shipment_event_list: Array[Peddler::Types::FinancesV0::TrialShipmentEvent]?, ?value_added_service_charge_event_list: Array[Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent]?) -> Peddler::Types::FinancesV0::FinancialEvents
                    | (Array[Peddler::Types::FinancesV0::AdhocDisbursementEvent]?, Array[Peddler::Types::FinancesV0::AdjustmentEvent]?, Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?, Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?, Array[Peddler::Types::FinancesV0::CapacityReservationBillingEvent]?, Array[Peddler::Types::FinancesV0::ChargeRefundEvent]?, Array[Peddler::Types::FinancesV0::ShipmentEvent]?, Array[Peddler::Types::FinancesV0::CouponPaymentEvent]?, Array[Peddler::Types::FinancesV0::DebtRecoveryEvent]?, Array[Peddler::Types::FinancesV0::FBALiquidationEvent]?, Array[Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent]?, Array[Peddler::Types::FinancesV0::ShipmentEvent]?, Array[Peddler::Types::FinancesV0::ImagingServicesFeeEvent]?, Array[Peddler::Types::FinancesV0::LoanServicingEvent]?, Array[Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent]?, Array[Peddler::Types::FinancesV0::PayWithAmazonEvent]?, Array[Peddler::Types::FinancesV0::ProductAdsPaymentEvent]?, Array[Peddler::Types::FinancesV0::ShipmentEvent]?, Array[Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent]?, Array[Peddler::Types::FinancesV0::RemovalShipmentEvent]?, Array[Peddler::Types::FinancesV0::RentalTransactionEvent]?, Array[Peddler::Types::FinancesV0::RetrochargeEvent]?, Array[Peddler::Types::FinancesV0::SAFETReimbursementEvent]?, Array[Peddler::Types::FinancesV0::SellerDealPaymentEvent]?, Array[Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent]?, Array[Peddler::Types::FinancesV0::ServiceFeeEvent]?, Array[Peddler::Types::FinancesV0::SolutionProviderCreditEvent]?, Array[Peddler::Types::FinancesV0::ShipmentEvent]?, Array[Peddler::Types::FinancesV0::ShipmentEvent]?, Array[Peddler::Types::FinancesV0::TDSReimbursementEvent]?, Array[Peddler::Types::FinancesV0::TaxWithholdingEvent]?, Array[Peddler::Types::FinancesV0::TrialShipmentEvent]?, Array[Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent]?) -> Peddler::Types::FinancesV0::FinancialEvents

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::FinancialEvents

        attr_reader adhoc_disbursement_event_list: Array[Peddler::Types::FinancesV0::AdhocDisbursementEvent]?
        attr_reader adjustment_event_list: Array[Peddler::Types::FinancesV0::AdjustmentEvent]?
        attr_reader affordability_expense_event_list: Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?
        attr_reader affordability_expense_reversal_event_list: Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?
        attr_reader capacity_reservation_billing_event_list: Array[Peddler::Types::FinancesV0::CapacityReservationBillingEvent]?
        attr_reader charge_refund_event_list: Array[Peddler::Types::FinancesV0::ChargeRefundEvent]?
        attr_reader chargeback_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?
        attr_reader coupon_payment_event_list: Array[Peddler::Types::FinancesV0::CouponPaymentEvent]?
        attr_reader debt_recovery_event_list: Array[Peddler::Types::FinancesV0::DebtRecoveryEvent]?

        attr_reader failed_adhoc_disbursement_event_list: Array[Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent]?
        attr_reader fba_liquidation_event_list: Array[Peddler::Types::FinancesV0::FBALiquidationEvent]?

        attr_reader guarantee_claim_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?
        attr_reader imaging_services_fee_event_list: Array[Peddler::Types::FinancesV0::ImagingServicesFeeEvent]?
        attr_reader loan_servicing_event_list: Array[Peddler::Types::FinancesV0::LoanServicingEvent]?
        attr_reader network_commingling_transaction_event_list: Array[Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent]?
        attr_reader pay_with_amazon_event_list: Array[Peddler::Types::FinancesV0::PayWithAmazonEvent]?
        attr_reader product_ads_payment_event_list: Array[Peddler::Types::FinancesV0::ProductAdsPaymentEvent]?
        attr_reader refund_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?
        attr_reader removal_shipment_adjustment_event_list: Array[Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent]?
        attr_reader removal_shipment_event_list: Array[Peddler::Types::FinancesV0::RemovalShipmentEvent]?
        attr_reader rental_transaction_event_list: Array[Peddler::Types::FinancesV0::RentalTransactionEvent]?
        attr_reader retrocharge_event_list: Array[Peddler::Types::FinancesV0::RetrochargeEvent]?
        attr_reader safet_reimbursement_event_list: Array[Peddler::Types::FinancesV0::SAFETReimbursementEvent]?
        attr_reader seller_deal_payment_event_list: Array[Peddler::Types::FinancesV0::SellerDealPaymentEvent]?
        attr_reader seller_review_enrollment_payment_event_list: Array[Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent]?
        attr_reader service_fee_event_list: Array[Peddler::Types::FinancesV0::ServiceFeeEvent]?
        attr_reader service_provider_credit_event_list: Array[Peddler::Types::FinancesV0::SolutionProviderCreditEvent]?
        attr_reader shipment_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?
        attr_reader shipment_settle_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?

        attr_reader tax_withholding_event_list: Array[Peddler::Types::FinancesV0::TaxWithholdingEvent]?
        attr_reader tds_reimbursement_event_list: Array[Peddler::Types::FinancesV0::TDSReimbursementEvent]?

        attr_reader trial_shipment_event_list: Array[Peddler::Types::FinancesV0::TrialShipmentEvent]?
        attr_reader value_added_service_charge_event_list: Array[Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent]?

        def to_h: () -> { adhoc_disbursement_event_list: Array[Peddler::Types::FinancesV0::AdhocDisbursementEvent]?, adjustment_event_list: Array[Peddler::Types::FinancesV0::AdjustmentEvent]?, affordability_expense_event_list: Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?, affordability_expense_reversal_event_list: Array[Peddler::Types::FinancesV0::AffordabilityExpenseEvent]?, capacity_reservation_billing_event_list: Array[Peddler::Types::FinancesV0::CapacityReservationBillingEvent]?, charge_refund_event_list: Array[Peddler::Types::FinancesV0::ChargeRefundEvent]?, chargeback_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, coupon_payment_event_list: Array[Peddler::Types::FinancesV0::CouponPaymentEvent]?, debt_recovery_event_list: Array[Peddler::Types::FinancesV0::DebtRecoveryEvent]?, fba_liquidation_event_list: Array[Peddler::Types::FinancesV0::FBALiquidationEvent]?, failed_adhoc_disbursement_event_list: Array[Peddler::Types::FinancesV0::FailedAdhocDisbursementEvent]?, guarantee_claim_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, imaging_services_fee_event_list: Array[Peddler::Types::FinancesV0::ImagingServicesFeeEvent]?, loan_servicing_event_list: Array[Peddler::Types::FinancesV0::LoanServicingEvent]?, network_commingling_transaction_event_list: Array[Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent]?, pay_with_amazon_event_list: Array[Peddler::Types::FinancesV0::PayWithAmazonEvent]?, product_ads_payment_event_list: Array[Peddler::Types::FinancesV0::ProductAdsPaymentEvent]?, refund_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, removal_shipment_adjustment_event_list: Array[Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent]?, removal_shipment_event_list: Array[Peddler::Types::FinancesV0::RemovalShipmentEvent]?, rental_transaction_event_list: Array[Peddler::Types::FinancesV0::RentalTransactionEvent]?, retrocharge_event_list: Array[Peddler::Types::FinancesV0::RetrochargeEvent]?, safet_reimbursement_event_list: Array[Peddler::Types::FinancesV0::SAFETReimbursementEvent]?, seller_deal_payment_event_list: Array[Peddler::Types::FinancesV0::SellerDealPaymentEvent]?, seller_review_enrollment_payment_event_list: Array[Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent]?, service_fee_event_list: Array[Peddler::Types::FinancesV0::ServiceFeeEvent]?, service_provider_credit_event_list: Array[Peddler::Types::FinancesV0::SolutionProviderCreditEvent]?, shipment_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, shipment_settle_event_list: Array[Peddler::Types::FinancesV0::ShipmentEvent]?, tds_reimbursement_event_list: Array[Peddler::Types::FinancesV0::TDSReimbursementEvent]?, tax_withholding_event_list: Array[Peddler::Types::FinancesV0::TaxWithholdingEvent]?, trial_shipment_event_list: Array[Peddler::Types::FinancesV0::TrialShipmentEvent]?, value_added_service_charge_event_list: Array[Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent]? }
      end

      class ImagingServicesFeeEvent < Data
        def self.new: (?asin: String?, ?fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?imaging_request_billing_item_id: String?, ?posted_date: String?) -> Peddler::Types::FinancesV0::ImagingServicesFeeEvent
                    | (String?, Array[Peddler::Types::FinancesV0::FeeComponent]?, String?, String?) -> Peddler::Types::FinancesV0::ImagingServicesFeeEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ImagingServicesFeeEvent

        attr_reader asin: String?
        attr_reader fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader imaging_request_billing_item_id: String?
        attr_reader posted_date: String?

        def to_h: () -> { asin: String?, fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, imaging_request_billing_item_id: String?, posted_date: String? }
      end

      class ImagingServicesFeeEventList < Array[ImagingServicesFeeEvent]
        def self.parse: (Array[untyped]) -> ImagingServicesFeeEventList
      end

      class ListFinancialEventGroupsPayload < Data
        def self.new: (?financial_event_group_list: Array[Peddler::Types::FinancesV0::FinancialEventGroup]?, ?next_token: String?) -> Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload
                    | (Array[Peddler::Types::FinancesV0::FinancialEventGroup]?, String?) -> Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload

        attr_reader financial_event_group_list: Array[Peddler::Types::FinancesV0::FinancialEventGroup]?
        attr_reader next_token: String?

        def to_h: () -> { financial_event_group_list: Array[Peddler::Types::FinancesV0::FinancialEventGroup]?, next_token: String? }
      end

      class ListFinancialEventGroupsResponse < Data
        def self.new: (?errors: Array[Peddler::Types::FinancesV0::Error]?, ?payload: Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload?) -> Peddler::Types::FinancesV0::ListFinancialEventGroupsResponse
                    | (Array[Peddler::Types::FinancesV0::Error]?, Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload?) -> Peddler::Types::FinancesV0::ListFinancialEventGroupsResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ListFinancialEventGroupsResponse

        attr_reader errors: Array[Peddler::Types::FinancesV0::Error]?
        attr_reader payload: Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload?

        def to_h: () -> { errors: Array[Peddler::Types::FinancesV0::Error]?, payload: Peddler::Types::FinancesV0::ListFinancialEventGroupsPayload? }
      end

      class ListFinancialEventsPayload < Data
        def self.new: (?financial_events: Peddler::Types::FinancesV0::FinancialEvents?, ?next_token: String?) -> Peddler::Types::FinancesV0::ListFinancialEventsPayload
                    | (Peddler::Types::FinancesV0::FinancialEvents?, String?) -> Peddler::Types::FinancesV0::ListFinancialEventsPayload

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ListFinancialEventsPayload

        attr_reader financial_events: Peddler::Types::FinancesV0::FinancialEvents?
        attr_reader next_token: String?

        def to_h: () -> { financial_events: Peddler::Types::FinancesV0::FinancialEvents?, next_token: String? }
      end

      class ListFinancialEventsResponse < Data
        def self.new: (?errors: Array[Peddler::Types::FinancesV0::Error]?, ?payload: Peddler::Types::FinancesV0::ListFinancialEventsPayload?) -> Peddler::Types::FinancesV0::ListFinancialEventsResponse
                    | (Array[Peddler::Types::FinancesV0::Error]?, Peddler::Types::FinancesV0::ListFinancialEventsPayload?) -> Peddler::Types::FinancesV0::ListFinancialEventsResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ListFinancialEventsResponse

        attr_reader errors: Array[Peddler::Types::FinancesV0::Error]?
        attr_reader payload: Peddler::Types::FinancesV0::ListFinancialEventsPayload?

        def to_h: () -> { errors: Array[Peddler::Types::FinancesV0::Error]?, payload: Peddler::Types::FinancesV0::ListFinancialEventsPayload? }
      end

      class LoanServicingEvent < Data
        def self.new: (?loan_amount: Peddler::Types::Money?, ?source_business_event_type: String?) -> Peddler::Types::FinancesV0::LoanServicingEvent
                    | (Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::LoanServicingEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::LoanServicingEvent

        attr_reader loan_amount: Peddler::Types::Money?
        attr_reader source_business_event_type: String?

        def to_h: () -> { loan_amount: Peddler::Types::Money?, source_business_event_type: String? }
      end

      class LoanServicingEventList < Array[LoanServicingEvent]
        def self.parse: (Array[untyped]) -> LoanServicingEventList
      end

      class NetworkComminglingTransactionEvent < Data
        def self.new: (?asin: String?, ?marketplace_id: String?, ?net_co_transaction_id: String?, ?posted_date: String?, ?swap_reason: String?, ?tax_amount: Peddler::Types::Money?, ?tax_exclusive_amount: Peddler::Types::Money?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent
                    | (String?, String?, String?, String?, String?, Peddler::Types::Money?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::NetworkComminglingTransactionEvent

        attr_reader asin: String?
        attr_reader marketplace_id: String?
        attr_reader net_co_transaction_id: String?
        attr_reader posted_date: String?
        attr_reader swap_reason: String?
        attr_reader tax_amount: Peddler::Types::Money?
        attr_reader tax_exclusive_amount: Peddler::Types::Money?
        attr_reader transaction_type: String?

        def to_h: () -> { asin: String?, marketplace_id: String?, net_co_transaction_id: String?, posted_date: String?, swap_reason: String?, tax_amount: Peddler::Types::Money?, tax_exclusive_amount: Peddler::Types::Money?, transaction_type: String? }
      end

      class NetworkComminglingTransactionEventList < Array[NetworkComminglingTransactionEvent]
        def self.parse: (Array[untyped]) -> NetworkComminglingTransactionEventList
      end

      class PayWithAmazonEvent < Data
        def self.new: (?amount_description: String?, ?business_object_type: String?, ?charge: Peddler::Types::FinancesV0::ChargeComponent?, ?fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?fulfillment_channel: String?, ?payment_amount_type: String?, ?sales_channel: String?, ?seller_order_id: String?, ?store_name: String?, ?transaction_posted_date: String?) -> Peddler::Types::FinancesV0::PayWithAmazonEvent
                    | (String?, String?, Peddler::Types::FinancesV0::ChargeComponent?, Array[Peddler::Types::FinancesV0::FeeComponent]?, String?, String?, String?, String?, String?, String?) -> Peddler::Types::FinancesV0::PayWithAmazonEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::PayWithAmazonEvent

        attr_reader amount_description: String?
        attr_reader business_object_type: String?
        attr_reader charge: Peddler::Types::FinancesV0::ChargeComponent?
        attr_reader fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader fulfillment_channel: String?
        attr_reader payment_amount_type: String?
        attr_reader sales_channel: String?
        attr_reader seller_order_id: String?
        attr_reader store_name: String?
        attr_reader transaction_posted_date: String?

        def to_h: () -> { amount_description: String?, business_object_type: String?, charge: Peddler::Types::FinancesV0::ChargeComponent?, fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, fulfillment_channel: String?, payment_amount_type: String?, sales_channel: String?, seller_order_id: String?, store_name: String?, transaction_posted_date: String? }
      end

      class PayWithAmazonEventList < Array[PayWithAmazonEvent]
        def self.parse: (Array[untyped]) -> PayWithAmazonEventList
      end

      class ProductAdsPaymentEvent < Data
        def self.new: (?base_value: Peddler::Types::Money?, ?invoice_id: String?, ?posted_date: String?, ?tax_value: Peddler::Types::Money?, ?transaction_type: String?, ?transaction_value: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::ProductAdsPaymentEvent
                    | (Peddler::Types::Money?, String?, String?, Peddler::Types::Money?, String?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::ProductAdsPaymentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ProductAdsPaymentEvent

        attr_reader base_value: Peddler::Types::Money?
        attr_reader invoice_id: String?
        attr_reader posted_date: String?
        attr_reader tax_value: Peddler::Types::Money?
        attr_reader transaction_type: String?
        attr_reader transaction_value: Peddler::Types::Money?

        def to_h: () -> { base_value: Peddler::Types::Money?, invoice_id: String?, posted_date: String?, tax_value: Peddler::Types::Money?, transaction_type: String?, transaction_value: Peddler::Types::Money? }
      end

      class ProductAdsPaymentEventList < Array[ProductAdsPaymentEvent]
        def self.parse: (Array[untyped]) -> ProductAdsPaymentEventList
      end

      class Promotion < Data
        def self.new: (?promotion_amount: Peddler::Types::Money?, ?promotion_id: String?, ?promotion_type: String?) -> Peddler::Types::FinancesV0::Promotion
                    | (Peddler::Types::Money?, String?, String?) -> Peddler::Types::FinancesV0::Promotion

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::Promotion

        attr_reader promotion_amount: Peddler::Types::Money?
        attr_reader promotion_id: String?
        attr_reader promotion_type: String?

        def to_h: () -> { promotion_amount: Peddler::Types::Money?, promotion_id: String?, promotion_type: String? }
      end

      class PromotionList < Array[Promotion]
        def self.parse: (Array[untyped]) -> PromotionList
      end

      class RemovalShipmentAdjustmentEvent < Data
        def self.new: (?adjustment_event_id: String?, ?merchant_order_id: String?, ?order_id: String?, ?posted_date: String?, ?removal_shipment_item_adjustment_list: Array[Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment]?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent
                    | (String?, String?, String?, String?, Array[Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment]?, String?) -> Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::RemovalShipmentAdjustmentEvent

        attr_reader adjustment_event_id: String?
        attr_reader merchant_order_id: String?
        attr_reader order_id: String?
        attr_reader posted_date: String?
        attr_reader removal_shipment_item_adjustment_list: Array[Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment]?
        attr_reader transaction_type: String?

        def to_h: () -> { adjustment_event_id: String?, merchant_order_id: String?, order_id: String?, posted_date: String?, removal_shipment_item_adjustment_list: Array[Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment]?, transaction_type: String? }
      end

      class RemovalShipmentAdjustmentEventList < Array[RemovalShipmentAdjustmentEvent]
        def self.parse: (Array[untyped]) -> RemovalShipmentAdjustmentEventList
      end

      class RemovalShipmentEvent < Data
        def self.new: (?merchant_order_id: String?, ?order_id: String?, ?posted_date: String?, ?removal_shipment_item_list: Array[Peddler::Types::FinancesV0::RemovalShipmentItem]?, ?store_name: String?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::RemovalShipmentEvent
                    | (String?, String?, String?, Array[Peddler::Types::FinancesV0::RemovalShipmentItem]?, String?, String?) -> Peddler::Types::FinancesV0::RemovalShipmentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::RemovalShipmentEvent

        attr_reader merchant_order_id: String?
        attr_reader order_id: String?
        attr_reader posted_date: String?
        attr_reader removal_shipment_item_list: Array[Peddler::Types::FinancesV0::RemovalShipmentItem]?
        attr_reader store_name: String?
        attr_reader transaction_type: String?

        def to_h: () -> { merchant_order_id: String?, order_id: String?, posted_date: String?, removal_shipment_item_list: Array[Peddler::Types::FinancesV0::RemovalShipmentItem]?, store_name: String?, transaction_type: String? }
      end

      class RemovalShipmentEventList < Array[RemovalShipmentEvent]
        def self.parse: (Array[untyped]) -> RemovalShipmentEventList
      end

      class RemovalShipmentItem < Data
        def self.new: (?fee_amount: Peddler::Types::Money?, ?fulfillment_network_sku: String?, ?quantity: Integer?, ?removal_shipment_item_id: String?, ?revenue: Peddler::Types::Money?, ?tax_amount: Peddler::Types::Money?, ?tax_collection_model: String?, ?tax_withheld: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::RemovalShipmentItem
                    | (Peddler::Types::Money?, String?, Integer?, String?, Peddler::Types::Money?, Peddler::Types::Money?, String?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::RemovalShipmentItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::RemovalShipmentItem

        attr_reader fee_amount: Peddler::Types::Money?
        attr_reader fulfillment_network_sku: String?
        attr_reader quantity: Integer?
        attr_reader removal_shipment_item_id: String?
        attr_reader revenue: Peddler::Types::Money?
        attr_reader tax_amount: Peddler::Types::Money?
        attr_reader tax_collection_model: String?
        attr_reader tax_withheld: Peddler::Types::Money?

        def to_h: () -> { fee_amount: Peddler::Types::Money?, fulfillment_network_sku: String?, quantity: Integer?, removal_shipment_item_id: String?, revenue: Peddler::Types::Money?, tax_amount: Peddler::Types::Money?, tax_collection_model: String?, tax_withheld: Peddler::Types::Money? }
      end

      class RemovalShipmentItemAdjustment < Data
        def self.new: (?adjusted_quantity: Integer?, ?fulfillment_network_sku: String?, ?removal_shipment_item_id: String?, ?revenue_adjustment: Peddler::Types::Money?, ?tax_amount_adjustment: Peddler::Types::Money?, ?tax_collection_model: String?, ?tax_withheld_adjustment: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment
                    | (Integer?, String?, String?, Peddler::Types::Money?, Peddler::Types::Money?, String?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::RemovalShipmentItemAdjustment

        attr_reader adjusted_quantity: Integer?
        attr_reader fulfillment_network_sku: String?
        attr_reader removal_shipment_item_id: String?
        attr_reader revenue_adjustment: Peddler::Types::Money?
        attr_reader tax_amount_adjustment: Peddler::Types::Money?
        attr_reader tax_collection_model: String?
        attr_reader tax_withheld_adjustment: Peddler::Types::Money?

        def to_h: () -> { adjusted_quantity: Integer?, fulfillment_network_sku: String?, removal_shipment_item_id: String?, revenue_adjustment: Peddler::Types::Money?, tax_amount_adjustment: Peddler::Types::Money?, tax_collection_model: String?, tax_withheld_adjustment: Peddler::Types::Money? }
      end

      class RemovalShipmentItemList < Array[RemovalShipmentItem]
        def self.parse: (Array[untyped]) -> RemovalShipmentItemList
      end

      class RentalTransactionEvent < Data
        def self.new: (?amazon_order_id: String?, ?extension_length: Integer?, ?marketplace_name: String?, ?posted_date: String?, ?rental_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, ?rental_event_type: String?, ?rental_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?rental_initial_value: Peddler::Types::Money?, ?rental_reimbursement: Peddler::Types::Money?, ?rental_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?) -> Peddler::Types::FinancesV0::RentalTransactionEvent
                    | (String?, Integer?, String?, String?, Array[Peddler::Types::FinancesV0::ChargeComponent]?, String?, Array[Peddler::Types::FinancesV0::FeeComponent]?, Peddler::Types::Money?, Peddler::Types::Money?, Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?) -> Peddler::Types::FinancesV0::RentalTransactionEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::RentalTransactionEvent

        attr_reader amazon_order_id: String?
        attr_reader extension_length: Integer?
        attr_reader marketplace_name: String?
        attr_reader posted_date: String?
        attr_reader rental_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?
        attr_reader rental_event_type: String?
        attr_reader rental_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader rental_initial_value: Peddler::Types::Money?
        attr_reader rental_reimbursement: Peddler::Types::Money?
        attr_reader rental_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?

        def to_h: () -> { amazon_order_id: String?, extension_length: Integer?, marketplace_name: String?, posted_date: String?, rental_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, rental_event_type: String?, rental_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, rental_initial_value: Peddler::Types::Money?, rental_reimbursement: Peddler::Types::Money?, rental_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]? }
      end

      class RentalTransactionEventList < Array[RentalTransactionEvent]
        def self.parse: (Array[untyped]) -> RentalTransactionEventList
      end

      class RetrochargeEvent < Data
        def self.new: (?amazon_order_id: String?, ?base_tax: Peddler::Types::Money?, ?marketplace_name: String?, ?posted_date: String?, ?retrocharge_event_type: String?, ?retrocharge_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?, ?shipping_tax: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::RetrochargeEvent
                    | (String?, Peddler::Types::Money?, String?, String?, String?, Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::RetrochargeEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::RetrochargeEvent

        attr_reader amazon_order_id: String?
        attr_reader base_tax: Peddler::Types::Money?
        attr_reader marketplace_name: String?
        attr_reader posted_date: String?
        attr_reader retrocharge_event_type: String?
        attr_reader retrocharge_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?
        attr_reader shipping_tax: Peddler::Types::Money?

        def to_h: () -> { amazon_order_id: String?, base_tax: Peddler::Types::Money?, marketplace_name: String?, posted_date: String?, retrocharge_event_type: String?, retrocharge_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?, shipping_tax: Peddler::Types::Money? }
      end

      class RetrochargeEventList < Array[RetrochargeEvent]
        def self.parse: (Array[untyped]) -> RetrochargeEventList
      end

      class SAFETReimbursementEvent < Data
        def self.new: (?posted_date: String?, ?reason_code: String?, ?reimbursed_amount: Peddler::Types::Money?, ?safet_claim_id: String?, ?safet_reimbursement_item_list: Array[Peddler::Types::FinancesV0::SAFETReimbursementItem]?) -> Peddler::Types::FinancesV0::SAFETReimbursementEvent
                    | (String?, String?, Peddler::Types::Money?, String?, Array[Peddler::Types::FinancesV0::SAFETReimbursementItem]?) -> Peddler::Types::FinancesV0::SAFETReimbursementEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::SAFETReimbursementEvent

        attr_reader posted_date: String?
        attr_reader reason_code: String?
        attr_reader reimbursed_amount: Peddler::Types::Money?
        attr_reader safet_claim_id: String?
        attr_reader safet_reimbursement_item_list: Array[Peddler::Types::FinancesV0::SAFETReimbursementItem]?

        def to_h: () -> { posted_date: String?, reason_code: String?, reimbursed_amount: Peddler::Types::Money?, safet_claim_id: String?, safet_reimbursement_item_list: Array[Peddler::Types::FinancesV0::SAFETReimbursementItem]? }
      end

      class SAFETReimbursementEventList < Array[SAFETReimbursementEvent]
        def self.parse: (Array[untyped]) -> SAFETReimbursementEventList
      end

      class SAFETReimbursementItem < Data
        def self.new: (?item_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, ?product_description: String?, ?quantity: String?) -> Peddler::Types::FinancesV0::SAFETReimbursementItem
                    | (Array[Peddler::Types::FinancesV0::ChargeComponent]?, String?, String?) -> Peddler::Types::FinancesV0::SAFETReimbursementItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::SAFETReimbursementItem

        attr_reader item_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?
        attr_reader product_description: String?
        attr_reader quantity: String?

        def to_h: () -> { item_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, product_description: String?, quantity: String? }
      end

      class SAFETReimbursementItemList < Array[SAFETReimbursementItem]
        def self.parse: (Array[untyped]) -> SAFETReimbursementItemList
      end

      class SellerDealPaymentEvent < Data
        def self.new: (?deal_description: String?, ?deal_id: String?, ?event_type: String?, ?fee_amount: Peddler::Types::Money?, ?fee_type: String?, ?posted_date: String?, ?tax_amount: Peddler::Types::Money?, ?total_amount: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::SellerDealPaymentEvent
                    | (String?, String?, String?, Peddler::Types::Money?, String?, String?, Peddler::Types::Money?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::SellerDealPaymentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::SellerDealPaymentEvent

        attr_reader deal_description: String?
        attr_reader deal_id: String?
        attr_reader event_type: String?
        attr_reader fee_amount: Peddler::Types::Money?
        attr_reader fee_type: String?
        attr_reader posted_date: String?
        attr_reader tax_amount: Peddler::Types::Money?
        attr_reader total_amount: Peddler::Types::Money?

        def to_h: () -> { deal_description: String?, deal_id: String?, event_type: String?, fee_amount: Peddler::Types::Money?, fee_type: String?, posted_date: String?, tax_amount: Peddler::Types::Money?, total_amount: Peddler::Types::Money? }
      end

      class SellerDealPaymentEventList < Array[SellerDealPaymentEvent]
        def self.parse: (Array[untyped]) -> SellerDealPaymentEventList
      end

      class SellerReviewEnrollmentPaymentEvent < Data
        def self.new: (?charge_component: Peddler::Types::FinancesV0::ChargeComponent?, ?enrollment_id: String?, ?fee_component: Peddler::Types::FinancesV0::FeeComponent?, ?parent_asin: String?, ?posted_date: String?, ?total_amount: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent
                    | (Peddler::Types::FinancesV0::ChargeComponent?, String?, Peddler::Types::FinancesV0::FeeComponent?, String?, String?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::SellerReviewEnrollmentPaymentEvent

        attr_reader charge_component: Peddler::Types::FinancesV0::ChargeComponent?
        attr_reader enrollment_id: String?
        attr_reader fee_component: Peddler::Types::FinancesV0::FeeComponent?
        attr_reader parent_asin: String?
        attr_reader posted_date: String?
        attr_reader total_amount: Peddler::Types::Money?

        def to_h: () -> { charge_component: Peddler::Types::FinancesV0::ChargeComponent?, enrollment_id: String?, fee_component: Peddler::Types::FinancesV0::FeeComponent?, parent_asin: String?, posted_date: String?, total_amount: Peddler::Types::Money? }
      end

      class SellerReviewEnrollmentPaymentEventList < Array[SellerReviewEnrollmentPaymentEvent]
        def self.parse: (Array[untyped]) -> SellerReviewEnrollmentPaymentEventList
      end

      class ServiceFeeEvent < Data
        def self.new: (?asin: String?, ?amazon_order_id: String?, ?fee_description: String?, ?fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?fee_reason: String?, ?fn_sku: String?, ?seller_sku: String?, ?store_name: String?) -> Peddler::Types::FinancesV0::ServiceFeeEvent
                    | (String?, String?, String?, Array[Peddler::Types::FinancesV0::FeeComponent]?, String?, String?, String?, String?) -> Peddler::Types::FinancesV0::ServiceFeeEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ServiceFeeEvent

        attr_reader amazon_order_id: String?
        attr_reader asin: String?

        attr_reader fee_description: String?
        attr_reader fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader fee_reason: String?
        attr_reader fn_sku: String?
        attr_reader seller_sku: String?
        attr_reader store_name: String?

        def to_h: () -> { asin: String?, amazon_order_id: String?, fee_description: String?, fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, fee_reason: String?, fn_sku: String?, seller_sku: String?, store_name: String? }
      end

      class ServiceFeeEventList < Array[ServiceFeeEvent]
        def self.parse: (Array[untyped]) -> ServiceFeeEventList
      end

      class ShipmentEvent < Data
        def self.new: (?amazon_order_id: String?, ?direct_payment_list: Array[Peddler::Types::FinancesV0::DirectPayment]?, ?marketplace_name: String?, ?order_charge_adjustment_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, ?order_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, ?order_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?order_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?posted_date: String?, ?seller_order_id: String?, ?shipment_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?shipment_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?shipment_item_adjustment_list: Array[Peddler::Types::FinancesV0::ShipmentItem]?, ?shipment_item_list: Array[Peddler::Types::FinancesV0::ShipmentItem]?, ?store_name: String?) -> Peddler::Types::FinancesV0::ShipmentEvent
                    | (String?, Array[Peddler::Types::FinancesV0::DirectPayment]?, String?, Array[Peddler::Types::FinancesV0::ChargeComponent]?, Array[Peddler::Types::FinancesV0::ChargeComponent]?, Array[Peddler::Types::FinancesV0::FeeComponent]?, Array[Peddler::Types::FinancesV0::FeeComponent]?, String?, String?, Array[Peddler::Types::FinancesV0::FeeComponent]?, Array[Peddler::Types::FinancesV0::FeeComponent]?, Array[Peddler::Types::FinancesV0::ShipmentItem]?, Array[Peddler::Types::FinancesV0::ShipmentItem]?, String?) -> Peddler::Types::FinancesV0::ShipmentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ShipmentEvent

        attr_reader amazon_order_id: String?
        attr_reader direct_payment_list: Array[Peddler::Types::FinancesV0::DirectPayment]?
        attr_reader marketplace_name: String?
        attr_reader order_charge_adjustment_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?
        attr_reader order_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?
        attr_reader order_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader order_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader posted_date: String?
        attr_reader seller_order_id: String?
        attr_reader shipment_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader shipment_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader shipment_item_adjustment_list: Array[Peddler::Types::FinancesV0::ShipmentItem]?
        attr_reader shipment_item_list: Array[Peddler::Types::FinancesV0::ShipmentItem]?
        attr_reader store_name: String?

        def to_h: () -> { amazon_order_id: String?, direct_payment_list: Array[Peddler::Types::FinancesV0::DirectPayment]?, marketplace_name: String?, order_charge_adjustment_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, order_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, order_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, order_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, posted_date: String?, seller_order_id: String?, shipment_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, shipment_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, shipment_item_adjustment_list: Array[Peddler::Types::FinancesV0::ShipmentItem]?, shipment_item_list: Array[Peddler::Types::FinancesV0::ShipmentItem]?, store_name: String? }
      end

      class ShipmentEventList < Array[ShipmentEvent]
        def self.parse: (Array[untyped]) -> ShipmentEventList
      end

      class ShipmentItem < Data
        def self.new: (?cost_of_points_granted: Peddler::Types::Money?, ?cost_of_points_returned: Peddler::Types::Money?, ?item_charge_adjustment_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, ?item_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, ?item_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?item_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?item_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?, ?order_adjustment_item_id: String?, ?order_item_id: String?, ?promotion_adjustment_list: Array[Peddler::Types::FinancesV0::Promotion]?, ?promotion_list: Array[Peddler::Types::FinancesV0::Promotion]?, ?quantity_shipped: Integer?, ?seller_sku: String?) -> Peddler::Types::FinancesV0::ShipmentItem
                    | (Peddler::Types::Money?, Peddler::Types::Money?, Array[Peddler::Types::FinancesV0::ChargeComponent]?, Array[Peddler::Types::FinancesV0::ChargeComponent]?, Array[Peddler::Types::FinancesV0::FeeComponent]?, Array[Peddler::Types::FinancesV0::FeeComponent]?, Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?, String?, String?, Array[Peddler::Types::FinancesV0::Promotion]?, Array[Peddler::Types::FinancesV0::Promotion]?, Integer?, String?) -> Peddler::Types::FinancesV0::ShipmentItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ShipmentItem

        attr_reader cost_of_points_granted: Peddler::Types::Money?
        attr_reader cost_of_points_returned: Peddler::Types::Money?
        attr_reader item_charge_adjustment_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?
        attr_reader item_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?
        attr_reader item_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader item_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader item_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?
        attr_reader order_adjustment_item_id: String?
        attr_reader order_item_id: String?
        attr_reader promotion_adjustment_list: Array[Peddler::Types::FinancesV0::Promotion]?
        attr_reader promotion_list: Array[Peddler::Types::FinancesV0::Promotion]?
        attr_reader quantity_shipped: Integer?
        attr_reader seller_sku: String?

        def to_h: () -> { cost_of_points_granted: Peddler::Types::Money?, cost_of_points_returned: Peddler::Types::Money?, item_charge_adjustment_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, item_charge_list: Array[Peddler::Types::FinancesV0::ChargeComponent]?, item_fee_adjustment_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, item_fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, item_tax_withheld_list: Array[Peddler::Types::FinancesV0::TaxWithheldComponent]?, order_adjustment_item_id: String?, order_item_id: String?, promotion_adjustment_list: Array[Peddler::Types::FinancesV0::Promotion]?, promotion_list: Array[Peddler::Types::FinancesV0::Promotion]?, quantity_shipped: Integer?, seller_sku: String? }
      end

      class ShipmentItemList < Array[ShipmentItem]
        def self.parse: (Array[untyped]) -> ShipmentItemList
      end

      class ShipmentSettleEventList < Array[ShipmentEvent]
        def self.parse: (Array[untyped]) -> ShipmentSettleEventList
      end

      class SolutionProviderCreditEvent < Data
        def self.new: (?marketplace_country_code: String?, ?marketplace_id: String?, ?provider_id: String?, ?provider_store_name: String?, ?provider_transaction_type: String?, ?seller_id: String?, ?seller_order_id: String?, ?seller_store_name: String?, ?transaction_amount: Peddler::Types::Money?, ?transaction_creation_date: String?) -> Peddler::Types::FinancesV0::SolutionProviderCreditEvent
                    | (String?, String?, String?, String?, String?, String?, String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::SolutionProviderCreditEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::SolutionProviderCreditEvent

        attr_reader marketplace_country_code: String?
        attr_reader marketplace_id: String?
        attr_reader provider_id: String?
        attr_reader provider_store_name: String?
        attr_reader provider_transaction_type: String?
        attr_reader seller_id: String?
        attr_reader seller_order_id: String?
        attr_reader seller_store_name: String?
        attr_reader transaction_amount: Peddler::Types::Money?
        attr_reader transaction_creation_date: String?

        def to_h: () -> { marketplace_country_code: String?, marketplace_id: String?, provider_id: String?, provider_store_name: String?, provider_transaction_type: String?, seller_id: String?, seller_order_id: String?, seller_store_name: String?, transaction_amount: Peddler::Types::Money?, transaction_creation_date: String? }
      end

      class SolutionProviderCreditEventList < Array[SolutionProviderCreditEvent]
        def self.parse: (Array[untyped]) -> SolutionProviderCreditEventList
      end

      class TDSReimbursementEvent < Data
        def self.new: (?posted_date: String?, ?reimbursed_amount: Peddler::Types::Money?, ?tds_order_id: String?) -> Peddler::Types::FinancesV0::TDSReimbursementEvent
                    | (String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::TDSReimbursementEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::TDSReimbursementEvent

        attr_reader posted_date: String?
        attr_reader reimbursed_amount: Peddler::Types::Money?
        attr_reader tds_order_id: String?

        def to_h: () -> { posted_date: String?, reimbursed_amount: Peddler::Types::Money?, tds_order_id: String? }
      end

      class TDSReimbursementEventList < Array[TDSReimbursementEvent]
        def self.parse: (Array[untyped]) -> TDSReimbursementEventList
      end

      class TaxWithheldComponent < Data
        def self.new: (?tax_collection_model: String?, ?taxes_withheld: Array[Peddler::Types::FinancesV0::ChargeComponent]?) -> Peddler::Types::FinancesV0::TaxWithheldComponent
                    | (String?, Array[Peddler::Types::FinancesV0::ChargeComponent]?) -> Peddler::Types::FinancesV0::TaxWithheldComponent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::TaxWithheldComponent

        attr_reader tax_collection_model: String?
        attr_reader taxes_withheld: Array[Peddler::Types::FinancesV0::ChargeComponent]?

        def to_h: () -> { tax_collection_model: String?, taxes_withheld: Array[Peddler::Types::FinancesV0::ChargeComponent]? }
      end

      class TaxWithheldComponentList < Array[TaxWithheldComponent]
        def self.parse: (Array[untyped]) -> TaxWithheldComponentList
      end

      class TaxWithholdingEvent < Data
        def self.new: (?base_amount: Peddler::Types::Money?, ?posted_date: String?, ?tax_withholding_period: Peddler::Types::FinancesV0::TaxWithholdingPeriod?, ?withheld_amount: Peddler::Types::Money?) -> Peddler::Types::FinancesV0::TaxWithholdingEvent
                    | (Peddler::Types::Money?, String?, Peddler::Types::FinancesV0::TaxWithholdingPeriod?, Peddler::Types::Money?) -> Peddler::Types::FinancesV0::TaxWithholdingEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::TaxWithholdingEvent

        attr_reader base_amount: Peddler::Types::Money?
        attr_reader posted_date: String?
        attr_reader tax_withholding_period: Peddler::Types::FinancesV0::TaxWithholdingPeriod?
        attr_reader withheld_amount: Peddler::Types::Money?

        def to_h: () -> { base_amount: Peddler::Types::Money?, posted_date: String?, tax_withholding_period: Peddler::Types::FinancesV0::TaxWithholdingPeriod?, withheld_amount: Peddler::Types::Money? }
      end

      class TaxWithholdingEventList < Array[TaxWithholdingEvent]
        def self.parse: (Array[untyped]) -> TaxWithholdingEventList
      end

      class TaxWithholdingPeriod < Data
        def self.new: (?end_date: String?, ?start_date: String?) -> Peddler::Types::FinancesV0::TaxWithholdingPeriod
                    | (String?, String?) -> Peddler::Types::FinancesV0::TaxWithholdingPeriod

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::TaxWithholdingPeriod

        attr_reader end_date: String?
        attr_reader start_date: String?

        def to_h: () -> { end_date: String?, start_date: String? }
      end

      class TrialShipmentEvent < Data
        def self.new: (?amazon_order_id: String?, ?fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, ?financial_event_group_id: String?, ?posted_date: String?, ?sku: String?) -> Peddler::Types::FinancesV0::TrialShipmentEvent
                    | (String?, Array[Peddler::Types::FinancesV0::FeeComponent]?, String?, String?, String?) -> Peddler::Types::FinancesV0::TrialShipmentEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::TrialShipmentEvent

        attr_reader amazon_order_id: String?
        attr_reader fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?
        attr_reader financial_event_group_id: String?
        attr_reader posted_date: String?
        attr_reader sku: String?

        def to_h: () -> { amazon_order_id: String?, fee_list: Array[Peddler::Types::FinancesV0::FeeComponent]?, financial_event_group_id: String?, posted_date: String?, sku: String? }
      end

      class TrialShipmentEventList < Array[TrialShipmentEvent]
        def self.parse: (Array[untyped]) -> TrialShipmentEventList
      end

      class ValueAddedServiceChargeEvent < Data
        def self.new: (?description: String?, ?posted_date: String?, ?transaction_amount: Peddler::Types::Money?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent
                    | (String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::ValueAddedServiceChargeEvent

        attr_reader description: String?
        attr_reader posted_date: String?
        attr_reader transaction_amount: Peddler::Types::Money?
        attr_reader transaction_type: String?

        def to_h: () -> { description: String?, posted_date: String?, transaction_amount: Peddler::Types::Money?, transaction_type: String? }
      end

      class ValueAddedServiceChargeEventList < Array[ValueAddedServiceChargeEvent]
        def self.parse: (Array[untyped]) -> ValueAddedServiceChargeEventList
      end
    end
  end
end
