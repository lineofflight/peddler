module Peddler
  module Types
    module FinancesV0
      class AffordabilityExpenseEvent < Data
        def self.new: (tax_type_cgst: Peddler::Types::Money?, tax_type_igst: Peddler::Types::Money?, tax_type_sgst: Peddler::Types::Money?, ?amazon_order_id: String?, ?base_expense: Peddler::Types::Money?, ?marketplace_id: String?, ?posted_date: String?, ?total_expense: Peddler::Types::Money?, ?transaction_type: String?) -> Peddler::Types::FinancesV0::AffordabilityExpenseEvent
                    | (Peddler::Types::Money?, Peddler::Types::Money?, Peddler::Types::Money?, String?, Peddler::Types::Money?, String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::FinancesV0::AffordabilityExpenseEvent

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::FinancesV0::AffordabilityExpenseEvent

        attr_reader amazon_order_id: String?
        attr_reader base_expense: Peddler::Types::Money?
        attr_reader marketplace_id: String?
        attr_reader posted_date: String?
        attr_reader tax_type_cgst: Peddler::Types::Money?
        attr_reader tax_type_igst: Peddler::Types::Money?
        attr_reader tax_type_sgst: Peddler::Types::Money?

        attr_reader total_expense: Peddler::Types::Money?
        attr_reader transaction_type: String?

        def to_h: () -> { tax_type_cgst: Peddler::Types::Money?, tax_type_igst: Peddler::Types::Money?, tax_type_sgst: Peddler::Types::Money?, amazon_order_id: String?, base_expense: Peddler::Types::Money?, marketplace_id: String?, posted_date: String?, total_expense: Peddler::Types::Money?, transaction_type: String? }
      end
    end
  end
end
