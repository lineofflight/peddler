module Peddler
  module Types
    module ApplicationIntegrations20240401
      class CreateNotificationRequest < Data
        def self.new: (notification_parameters: Hash[untyped, untyped]?, template_id: String?, ?marketplace_id: String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationRequest
                    | (Hash[untyped, untyped]?, String?, String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationRequest

        def self.[]: (notification_parameters: Hash[untyped, untyped]?, template_id: String?, ?marketplace_id: String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationRequest
                   | (Hash[untyped, untyped]?, String?, String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationRequest

        def self.members: () -> [ :notification_parameters, :template_id, :marketplace_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationRequest

        attr_reader marketplace_id: String?
        attr_reader notification_parameters: Hash[untyped, untyped]?
        attr_reader template_id: String?
        def members: () -> [ :notification_parameters, :template_id, :marketplace_id ]

        def to_h: () -> { notification_parameters: Hash[untyped, untyped]?, template_id: String?, marketplace_id: String? }
      end

      class CreateNotificationResponse < Data
        def self.new: (?notification_id: String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationResponse
                    | (String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationResponse

        def self.[]: (?notification_id: String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationResponse
                   | (String?) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationResponse

        def self.members: () -> [ :notification_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ApplicationIntegrations20240401::CreateNotificationResponse

        attr_reader notification_id: String?
        def members: () -> [ :notification_id ]

        def to_h: () -> { notification_id: String? }
      end

      class DeleteNotificationsRequest < Data
        def self.new: (deletion_reason: String?, template_id: String?) -> Peddler::Types::ApplicationIntegrations20240401::DeleteNotificationsRequest
                    | (String?, String?) -> Peddler::Types::ApplicationIntegrations20240401::DeleteNotificationsRequest

        def self.[]: (deletion_reason: String?, template_id: String?) -> Peddler::Types::ApplicationIntegrations20240401::DeleteNotificationsRequest
                   | (String?, String?) -> Peddler::Types::ApplicationIntegrations20240401::DeleteNotificationsRequest

        def self.members: () -> [ :deletion_reason, :template_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ApplicationIntegrations20240401::DeleteNotificationsRequest

        attr_reader deletion_reason: String?
        attr_reader template_id: String?
        def members: () -> [ :deletion_reason, :template_id ]

        def to_h: () -> { deletion_reason: String?, template_id: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::ApplicationIntegrations20240401::Error
                    | (String?, String?, String?) -> Peddler::Types::ApplicationIntegrations20240401::Error

        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::Types::ApplicationIntegrations20240401::Error
                   | (String?, String?, String?) -> Peddler::Types::ApplicationIntegrations20240401::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ApplicationIntegrations20240401::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details ]

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Data
        def self.new: (errors: Array[Peddler::Types::ApplicationIntegrations20240401::Error]?) -> Peddler::Types::ApplicationIntegrations20240401::ErrorList
                    | (Array[Peddler::Types::ApplicationIntegrations20240401::Error]?) -> Peddler::Types::ApplicationIntegrations20240401::ErrorList

        def self.[]: (errors: Array[Peddler::Types::ApplicationIntegrations20240401::Error]?) -> Peddler::Types::ApplicationIntegrations20240401::ErrorList
                   | (Array[Peddler::Types::ApplicationIntegrations20240401::Error]?) -> Peddler::Types::ApplicationIntegrations20240401::ErrorList

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ApplicationIntegrations20240401::ErrorList

        attr_reader errors: Array[Peddler::Types::ApplicationIntegrations20240401::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::Types::ApplicationIntegrations20240401::Error]? }
      end

      class RecordActionFeedbackRequest < Data
        def self.new: (feedback_action_code: String?) -> Peddler::Types::ApplicationIntegrations20240401::RecordActionFeedbackRequest
                    | (String?) -> Peddler::Types::ApplicationIntegrations20240401::RecordActionFeedbackRequest

        def self.[]: (feedback_action_code: String?) -> Peddler::Types::ApplicationIntegrations20240401::RecordActionFeedbackRequest
                   | (String?) -> Peddler::Types::ApplicationIntegrations20240401::RecordActionFeedbackRequest

        def self.members: () -> [ :feedback_action_code ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::ApplicationIntegrations20240401::RecordActionFeedbackRequest

        attr_reader feedback_action_code: String?
        def members: () -> [ :feedback_action_code ]

        def to_h: () -> { feedback_action_code: String? }
      end
    end
  end
end
