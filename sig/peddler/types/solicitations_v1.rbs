module Peddler
  module Types
    module SolicitationsV1
      class CreateProductReviewAndSellerFeedbackSolicitationResponse < Data
        def self.new: (?errors: Array[Peddler::Types::SolicitationsV1::Error]?) -> Peddler::Types::SolicitationsV1::CreateProductReviewAndSellerFeedbackSolicitationResponse
                    | (Array[Peddler::Types::SolicitationsV1::Error]?) -> Peddler::Types::SolicitationsV1::CreateProductReviewAndSellerFeedbackSolicitationResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::CreateProductReviewAndSellerFeedbackSolicitationResponse

        attr_reader errors: Array[Peddler::Types::SolicitationsV1::Error]?

        def to_h: () -> { errors: Array[Peddler::Types::SolicitationsV1::Error]? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::SolicitationsV1::Error
                    | (String?, String?, String?) -> Peddler::Types::SolicitationsV1::Error

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::Error

        attr_reader code: String?

        attr_reader details: String?
        attr_reader message: String?

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class GetSchemaResponse < Data
        def self.new: (?_links: Hash[untyped, untyped]?, ?errors: Array[Peddler::Types::SolicitationsV1::Error]?, ?payload: Hash[untyped, untyped]?) -> Peddler::Types::SolicitationsV1::GetSchemaResponse
                    | (Hash[untyped, untyped]?, Array[Peddler::Types::SolicitationsV1::Error]?, Hash[untyped, untyped]?) -> Peddler::Types::SolicitationsV1::GetSchemaResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::GetSchemaResponse

        attr_reader _links: Hash[untyped, untyped]?
        attr_reader errors: Array[Peddler::Types::SolicitationsV1::Error]?
        attr_reader payload: Hash[untyped, untyped]?

        def to_h: () -> { _links: Hash[untyped, untyped]?, errors: Array[Peddler::Types::SolicitationsV1::Error]?, payload: Hash[untyped, untyped]? }
      end

      class GetSolicitationActionResponse < Data
        def self.new: (?_embedded: Hash[untyped, untyped]?, ?_links: Hash[untyped, untyped]?, ?errors: Array[Peddler::Types::SolicitationsV1::Error]?, ?payload: Peddler::Types::SolicitationsV1::SolicitationsAction?) -> Peddler::Types::SolicitationsV1::GetSolicitationActionResponse
                    | (Hash[untyped, untyped]?, Hash[untyped, untyped]?, Array[Peddler::Types::SolicitationsV1::Error]?, Peddler::Types::SolicitationsV1::SolicitationsAction?) -> Peddler::Types::SolicitationsV1::GetSolicitationActionResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::GetSolicitationActionResponse

        attr_reader _embedded: Hash[untyped, untyped]?
        attr_reader _links: Hash[untyped, untyped]?
        attr_reader errors: Array[Peddler::Types::SolicitationsV1::Error]?
        attr_reader payload: Peddler::Types::SolicitationsV1::SolicitationsAction?

        def to_h: () -> { _embedded: Hash[untyped, untyped]?, _links: Hash[untyped, untyped]?, errors: Array[Peddler::Types::SolicitationsV1::Error]?, payload: Peddler::Types::SolicitationsV1::SolicitationsAction? }
      end

      class GetSolicitationActionsForOrderResponse < Data
        def self.new: (?_embedded: Hash[untyped, untyped]?, ?_links: Hash[untyped, untyped]?, ?errors: Array[Peddler::Types::SolicitationsV1::Error]?) -> Peddler::Types::SolicitationsV1::GetSolicitationActionsForOrderResponse
                    | (Hash[untyped, untyped]?, Hash[untyped, untyped]?, Array[Peddler::Types::SolicitationsV1::Error]?) -> Peddler::Types::SolicitationsV1::GetSolicitationActionsForOrderResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::GetSolicitationActionsForOrderResponse

        attr_reader _embedded: Hash[untyped, untyped]?
        attr_reader _links: Hash[untyped, untyped]?
        attr_reader errors: Array[Peddler::Types::SolicitationsV1::Error]?

        def to_h: () -> { _embedded: Hash[untyped, untyped]?, _links: Hash[untyped, untyped]?, errors: Array[Peddler::Types::SolicitationsV1::Error]? }
      end

      class LinkObject < Data
        def self.new: (href: String?, ?name: String?) -> Peddler::Types::SolicitationsV1::LinkObject
                    | (String?, String?) -> Peddler::Types::SolicitationsV1::LinkObject

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::LinkObject

        attr_reader href: String?
        attr_reader name: String?

        def to_h: () -> { href: String?, name: String? }
      end

      class SolicitationsAction < Data
        def self.new: (name: String?) -> Peddler::Types::SolicitationsV1::SolicitationsAction
                    | (String?) -> Peddler::Types::SolicitationsV1::SolicitationsAction

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::SolicitationsV1::SolicitationsAction

        attr_reader name: String?

        def to_h: () -> { name: String? }
      end
    end
  end
end
