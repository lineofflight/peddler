module Peddler
  module Types
    module MerchantFulfillmentV0
      class AdditionalInputs < Data
        def self.new: (?additional_input_field_name: String?, ?seller_input_definition: Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition?) -> Peddler::Types::MerchantFulfillmentV0::AdditionalInputs
                    | (String?, Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition?) -> Peddler::Types::MerchantFulfillmentV0::AdditionalInputs

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::AdditionalInputs

        attr_reader additional_input_field_name: String?
        attr_reader seller_input_definition: Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition?

        def to_h: () -> { additional_input_field_name: String?, seller_input_definition: Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition? }
      end

      class AdditionalInputsList < Array[AdditionalInputs]
        def self.parse: (Array[untyped]) -> AdditionalInputsList
      end

      class AdditionalSellerInput < Data
        def self.new: (?data_type: String?, ?value_as_address: Peddler::Types::MerchantFulfillmentV0::Address?, ?value_as_boolean: bool?, ?value_as_currency: Peddler::Types::Money?, ?value_as_dimension: Peddler::Types::MerchantFulfillmentV0::Length?, ?value_as_integer: Integer?, ?value_as_string: String?, ?value_as_timestamp: String?, ?value_as_weight: Peddler::Types::MerchantFulfillmentV0::Weight?) -> Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput
                    | (String?, Peddler::Types::MerchantFulfillmentV0::Address?, bool?, Peddler::Types::Money?, Peddler::Types::MerchantFulfillmentV0::Length?, Integer?, String?, String?, Peddler::Types::MerchantFulfillmentV0::Weight?) -> Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput

        attr_reader data_type: String?
        attr_reader value_as_address: Peddler::Types::MerchantFulfillmentV0::Address?
        attr_reader value_as_boolean: bool?
        attr_reader value_as_currency: Peddler::Types::Money?
        attr_reader value_as_dimension: Peddler::Types::MerchantFulfillmentV0::Length?
        attr_reader value_as_integer: Integer?
        attr_reader value_as_string: String?
        attr_reader value_as_timestamp: String?
        attr_reader value_as_weight: Peddler::Types::MerchantFulfillmentV0::Weight?

        def to_h: () -> { data_type: String?, value_as_address: Peddler::Types::MerchantFulfillmentV0::Address?, value_as_boolean: bool?, value_as_currency: Peddler::Types::Money?, value_as_dimension: Peddler::Types::MerchantFulfillmentV0::Length?, value_as_integer: Integer?, value_as_string: String?, value_as_timestamp: String?, value_as_weight: Peddler::Types::MerchantFulfillmentV0::Weight? }
        def value_as_boolean?: () -> bool
      end

      class AdditionalSellerInputs < Data
        def self.new: (additional_input_field_name: String?, additional_seller_input: Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?) -> Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs
                    | (String?, Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?) -> Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs

        attr_reader additional_input_field_name: String?
        attr_reader additional_seller_input: Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?

        def to_h: () -> { additional_input_field_name: String?, additional_seller_input: Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput? }
      end

      class AdditionalSellerInputsList < Array[AdditionalSellerInputs]
        def self.parse: (Array[untyped]) -> AdditionalSellerInputsList
      end

      class Address < Data
        def self.new: (address_line1: String?, city: String?, country_code: String?, email: String?, name: String?, phone: String?, postal_code: String?, ?address_line2: String?, ?address_line3: String?, ?district_or_county: String?, ?state_or_province_code: String?) -> Peddler::Types::MerchantFulfillmentV0::Address
                    | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::Address

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Address

        attr_reader address_line1: String?

        attr_reader address_line2: String?
        attr_reader address_line3: String?
        attr_reader city: String?
        attr_reader country_code: String?

        attr_reader district_or_county: String?
        attr_reader email: String?
        attr_reader name: String?
        attr_reader phone: String?
        attr_reader postal_code: String?

        attr_reader state_or_province_code: String?

        def to_h: () -> { address_line1: String?, city: String?, country_code: String?, email: String?, name: String?, phone: String?, postal_code: String?, address_line2: String?, address_line3: String?, district_or_county: String?, state_or_province_code: String? }
      end

      class AdjustmentItemList < Array[RateItem]
        def self.parse: (Array[untyped]) -> AdjustmentItemList
      end

      class AvailableCarrierWillPickUpOption < Data
        def self.new: (carrier_will_pick_up_option: String?, charge: Peddler::Types::Money?) -> Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption
                    | (String?, Peddler::Types::Money?) -> Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption

        attr_reader carrier_will_pick_up_option: String?
        attr_reader charge: Peddler::Types::Money?

        def to_h: () -> { carrier_will_pick_up_option: String?, charge: Peddler::Types::Money? }
      end

      class AvailableCarrierWillPickUpOptionsList < Array[AvailableCarrierWillPickUpOption]
        def self.parse: (Array[untyped]) -> AvailableCarrierWillPickUpOptionsList
      end

      class AvailableDeliveryExperienceOption < Data
        def self.new: (charge: Peddler::Types::Money?, delivery_experience_option: String?) -> Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption
                    | (Peddler::Types::Money?, String?) -> Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption

        attr_reader charge: Peddler::Types::Money?
        attr_reader delivery_experience_option: String?

        def to_h: () -> { charge: Peddler::Types::Money?, delivery_experience_option: String? }
      end

      class AvailableDeliveryExperienceOptionsList < Array[AvailableDeliveryExperienceOption]
        def self.parse: (Array[untyped]) -> AvailableDeliveryExperienceOptionsList
      end

      class AvailableFormatOptionsForLabel < Array[LabelFormatOption]
        def self.parse: (Array[untyped]) -> AvailableFormatOptionsForLabel
      end

      class AvailableFormatOptionsForLabelList < Array[LabelFormatOption]
        def self.parse: (Array[untyped]) -> AvailableFormatOptionsForLabelList
      end

      class AvailableShippingServiceOptions < Data
        def self.new: (available_carrier_will_pick_up_options: Array[Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption]?, available_delivery_experience_options: Array[Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption]?) -> Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions
                    | (Array[Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption]?, Array[Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption]?) -> Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions

        attr_reader available_carrier_will_pick_up_options: Array[Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption]?
        attr_reader available_delivery_experience_options: Array[Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption]?

        def to_h: () -> { available_carrier_will_pick_up_options: Array[Peddler::Types::MerchantFulfillmentV0::AvailableCarrierWillPickUpOption]?, available_delivery_experience_options: Array[Peddler::Types::MerchantFulfillmentV0::AvailableDeliveryExperienceOption]? }
      end

      class Benefits < Data
        def self.new: (?excluded_benefits: Array[Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit]?, ?included_benefits: Array[String]?) -> Peddler::Types::MerchantFulfillmentV0::Benefits
                    | (Array[Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit]?, Array[String]?) -> Peddler::Types::MerchantFulfillmentV0::Benefits

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Benefits

        attr_reader excluded_benefits: Array[Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit]?
        attr_reader included_benefits: Array[String]?

        def to_h: () -> { excluded_benefits: Array[Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit]?, included_benefits: Array[String]? }
      end

      class CancelShipmentResponse < Data
        def self.new: (?errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, ?payload: Peddler::Types::MerchantFulfillmentV0::Shipment?) -> Peddler::Types::MerchantFulfillmentV0::CancelShipmentResponse
                    | (Array[Peddler::Types::MerchantFulfillmentV0::Error]?, Peddler::Types::MerchantFulfillmentV0::Shipment?) -> Peddler::Types::MerchantFulfillmentV0::CancelShipmentResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::CancelShipmentResponse

        attr_reader errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?
        attr_reader payload: Peddler::Types::MerchantFulfillmentV0::Shipment?

        def to_h: () -> { errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, payload: Peddler::Types::MerchantFulfillmentV0::Shipment? }
      end

      class Constraint < Data
        def self.new: (validation_string: String?, ?validation_reg_ex: String?) -> Peddler::Types::MerchantFulfillmentV0::Constraint
                    | (String?, String?) -> Peddler::Types::MerchantFulfillmentV0::Constraint

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Constraint

        attr_reader validation_reg_ex: String?
        attr_reader validation_string: String?

        def to_h: () -> { validation_string: String?, validation_reg_ex: String? }
      end

      class Constraints < Array[Constraint]
        def self.parse: (Array[untyped]) -> Constraints
      end

      class CreateShipmentRequest < Data
        def self.new: (shipment_request_details: Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?, shipping_service_id: String?, ?hazmat_type: String?, ?label_format_option: Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest?, ?shipment_level_seller_inputs_list: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?, ?shipping_service_offer_id: String?) -> Peddler::Types::MerchantFulfillmentV0::CreateShipmentRequest
                    | (Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?, String?, String?, Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest?, Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?, String?) -> Peddler::Types::MerchantFulfillmentV0::CreateShipmentRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::CreateShipmentRequest

        attr_reader hazmat_type: String?
        attr_reader label_format_option: Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest?
        attr_reader shipment_level_seller_inputs_list: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?
        attr_reader shipment_request_details: Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?
        attr_reader shipping_service_id: String?

        attr_reader shipping_service_offer_id: String?

        def to_h: () -> { shipment_request_details: Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?, shipping_service_id: String?, hazmat_type: String?, label_format_option: Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest?, shipment_level_seller_inputs_list: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?, shipping_service_offer_id: String? }
      end

      class CreateShipmentResponse < Data
        def self.new: (?errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, ?payload: Peddler::Types::MerchantFulfillmentV0::Shipment?) -> Peddler::Types::MerchantFulfillmentV0::CreateShipmentResponse
                    | (Array[Peddler::Types::MerchantFulfillmentV0::Error]?, Peddler::Types::MerchantFulfillmentV0::Shipment?) -> Peddler::Types::MerchantFulfillmentV0::CreateShipmentResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::CreateShipmentResponse

        attr_reader errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?
        attr_reader payload: Peddler::Types::MerchantFulfillmentV0::Shipment?

        def to_h: () -> { errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, payload: Peddler::Types::MerchantFulfillmentV0::Shipment? }
      end

      class DangerousGoodsDetails < Data
        def self.new: (?packing_group: String?, ?packing_instruction: String?, ?transportation_regulatory_class: String?, ?united_nations_regulatory_id: String?) -> Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails
                    | (String?, String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails

        attr_reader packing_group: String?
        attr_reader packing_instruction: String?
        attr_reader transportation_regulatory_class: String?
        attr_reader united_nations_regulatory_id: String?

        def to_h: () -> { packing_group: String?, packing_instruction: String?, transportation_regulatory_class: String?, united_nations_regulatory_id: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::MerchantFulfillmentV0::Error
                    | (String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::Error

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Error

        attr_reader code: String?

        attr_reader details: String?
        attr_reader message: String?

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class ExcludedBenefit < Data
        def self.new: (?benefit: String?, ?reason_codes: Array[String]?) -> Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit
                    | (String?, Array[String]?) -> Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::ExcludedBenefit

        attr_reader benefit: String?
        attr_reader reason_codes: Array[String]?

        def to_h: () -> { benefit: String?, reason_codes: Array[String]? }
      end

      class ExcludedBenefitReasonCodes < Array[untyped]
        def self.parse: (Array[untyped]) -> ExcludedBenefitReasonCodes
      end

      class ExcludedBenefits < Array[ExcludedBenefit]
        def self.parse: (Array[untyped]) -> ExcludedBenefits
      end

      class FileContents < Data
        def self.new: (checksum: String?, contents: String?, file_type: String?) -> Peddler::Types::MerchantFulfillmentV0::FileContents
                    | (String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::FileContents

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::FileContents

        attr_reader checksum: String?
        attr_reader contents: String?
        attr_reader file_type: String?

        def to_h: () -> { checksum: String?, contents: String?, file_type: String? }
      end

      class GetAdditionalSellerInputsRequest < Data
        def self.new: (order_id: String?, ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?, shipping_service_id: String?) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsRequest
                    | (String?, Peddler::Types::MerchantFulfillmentV0::Address?, String?) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsRequest

        attr_reader order_id: String?
        attr_reader ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?
        attr_reader shipping_service_id: String?

        def to_h: () -> { order_id: String?, ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?, shipping_service_id: String? }
      end

      class GetAdditionalSellerInputsResponse < Data
        def self.new: (?errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, ?payload: Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult?) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResponse
                    | (Array[Peddler::Types::MerchantFulfillmentV0::Error]?, Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult?) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResponse

        attr_reader errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?
        attr_reader payload: Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult?

        def to_h: () -> { errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, payload: Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult? }
      end

      class GetAdditionalSellerInputsResult < Data
        def self.new: (?item_level_fields_list: Array[Peddler::Types::MerchantFulfillmentV0::ItemLevelFields]?, ?shipment_level_fields: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult
                    | (Array[Peddler::Types::MerchantFulfillmentV0::ItemLevelFields]?, Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetAdditionalSellerInputsResult

        attr_reader item_level_fields_list: Array[Peddler::Types::MerchantFulfillmentV0::ItemLevelFields]?
        attr_reader shipment_level_fields: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?

        def to_h: () -> { item_level_fields_list: Array[Peddler::Types::MerchantFulfillmentV0::ItemLevelFields]?, shipment_level_fields: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]? }
      end

      class GetEligibleShipmentServicesRequest < Data
        def self.new: (shipment_request_details: Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?, ?shipping_offering_filter: Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter?) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesRequest
                    | (Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?, Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter?) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesRequest

        attr_reader shipment_request_details: Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?
        attr_reader shipping_offering_filter: Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter?

        def to_h: () -> { shipment_request_details: Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails?, shipping_offering_filter: Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter? }
      end

      class GetEligibleShipmentServicesResponse < Data
        def self.new: (?errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, ?payload: Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult?) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResponse
                    | (Array[Peddler::Types::MerchantFulfillmentV0::Error]?, Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult?) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResponse

        attr_reader errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?
        attr_reader payload: Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult?

        def to_h: () -> { errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, payload: Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult? }
      end

      class GetEligibleShipmentServicesResult < Data
        def self.new: (shipping_service_list: Array[Peddler::Types::MerchantFulfillmentV0::ShippingService]?, ?rejected_shipping_service_list: Array[Peddler::Types::MerchantFulfillmentV0::RejectedShippingService]?, ?temporarily_unavailable_carrier_list: Array[Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier]?, ?terms_and_conditions_not_accepted_carrier_list: Array[Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier]?) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult
                    | (Array[Peddler::Types::MerchantFulfillmentV0::ShippingService]?, Array[Peddler::Types::MerchantFulfillmentV0::RejectedShippingService]?, Array[Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier]?, Array[Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier]?) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetEligibleShipmentServicesResult

        attr_reader rejected_shipping_service_list: Array[Peddler::Types::MerchantFulfillmentV0::RejectedShippingService]?
        attr_reader shipping_service_list: Array[Peddler::Types::MerchantFulfillmentV0::ShippingService]?

        attr_reader temporarily_unavailable_carrier_list: Array[Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier]?
        attr_reader terms_and_conditions_not_accepted_carrier_list: Array[Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier]?

        def to_h: () -> { shipping_service_list: Array[Peddler::Types::MerchantFulfillmentV0::ShippingService]?, rejected_shipping_service_list: Array[Peddler::Types::MerchantFulfillmentV0::RejectedShippingService]?, temporarily_unavailable_carrier_list: Array[Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier]?, terms_and_conditions_not_accepted_carrier_list: Array[Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier]? }
      end

      class GetShipmentResponse < Data
        def self.new: (?errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, ?payload: Peddler::Types::MerchantFulfillmentV0::Shipment?) -> Peddler::Types::MerchantFulfillmentV0::GetShipmentResponse
                    | (Array[Peddler::Types::MerchantFulfillmentV0::Error]?, Peddler::Types::MerchantFulfillmentV0::Shipment?) -> Peddler::Types::MerchantFulfillmentV0::GetShipmentResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::GetShipmentResponse

        attr_reader errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?
        attr_reader payload: Peddler::Types::MerchantFulfillmentV0::Shipment?

        def to_h: () -> { errors: Array[Peddler::Types::MerchantFulfillmentV0::Error]?, payload: Peddler::Types::MerchantFulfillmentV0::Shipment? }
      end

      class IncludedBenefits < Array[untyped]
        def self.parse: (Array[untyped]) -> IncludedBenefits
      end

      class Item < Data
        def self.new: (order_item_id: String?, quantity: Integer?, ?dangerous_goods_details: Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails?, ?hazmat: bool?, ?item_description: String?, ?item_level_seller_inputs_list: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?, ?item_weight: Peddler::Types::MerchantFulfillmentV0::Weight?, ?liquid_volume: Peddler::Types::MerchantFulfillmentV0::LiquidVolume?, ?transparency_code_list: Array[untyped]?) -> Peddler::Types::MerchantFulfillmentV0::Item
                    | (String?, Integer?, Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails?, bool?, String?, Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?, Peddler::Types::MerchantFulfillmentV0::Weight?, Peddler::Types::MerchantFulfillmentV0::LiquidVolume?, Array[untyped]?) -> Peddler::Types::MerchantFulfillmentV0::Item

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Item

        attr_reader dangerous_goods_details: Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails?
        attr_reader hazmat: bool?
        attr_reader item_description: String?
        attr_reader item_level_seller_inputs_list: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?
        attr_reader item_weight: Peddler::Types::MerchantFulfillmentV0::Weight?
        attr_reader liquid_volume: Peddler::Types::MerchantFulfillmentV0::LiquidVolume?
        attr_reader order_item_id: String?
        attr_reader quantity: Integer?

        attr_reader transparency_code_list: Array[untyped]?

        def hazmat?: () -> bool
        def to_h: () -> { order_item_id: String?, quantity: Integer?, dangerous_goods_details: Peddler::Types::MerchantFulfillmentV0::DangerousGoodsDetails?, hazmat: bool?, item_description: String?, item_level_seller_inputs_list: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInputs]?, item_weight: Peddler::Types::MerchantFulfillmentV0::Weight?, liquid_volume: Peddler::Types::MerchantFulfillmentV0::LiquidVolume?, transparency_code_list: Array[untyped]? }
      end

      class ItemLevelFields < Data
        def self.new: (additional_inputs: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?, asin: String?) -> Peddler::Types::MerchantFulfillmentV0::ItemLevelFields
                    | (Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?, String?) -> Peddler::Types::MerchantFulfillmentV0::ItemLevelFields

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::ItemLevelFields

        attr_reader additional_inputs: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?
        attr_reader asin: String?

        def to_h: () -> { additional_inputs: Array[Peddler::Types::MerchantFulfillmentV0::AdditionalInputs]?, asin: String? }
      end

      class ItemLevelFieldsList < Array[ItemLevelFields]
        def self.parse: (Array[untyped]) -> ItemLevelFieldsList
      end

      class ItemList < Array[Item]
        def self.parse: (Array[untyped]) -> ItemList
      end

      class Label < Data
        def self.new: (dimensions: Peddler::Types::MerchantFulfillmentV0::LabelDimensions?, file_contents: Peddler::Types::MerchantFulfillmentV0::FileContents?, ?custom_text_for_label: String?, ?label_format: String?, ?standard_id_for_label: String?) -> Peddler::Types::MerchantFulfillmentV0::Label
                    | (Peddler::Types::MerchantFulfillmentV0::LabelDimensions?, Peddler::Types::MerchantFulfillmentV0::FileContents?, String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::Label

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Label

        attr_reader custom_text_for_label: String?
        attr_reader dimensions: Peddler::Types::MerchantFulfillmentV0::LabelDimensions?
        attr_reader file_contents: Peddler::Types::MerchantFulfillmentV0::FileContents?

        attr_reader label_format: String?
        attr_reader standard_id_for_label: String?

        def to_h: () -> { dimensions: Peddler::Types::MerchantFulfillmentV0::LabelDimensions?, file_contents: Peddler::Types::MerchantFulfillmentV0::FileContents?, custom_text_for_label: String?, label_format: String?, standard_id_for_label: String? }
      end

      class LabelCustomization < Data
        def self.new: (?custom_text_for_label: String?, ?standard_id_for_label: String?) -> Peddler::Types::MerchantFulfillmentV0::LabelCustomization
                    | (String?, String?) -> Peddler::Types::MerchantFulfillmentV0::LabelCustomization

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::LabelCustomization

        attr_reader custom_text_for_label: String?
        attr_reader standard_id_for_label: String?

        def to_h: () -> { custom_text_for_label: String?, standard_id_for_label: String? }
      end

      class LabelDimensions < Data
        def self.new: (length: Float?, unit: String?, width: Float?) -> Peddler::Types::MerchantFulfillmentV0::LabelDimensions
                    | (Float?, String?, Float?) -> Peddler::Types::MerchantFulfillmentV0::LabelDimensions

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::LabelDimensions

        attr_reader length: Float?
        attr_reader unit: String?
        attr_reader width: Float?

        def to_h: () -> { length: Float?, unit: String?, width: Float? }
      end

      class LabelFormatList < Array[untyped]
        def self.parse: (Array[untyped]) -> LabelFormatList
      end

      class LabelFormatOption < Data
        def self.new: (?include_packing_slip_with_label: bool?, ?label_format: String?) -> Peddler::Types::MerchantFulfillmentV0::LabelFormatOption
                    | (bool?, String?) -> Peddler::Types::MerchantFulfillmentV0::LabelFormatOption

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::LabelFormatOption

        attr_reader include_packing_slip_with_label: bool?
        attr_reader label_format: String?

        def include_packing_slip_with_label?: () -> bool
        def to_h: () -> { include_packing_slip_with_label: bool?, label_format: String? }
      end

      class LabelFormatOptionRequest < Data
        def self.new: (?include_packing_slip_with_label: bool?) -> Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest
                    | (bool?) -> Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::LabelFormatOptionRequest

        attr_reader include_packing_slip_with_label: bool?

        def include_packing_slip_with_label?: () -> bool
        def to_h: () -> { include_packing_slip_with_label: bool? }
      end

      class Length < Data
        def self.new: (?unit: String?, ?value: Float?) -> Peddler::Types::MerchantFulfillmentV0::Length
                    | (String?, Float?) -> Peddler::Types::MerchantFulfillmentV0::Length

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Length

        attr_reader unit: String?
        attr_reader value: Float?

        def to_h: () -> { unit: String?, value: Float? }
      end

      class LiquidVolume < Data
        def self.new: (unit: String?, value: Float?) -> Peddler::Types::MerchantFulfillmentV0::LiquidVolume
                    | (String?, Float?) -> Peddler::Types::MerchantFulfillmentV0::LiquidVolume

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::LiquidVolume

        attr_reader unit: String?
        attr_reader value: Float?

        def to_h: () -> { unit: String?, value: Float? }
      end

      class PackageDimensions < Data
        def self.new: (?height: Float?, ?length: Float?, ?predefined_package_dimensions: String?, ?unit: String?, ?width: Float?) -> Peddler::Types::MerchantFulfillmentV0::PackageDimensions
                    | (Float?, Float?, String?, String?, Float?) -> Peddler::Types::MerchantFulfillmentV0::PackageDimensions

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::PackageDimensions

        attr_reader height: Float?
        attr_reader length: Float?
        attr_reader predefined_package_dimensions: String?
        attr_reader unit: String?
        attr_reader width: Float?

        def to_h: () -> { height: Float?, length: Float?, predefined_package_dimensions: String?, unit: String?, width: Float? }
      end

      class RateItem < Data
        def self.new: (rate_item_id: String?, ?rate_item_charge: Peddler::Types::Money?, ?rate_item_name_localization: String?, ?rate_item_type: String?) -> Peddler::Types::MerchantFulfillmentV0::RateItem
                    | (String?, Peddler::Types::Money?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::RateItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::RateItem

        attr_reader rate_item_charge: Peddler::Types::Money?
        attr_reader rate_item_id: String?

        attr_reader rate_item_name_localization: String?
        attr_reader rate_item_type: String?

        def to_h: () -> { rate_item_id: String?, rate_item_charge: Peddler::Types::Money?, rate_item_name_localization: String?, rate_item_type: String? }
      end

      class RejectedShippingService < Data
        def self.new: (carrier_name: String?, rejection_reason_code: String?, shipping_service_id: String?, shipping_service_name: String?, ?rejection_reason_message: String?) -> Peddler::Types::MerchantFulfillmentV0::RejectedShippingService
                    | (String?, String?, String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::RejectedShippingService

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::RejectedShippingService

        attr_reader carrier_name: String?
        attr_reader rejection_reason_code: String?

        attr_reader rejection_reason_message: String?
        attr_reader shipping_service_id: String?
        attr_reader shipping_service_name: String?

        def to_h: () -> { carrier_name: String?, rejection_reason_code: String?, shipping_service_id: String?, shipping_service_name: String?, rejection_reason_message: String? }
      end

      class RejectedShippingServiceList < Array[RejectedShippingService]
        def self.parse: (Array[untyped]) -> RejectedShippingServiceList
      end

      class RestrictedSetValues < Array[untyped]
        def self.parse: (Array[untyped]) -> RestrictedSetValues
      end

      class SellerInputDefinition < Data
        def self.new: (constraints: Array[Peddler::Types::MerchantFulfillmentV0::Constraint]?, data_type: String?, input_display_text: String?, required: bool?, stored_value: Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?, ?input_target: String?, ?restricted_set_values: Array[String]?) -> Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition
                    | (Array[Peddler::Types::MerchantFulfillmentV0::Constraint]?, String?, String?, bool?, Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?, String?, Array[String]?) -> Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::SellerInputDefinition

        attr_reader constraints: Array[Peddler::Types::MerchantFulfillmentV0::Constraint]?
        attr_reader data_type: String?
        attr_reader input_display_text: String?

        attr_reader input_target: String?
        attr_reader required: bool?

        attr_reader restricted_set_values: Array[String]?
        attr_reader stored_value: Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?

        def required?: () -> bool
        def to_h: () -> { constraints: Array[Peddler::Types::MerchantFulfillmentV0::Constraint]?, data_type: String?, input_display_text: String?, required: bool?, stored_value: Peddler::Types::MerchantFulfillmentV0::AdditionalSellerInput?, input_target: String?, restricted_set_values: Array[String]? }
      end

      class Shipment < Data
        def self.new: (amazon_order_id: String?, created_date: String?, insurance: Peddler::Types::Money?, item_list: Array[Peddler::Types::MerchantFulfillmentV0::Item]?, label: Peddler::Types::MerchantFulfillmentV0::Label?, package_dimensions: Peddler::Types::MerchantFulfillmentV0::PackageDimensions?, ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?, ship_to_address: Peddler::Types::MerchantFulfillmentV0::Address?, shipment_id: String?, shipping_service: Peddler::Types::MerchantFulfillmentV0::ShippingService?, status: String?, weight: Peddler::Types::MerchantFulfillmentV0::Weight?, ?last_updated_date: String?, ?seller_order_id: String?, ?tracking_id: String?) -> Peddler::Types::MerchantFulfillmentV0::Shipment
                    | (String?, String?, Peddler::Types::Money?, Array[Peddler::Types::MerchantFulfillmentV0::Item]?, Peddler::Types::MerchantFulfillmentV0::Label?, Peddler::Types::MerchantFulfillmentV0::PackageDimensions?, Peddler::Types::MerchantFulfillmentV0::Address?, Peddler::Types::MerchantFulfillmentV0::Address?, String?, Peddler::Types::MerchantFulfillmentV0::ShippingService?, String?, Peddler::Types::MerchantFulfillmentV0::Weight?, String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::Shipment

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Shipment

        attr_reader amazon_order_id: String?
        attr_reader created_date: String?
        attr_reader insurance: Peddler::Types::Money?
        attr_reader item_list: Array[Peddler::Types::MerchantFulfillmentV0::Item]?
        attr_reader label: Peddler::Types::MerchantFulfillmentV0::Label?

        attr_reader last_updated_date: String?
        attr_reader package_dimensions: Peddler::Types::MerchantFulfillmentV0::PackageDimensions?

        attr_reader seller_order_id: String?
        attr_reader ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?
        attr_reader ship_to_address: Peddler::Types::MerchantFulfillmentV0::Address?
        attr_reader shipment_id: String?
        attr_reader shipping_service: Peddler::Types::MerchantFulfillmentV0::ShippingService?
        attr_reader status: String?

        attr_reader tracking_id: String?
        attr_reader weight: Peddler::Types::MerchantFulfillmentV0::Weight?

        def to_h: () -> { amazon_order_id: String?, created_date: String?, insurance: Peddler::Types::Money?, item_list: Array[Peddler::Types::MerchantFulfillmentV0::Item]?, label: Peddler::Types::MerchantFulfillmentV0::Label?, package_dimensions: Peddler::Types::MerchantFulfillmentV0::PackageDimensions?, ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?, ship_to_address: Peddler::Types::MerchantFulfillmentV0::Address?, shipment_id: String?, shipping_service: Peddler::Types::MerchantFulfillmentV0::ShippingService?, status: String?, weight: Peddler::Types::MerchantFulfillmentV0::Weight?, last_updated_date: String?, seller_order_id: String?, tracking_id: String? }
      end

      class ShipmentRequestDetails < Data
        def self.new: (amazon_order_id: String?, item_list: Array[Peddler::Types::MerchantFulfillmentV0::Item]?, package_dimensions: Peddler::Types::MerchantFulfillmentV0::PackageDimensions?, ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?, shipping_service_options: Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?, weight: Peddler::Types::MerchantFulfillmentV0::Weight?, ?label_customization: Peddler::Types::MerchantFulfillmentV0::LabelCustomization?, ?must_arrive_by_date: String?, ?seller_order_id: String?, ?ship_date: String?) -> Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails
                    | (String?, Array[Peddler::Types::MerchantFulfillmentV0::Item]?, Peddler::Types::MerchantFulfillmentV0::PackageDimensions?, Peddler::Types::MerchantFulfillmentV0::Address?, Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?, Peddler::Types::MerchantFulfillmentV0::Weight?, Peddler::Types::MerchantFulfillmentV0::LabelCustomization?, String?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::ShipmentRequestDetails

        attr_reader amazon_order_id: String?
        attr_reader item_list: Array[Peddler::Types::MerchantFulfillmentV0::Item]?

        attr_reader label_customization: Peddler::Types::MerchantFulfillmentV0::LabelCustomization?
        attr_reader must_arrive_by_date: String?
        attr_reader package_dimensions: Peddler::Types::MerchantFulfillmentV0::PackageDimensions?

        attr_reader seller_order_id: String?
        attr_reader ship_date: String?
        attr_reader ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?
        attr_reader shipping_service_options: Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?
        attr_reader weight: Peddler::Types::MerchantFulfillmentV0::Weight?

        def to_h: () -> { amazon_order_id: String?, item_list: Array[Peddler::Types::MerchantFulfillmentV0::Item]?, package_dimensions: Peddler::Types::MerchantFulfillmentV0::PackageDimensions?, ship_from_address: Peddler::Types::MerchantFulfillmentV0::Address?, shipping_service_options: Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?, weight: Peddler::Types::MerchantFulfillmentV0::Weight?, label_customization: Peddler::Types::MerchantFulfillmentV0::LabelCustomization?, must_arrive_by_date: String?, seller_order_id: String?, ship_date: String? }
      end

      class ShippingOfferingFilter < Data
        def self.new: (?carrier_will_pick_up: String?, ?delivery_experience: String?, ?include_complex_shipping_options: bool?, ?include_packing_slip_with_label: bool?) -> Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter
                    | (String?, String?, bool?, bool?) -> Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::ShippingOfferingFilter

        attr_reader carrier_will_pick_up: String?
        attr_reader delivery_experience: String?
        attr_reader include_complex_shipping_options: bool?
        attr_reader include_packing_slip_with_label: bool?

        def include_complex_shipping_options?: () -> bool
        def include_packing_slip_with_label?: () -> bool
        def to_h: () -> { carrier_will_pick_up: String?, delivery_experience: String?, include_complex_shipping_options: bool?, include_packing_slip_with_label: bool? }
      end

      class ShippingService < Data
        def self.new: (carrier_name: String?, rate: Peddler::Types::Money?, rate_with_adjustments: Peddler::Types::Money?, requires_additional_seller_inputs: bool?, ship_date: String?, shipping_service_id: String?, shipping_service_name: String?, shipping_service_offer_id: String?, shipping_service_options: Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?, ?adjustment_item_list: Array[Peddler::Types::MerchantFulfillmentV0::RateItem]?, ?available_format_options_for_label: Array[Peddler::Types::MerchantFulfillmentV0::LabelFormatOption]?, ?available_label_formats: Array[untyped]?, ?available_shipping_service_options: Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions?, ?benefits: Peddler::Types::MerchantFulfillmentV0::Benefits?, ?earliest_estimated_delivery_date: String?, ?latest_estimated_delivery_date: String?) -> Peddler::Types::MerchantFulfillmentV0::ShippingService
                    | (String?, Peddler::Types::Money?, Peddler::Types::Money?, bool?, String?, String?, String?, String?, Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?, Array[Peddler::Types::MerchantFulfillmentV0::RateItem]?, Array[Peddler::Types::MerchantFulfillmentV0::LabelFormatOption]?, Array[untyped]?, Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions?, Peddler::Types::MerchantFulfillmentV0::Benefits?, String?, String?) -> Peddler::Types::MerchantFulfillmentV0::ShippingService

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::ShippingService

        attr_reader adjustment_item_list: Array[Peddler::Types::MerchantFulfillmentV0::RateItem]?
        attr_reader available_format_options_for_label: Array[Peddler::Types::MerchantFulfillmentV0::LabelFormatOption]?
        attr_reader available_label_formats: Array[untyped]?
        attr_reader available_shipping_service_options: Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions?
        attr_reader benefits: Peddler::Types::MerchantFulfillmentV0::Benefits?
        attr_reader carrier_name: String?

        attr_reader earliest_estimated_delivery_date: String?
        attr_reader latest_estimated_delivery_date: String?
        attr_reader rate: Peddler::Types::Money?
        attr_reader rate_with_adjustments: Peddler::Types::Money?
        attr_reader requires_additional_seller_inputs: bool?
        attr_reader ship_date: String?
        attr_reader shipping_service_id: String?
        attr_reader shipping_service_name: String?
        attr_reader shipping_service_offer_id: String?
        attr_reader shipping_service_options: Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?

        def requires_additional_seller_inputs?: () -> bool
        def to_h: () -> { carrier_name: String?, rate: Peddler::Types::Money?, rate_with_adjustments: Peddler::Types::Money?, requires_additional_seller_inputs: bool?, ship_date: String?, shipping_service_id: String?, shipping_service_name: String?, shipping_service_offer_id: String?, shipping_service_options: Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions?, adjustment_item_list: Array[Peddler::Types::MerchantFulfillmentV0::RateItem]?, available_format_options_for_label: Array[Peddler::Types::MerchantFulfillmentV0::LabelFormatOption]?, available_label_formats: Array[untyped]?, available_shipping_service_options: Peddler::Types::MerchantFulfillmentV0::AvailableShippingServiceOptions?, benefits: Peddler::Types::MerchantFulfillmentV0::Benefits?, earliest_estimated_delivery_date: String?, latest_estimated_delivery_date: String? }
      end

      class ShippingServiceList < Array[ShippingService]
        def self.parse: (Array[untyped]) -> ShippingServiceList
      end

      class ShippingServiceOptions < Data
        def self.new: (carrier_will_pick_up: bool?, delivery_experience: String?, ?carrier_will_pick_up_option: String?, ?declared_value: Peddler::Types::Money?, ?label_format: String?) -> Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions
                    | (bool?, String?, String?, Peddler::Types::Money?, String?) -> Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::ShippingServiceOptions

        attr_reader carrier_will_pick_up: bool?

        attr_reader carrier_will_pick_up_option: String?
        attr_reader declared_value: Peddler::Types::Money?
        attr_reader delivery_experience: String?

        attr_reader label_format: String?

        def carrier_will_pick_up?: () -> bool
        def to_h: () -> { carrier_will_pick_up: bool?, delivery_experience: String?, carrier_will_pick_up_option: String?, declared_value: Peddler::Types::Money?, label_format: String? }
      end

      class TemporarilyUnavailableCarrier < Data
        def self.new: (carrier_name: String?) -> Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier
                    | (String?) -> Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::TemporarilyUnavailableCarrier

        attr_reader carrier_name: String?

        def to_h: () -> { carrier_name: String? }
      end

      class TemporarilyUnavailableCarrierList < Array[TemporarilyUnavailableCarrier]
        def self.parse: (Array[untyped]) -> TemporarilyUnavailableCarrierList
      end

      class TermsAndConditionsNotAcceptedCarrier < Data
        def self.new: (carrier_name: String?) -> Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier
                    | (String?) -> Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::TermsAndConditionsNotAcceptedCarrier

        attr_reader carrier_name: String?

        def to_h: () -> { carrier_name: String? }
      end

      class TermsAndConditionsNotAcceptedCarrierList < Array[TermsAndConditionsNotAcceptedCarrier]
        def self.parse: (Array[untyped]) -> TermsAndConditionsNotAcceptedCarrierList
      end

      class TransparencyCodeList < Array[untyped]
        def self.parse: (Array[untyped]) -> TransparencyCodeList
      end

      class Weight < Data
        def self.new: (unit: String?, value: Float?) -> Peddler::Types::MerchantFulfillmentV0::Weight
                    | (String?, Float?) -> Peddler::Types::MerchantFulfillmentV0::Weight

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::MerchantFulfillmentV0::Weight

        attr_reader unit: String?
        attr_reader value: Float?

        def to_h: () -> { unit: String?, value: Float? }
      end
    end
  end
end
