module Peddler
  module Types
    module VendorOrdersV1
      class AcknowledgementStatusDetails < Data
        def self.new: (?accepted_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, ?acknowledgement_date: String?, ?rejected_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?) -> Peddler::Types::VendorOrdersV1::AcknowledgementStatusDetails
                    | (Peddler::Types::VendorOrdersV1::ItemQuantity?, String?, Peddler::Types::VendorOrdersV1::ItemQuantity?) -> Peddler::Types::VendorOrdersV1::AcknowledgementStatusDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::AcknowledgementStatusDetails

        attr_reader accepted_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?
        attr_reader acknowledgement_date: String?
        attr_reader rejected_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?

        def to_h: () -> { accepted_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, acknowledgement_date: String?, rejected_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity? }
      end

      class Address < Data
        def self.new: (address_line1: String?, country_code: String?, name: String?, ?address_line2: String?, ?address_line3: String?, ?city: String?, ?county: String?, ?district: String?, ?phone: String?, ?postal_code: String?, ?state_or_region: String?) -> Peddler::Types::VendorOrdersV1::Address
                    | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::Types::VendorOrdersV1::Address

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::Address

        attr_reader address_line1: String?

        attr_reader address_line2: String?
        attr_reader address_line3: String?
        attr_reader city: String?
        attr_reader country_code: String?

        attr_reader county: String?
        attr_reader district: String?
        attr_reader name: String?

        attr_reader phone: String?
        attr_reader postal_code: String?
        attr_reader state_or_region: String?

        def to_h: () -> { address_line1: String?, country_code: String?, name: String?, address_line2: String?, address_line3: String?, city: String?, county: String?, district: String?, phone: String?, postal_code: String?, state_or_region: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::VendorOrdersV1::Error
                    | (String?, String?, String?) -> Peddler::Types::VendorOrdersV1::Error

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::Error

        attr_reader code: String?

        attr_reader details: String?
        attr_reader message: String?

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class GetPurchaseOrderResponse < Data
        def self.new: (?errors: Array[Peddler::Types::VendorOrdersV1::Error]?, ?payload: Peddler::Types::VendorOrdersV1::Order?) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrderResponse
                    | (Array[Peddler::Types::VendorOrdersV1::Error]?, Peddler::Types::VendorOrdersV1::Order?) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrderResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrderResponse

        attr_reader errors: Array[Peddler::Types::VendorOrdersV1::Error]?
        attr_reader payload: Peddler::Types::VendorOrdersV1::Order?

        def to_h: () -> { errors: Array[Peddler::Types::VendorOrdersV1::Error]?, payload: Peddler::Types::VendorOrdersV1::Order? }
      end

      class GetPurchaseOrdersResponse < Data
        def self.new: (?errors: Array[Peddler::Types::VendorOrdersV1::Error]?, ?payload: Peddler::Types::VendorOrdersV1::OrderList?) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrdersResponse
                    | (Array[Peddler::Types::VendorOrdersV1::Error]?, Peddler::Types::VendorOrdersV1::OrderList?) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrdersResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrdersResponse

        attr_reader errors: Array[Peddler::Types::VendorOrdersV1::Error]?
        attr_reader payload: Peddler::Types::VendorOrdersV1::OrderList?

        def to_h: () -> { errors: Array[Peddler::Types::VendorOrdersV1::Error]?, payload: Peddler::Types::VendorOrdersV1::OrderList? }
      end

      class GetPurchaseOrdersStatusResponse < Data
        def self.new: (?errors: Array[Peddler::Types::VendorOrdersV1::Error]?, ?payload: Peddler::Types::VendorOrdersV1::OrderListStatus?) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrdersStatusResponse
                    | (Array[Peddler::Types::VendorOrdersV1::Error]?, Peddler::Types::VendorOrdersV1::OrderListStatus?) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrdersStatusResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::GetPurchaseOrdersStatusResponse

        attr_reader errors: Array[Peddler::Types::VendorOrdersV1::Error]?
        attr_reader payload: Peddler::Types::VendorOrdersV1::OrderListStatus?

        def to_h: () -> { errors: Array[Peddler::Types::VendorOrdersV1::Error]?, payload: Peddler::Types::VendorOrdersV1::OrderListStatus? }
      end

      class ImportDetails < Data
        def self.new: (?import_containers: String?, ?international_commercial_terms: String?, ?method_of_payment: String?, ?port_of_delivery: String?, ?shipping_instructions: String?) -> Peddler::Types::VendorOrdersV1::ImportDetails
                    | (String?, String?, String?, String?, String?) -> Peddler::Types::VendorOrdersV1::ImportDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::ImportDetails

        attr_reader import_containers: String?
        attr_reader international_commercial_terms: String?
        attr_reader method_of_payment: String?
        attr_reader port_of_delivery: String?
        attr_reader shipping_instructions: String?

        def to_h: () -> { import_containers: String?, international_commercial_terms: String?, method_of_payment: String?, port_of_delivery: String?, shipping_instructions: String? }
      end

      class ItemQuantity < Data
        def self.new: (?amount: Integer?, ?unit_of_measure: String?, ?unit_size: Integer?) -> Peddler::Types::VendorOrdersV1::ItemQuantity
                    | (Integer?, String?, Integer?) -> Peddler::Types::VendorOrdersV1::ItemQuantity

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::ItemQuantity

        attr_reader amount: Integer?
        attr_reader unit_of_measure: String?
        attr_reader unit_size: Integer?

        def to_h: () -> { amount: Integer?, unit_of_measure: String?, unit_size: Integer? }
      end

      class ItemStatus < Array[OrderItemStatus]
        def self.parse: (Array[untyped]) -> ItemStatus
      end

      class Order < Data
        def self.new: (purchase_order_number: String?, purchase_order_state: String?, ?order_details: Peddler::Types::VendorOrdersV1::OrderDetails?) -> Peddler::Types::VendorOrdersV1::Order
                    | (String?, String?, Peddler::Types::VendorOrdersV1::OrderDetails?) -> Peddler::Types::VendorOrdersV1::Order

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::Order

        attr_reader order_details: Peddler::Types::VendorOrdersV1::OrderDetails?
        attr_reader purchase_order_number: String?
        attr_reader purchase_order_state: String?

        def to_h: () -> { purchase_order_number: String?, purchase_order_state: String?, order_details: Peddler::Types::VendorOrdersV1::OrderDetails? }
      end

      class OrderAcknowledgement < Data
        def self.new: (acknowledgement_date: String?, items: Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem]?, purchase_order_number: String?, selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?) -> Peddler::Types::VendorOrdersV1::OrderAcknowledgement
                    | (String?, Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem]?, String?, Peddler::Types::VendorOrdersV1::PartyIdentification?) -> Peddler::Types::VendorOrdersV1::OrderAcknowledgement

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderAcknowledgement

        attr_reader acknowledgement_date: String?
        attr_reader items: Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem]?
        attr_reader purchase_order_number: String?
        attr_reader selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?

        def to_h: () -> { acknowledgement_date: String?, items: Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem]?, purchase_order_number: String?, selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification? }
      end

      class OrderAcknowledgementItem < Data
        def self.new: (item_acknowledgements: Array[Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement]?, ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, ?amazon_product_identifier: String?, ?discount_multiplier: String?, ?item_sequence_number: String?, ?list_price: Peddler::Types::Money?, ?net_cost: Peddler::Types::Money?, ?vendor_product_identifier: String?) -> Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem
                    | (Array[Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement]?, Peddler::Types::VendorOrdersV1::ItemQuantity?, String?, String?, String?, Peddler::Types::Money?, Peddler::Types::Money?, String?) -> Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderAcknowledgementItem

        attr_reader amazon_product_identifier: String?
        attr_reader discount_multiplier: String?
        attr_reader item_acknowledgements: Array[Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement]?

        attr_reader item_sequence_number: String?
        attr_reader list_price: Peddler::Types::Money?
        attr_reader net_cost: Peddler::Types::Money?
        attr_reader ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?

        attr_reader vendor_product_identifier: String?

        def to_h: () -> { item_acknowledgements: Array[Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement]?, ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, amazon_product_identifier: String?, discount_multiplier: String?, item_sequence_number: String?, list_price: Peddler::Types::Money?, net_cost: Peddler::Types::Money?, vendor_product_identifier: String? }
      end

      class OrderDetails < Data
        def self.new: (items: Array[Peddler::Types::VendorOrdersV1::OrderItem]?, purchase_order_date: String?, purchase_order_state_changed_date: String?, ?bill_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ?buying_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ?deal_code: String?, ?delivery_window: String?, ?import_details: Peddler::Types::VendorOrdersV1::ImportDetails?, ?payment_method: String?, ?purchase_order_changed_date: String?, ?purchase_order_type: String?, ?selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ?ship_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ?ship_window: String?) -> Peddler::Types::VendorOrdersV1::OrderDetails
                    | (Array[Peddler::Types::VendorOrdersV1::OrderItem]?, String?, String?, Peddler::Types::VendorOrdersV1::PartyIdentification?, Peddler::Types::VendorOrdersV1::PartyIdentification?, String?, String?, Peddler::Types::VendorOrdersV1::ImportDetails?, String?, String?, String?, Peddler::Types::VendorOrdersV1::PartyIdentification?, Peddler::Types::VendorOrdersV1::PartyIdentification?, String?) -> Peddler::Types::VendorOrdersV1::OrderDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderDetails

        attr_reader bill_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?
        attr_reader buying_party: Peddler::Types::VendorOrdersV1::PartyIdentification?
        attr_reader deal_code: String?
        attr_reader delivery_window: String?
        attr_reader import_details: Peddler::Types::VendorOrdersV1::ImportDetails?
        attr_reader items: Array[Peddler::Types::VendorOrdersV1::OrderItem]?

        attr_reader payment_method: String?
        attr_reader purchase_order_changed_date: String?
        attr_reader purchase_order_date: String?
        attr_reader purchase_order_state_changed_date: String?

        attr_reader purchase_order_type: String?
        attr_reader selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?
        attr_reader ship_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?
        attr_reader ship_window: String?

        def to_h: () -> { items: Array[Peddler::Types::VendorOrdersV1::OrderItem]?, purchase_order_date: String?, purchase_order_state_changed_date: String?, bill_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, buying_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, deal_code: String?, delivery_window: String?, import_details: Peddler::Types::VendorOrdersV1::ImportDetails?, payment_method: String?, purchase_order_changed_date: String?, purchase_order_type: String?, selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ship_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ship_window: String? }
      end

      class OrderItem < Data
        def self.new: (back_order_allowed: bool?, item_sequence_number: String?, ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, ?amazon_product_identifier: String?, ?list_price: Peddler::Types::Money?, ?net_cost: Peddler::Types::Money?, ?vendor_product_identifier: String?) -> Peddler::Types::VendorOrdersV1::OrderItem
                    | (bool?, String?, Peddler::Types::VendorOrdersV1::ItemQuantity?, String?, Peddler::Types::Money?, Peddler::Types::Money?, String?) -> Peddler::Types::VendorOrdersV1::OrderItem

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderItem

        attr_reader amazon_product_identifier: String?
        attr_reader back_order_allowed: bool?
        attr_reader item_sequence_number: String?

        attr_reader list_price: Peddler::Types::Money?
        attr_reader net_cost: Peddler::Types::Money?
        attr_reader ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?

        attr_reader vendor_product_identifier: String?

        def back_order_allowed?: () -> bool
        def to_h: () -> { back_order_allowed: bool?, item_sequence_number: String?, ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, amazon_product_identifier: String?, list_price: Peddler::Types::Money?, net_cost: Peddler::Types::Money?, vendor_product_identifier: String? }
      end

      class OrderItemAcknowledgement < Data
        def self.new: (acknowledged_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, acknowledgement_code: String?, ?rejection_reason: String?, ?scheduled_delivery_date: String?, ?scheduled_ship_date: String?) -> Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement
                    | (Peddler::Types::VendorOrdersV1::ItemQuantity?, String?, String?, String?, String?) -> Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderItemAcknowledgement

        attr_reader acknowledged_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?
        attr_reader acknowledgement_code: String?
        attr_reader rejection_reason: String?
        attr_reader scheduled_delivery_date: String?
        attr_reader scheduled_ship_date: String?

        def to_h: () -> { acknowledged_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, acknowledgement_code: String?, rejection_reason: String?, scheduled_delivery_date: String?, scheduled_ship_date: String? }
      end

      class OrderItemStatus < Data
        def self.new: (item_sequence_number: String?, ?acknowledgement_status: Hash[untyped, untyped]?, ?buyer_product_identifier: String?, ?list_price: Peddler::Types::Money?, ?net_cost: Peddler::Types::Money?, ?ordered_quantity: Hash[untyped, untyped]?, ?receiving_status: Hash[untyped, untyped]?, ?vendor_product_identifier: String?) -> Peddler::Types::VendorOrdersV1::OrderItemStatus
                    | (String?, Hash[untyped, untyped]?, String?, Peddler::Types::Money?, Peddler::Types::Money?, Hash[untyped, untyped]?, Hash[untyped, untyped]?, String?) -> Peddler::Types::VendorOrdersV1::OrderItemStatus

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderItemStatus

        attr_reader acknowledgement_status: Hash[untyped, untyped]?
        attr_reader buyer_product_identifier: String?
        attr_reader item_sequence_number: String?

        attr_reader list_price: Peddler::Types::Money?
        attr_reader net_cost: Peddler::Types::Money?
        attr_reader ordered_quantity: Hash[untyped, untyped]?
        attr_reader receiving_status: Hash[untyped, untyped]?
        attr_reader vendor_product_identifier: String?

        def to_h: () -> { item_sequence_number: String?, acknowledgement_status: Hash[untyped, untyped]?, buyer_product_identifier: String?, list_price: Peddler::Types::Money?, net_cost: Peddler::Types::Money?, ordered_quantity: Hash[untyped, untyped]?, receiving_status: Hash[untyped, untyped]?, vendor_product_identifier: String? }
      end

      class OrderList < Data
        def self.new: (?orders: Array[Peddler::Types::VendorOrdersV1::Order]?, ?pagination: Peddler::Types::VendorOrdersV1::Pagination?) -> Peddler::Types::VendorOrdersV1::OrderList
                    | (Array[Peddler::Types::VendorOrdersV1::Order]?, Peddler::Types::VendorOrdersV1::Pagination?) -> Peddler::Types::VendorOrdersV1::OrderList

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderList

        attr_reader orders: Array[Peddler::Types::VendorOrdersV1::Order]?
        attr_reader pagination: Peddler::Types::VendorOrdersV1::Pagination?

        def to_h: () -> { orders: Array[Peddler::Types::VendorOrdersV1::Order]?, pagination: Peddler::Types::VendorOrdersV1::Pagination? }
      end

      class OrderListStatus < Data
        def self.new: (?orders_status: Array[Peddler::Types::VendorOrdersV1::OrderStatus]?, ?pagination: Peddler::Types::VendorOrdersV1::Pagination?) -> Peddler::Types::VendorOrdersV1::OrderListStatus
                    | (Array[Peddler::Types::VendorOrdersV1::OrderStatus]?, Peddler::Types::VendorOrdersV1::Pagination?) -> Peddler::Types::VendorOrdersV1::OrderListStatus

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderListStatus

        attr_reader orders_status: Array[Peddler::Types::VendorOrdersV1::OrderStatus]?
        attr_reader pagination: Peddler::Types::VendorOrdersV1::Pagination?

        def to_h: () -> { orders_status: Array[Peddler::Types::VendorOrdersV1::OrderStatus]?, pagination: Peddler::Types::VendorOrdersV1::Pagination? }
      end

      class OrderStatus < Data
        def self.new: (item_status: Array[Peddler::Types::VendorOrdersV1::OrderItemStatus]?, purchase_order_date: String?, purchase_order_number: String?, purchase_order_status: String?, selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ship_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ?last_updated_date: String?) -> Peddler::Types::VendorOrdersV1::OrderStatus
                    | (Array[Peddler::Types::VendorOrdersV1::OrderItemStatus]?, String?, String?, String?, Peddler::Types::VendorOrdersV1::PartyIdentification?, Peddler::Types::VendorOrdersV1::PartyIdentification?, String?) -> Peddler::Types::VendorOrdersV1::OrderStatus

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderStatus

        attr_reader item_status: Array[Peddler::Types::VendorOrdersV1::OrderItemStatus]?

        attr_reader last_updated_date: String?
        attr_reader purchase_order_date: String?
        attr_reader purchase_order_number: String?
        attr_reader purchase_order_status: String?
        attr_reader selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?
        attr_reader ship_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?

        def to_h: () -> { item_status: Array[Peddler::Types::VendorOrdersV1::OrderItemStatus]?, purchase_order_date: String?, purchase_order_number: String?, purchase_order_status: String?, selling_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, ship_to_party: Peddler::Types::VendorOrdersV1::PartyIdentification?, last_updated_date: String? }
      end

      class OrderedQuantityDetails < Data
        def self.new: (?cancelled_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, ?ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, ?updated_date: String?) -> Peddler::Types::VendorOrdersV1::OrderedQuantityDetails
                    | (Peddler::Types::VendorOrdersV1::ItemQuantity?, Peddler::Types::VendorOrdersV1::ItemQuantity?, String?) -> Peddler::Types::VendorOrdersV1::OrderedQuantityDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::OrderedQuantityDetails

        attr_reader cancelled_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?
        attr_reader ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?
        attr_reader updated_date: String?

        def to_h: () -> { cancelled_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, ordered_quantity: Peddler::Types::VendorOrdersV1::ItemQuantity?, updated_date: String? }
      end

      class Pagination < Data
        def self.new: (?next_token: String?) -> Peddler::Types::VendorOrdersV1::Pagination
                    | (String?) -> Peddler::Types::VendorOrdersV1::Pagination

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::Pagination

        attr_reader next_token: String?

        def to_h: () -> { next_token: String? }
      end

      class PartyIdentification < Data
        def self.new: (party_id: String?, ?address: Peddler::Types::VendorOrdersV1::Address?, ?tax_info: Peddler::Types::VendorOrdersV1::TaxRegistrationDetails?) -> Peddler::Types::VendorOrdersV1::PartyIdentification
                    | (String?, Peddler::Types::VendorOrdersV1::Address?, Peddler::Types::VendorOrdersV1::TaxRegistrationDetails?) -> Peddler::Types::VendorOrdersV1::PartyIdentification

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::PartyIdentification

        attr_reader address: Peddler::Types::VendorOrdersV1::Address?
        attr_reader party_id: String?

        attr_reader tax_info: Peddler::Types::VendorOrdersV1::TaxRegistrationDetails?

        def to_h: () -> { party_id: String?, address: Peddler::Types::VendorOrdersV1::Address?, tax_info: Peddler::Types::VendorOrdersV1::TaxRegistrationDetails? }
      end

      class SubmitAcknowledgementRequest < Data
        def self.new: (?acknowledgements: Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgement]?) -> Peddler::Types::VendorOrdersV1::SubmitAcknowledgementRequest
                    | (Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgement]?) -> Peddler::Types::VendorOrdersV1::SubmitAcknowledgementRequest

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::SubmitAcknowledgementRequest

        attr_reader acknowledgements: Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgement]?

        def to_h: () -> { acknowledgements: Array[Peddler::Types::VendorOrdersV1::OrderAcknowledgement]? }
      end

      class SubmitAcknowledgementResponse < Data
        def self.new: (?errors: Array[Peddler::Types::VendorOrdersV1::Error]?, ?payload: Peddler::Types::VendorOrdersV1::TransactionId?) -> Peddler::Types::VendorOrdersV1::SubmitAcknowledgementResponse
                    | (Array[Peddler::Types::VendorOrdersV1::Error]?, Peddler::Types::VendorOrdersV1::TransactionId?) -> Peddler::Types::VendorOrdersV1::SubmitAcknowledgementResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::SubmitAcknowledgementResponse

        attr_reader errors: Array[Peddler::Types::VendorOrdersV1::Error]?
        attr_reader payload: Peddler::Types::VendorOrdersV1::TransactionId?

        def to_h: () -> { errors: Array[Peddler::Types::VendorOrdersV1::Error]?, payload: Peddler::Types::VendorOrdersV1::TransactionId? }
      end

      class TaxRegistrationDetails < Data
        def self.new: (tax_registration_number: String?, tax_registration_type: String?) -> Peddler::Types::VendorOrdersV1::TaxRegistrationDetails
                    | (String?, String?) -> Peddler::Types::VendorOrdersV1::TaxRegistrationDetails

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::TaxRegistrationDetails

        attr_reader tax_registration_number: String?
        attr_reader tax_registration_type: String?

        def to_h: () -> { tax_registration_number: String?, tax_registration_type: String? }
      end

      class TransactionId < Data
        def self.new: (?transaction_id: String?) -> Peddler::Types::VendorOrdersV1::TransactionId
                    | (String?) -> Peddler::Types::VendorOrdersV1::TransactionId

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorOrdersV1::TransactionId

        attr_reader transaction_id: String?

        def to_h: () -> { transaction_id: String? }
      end
    end
  end
end
