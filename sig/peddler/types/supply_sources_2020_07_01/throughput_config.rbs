# This file is generated. Do not edit.

module Peddler
  module Types
    module SupplySources20200701
      class ThroughputConfig < Data
        def self.new: (throughput_unit: String?, ?throughput_cap: Peddler::Types::SupplySources20200701::ThroughputCap?) -> Peddler::Types::SupplySources20200701::ThroughputConfig
                    | (String?, Peddler::Types::SupplySources20200701::ThroughputCap?) -> Peddler::Types::SupplySources20200701::ThroughputConfig

        def self.parse: (?(Hash[String | Symbol, untyped]), **untyped) -> Peddler::Types::SupplySources20200701::ThroughputConfig

        attr_reader throughput_unit: String?
        attr_reader throughput_cap: Peddler::Types::SupplySources20200701::ThroughputCap?

        def to_h: () -> { throughput_unit: String?, throughput_cap: Peddler::Types::SupplySources20200701::ThroughputCap? }
      end
    end
  end
end
