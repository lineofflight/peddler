module Peddler
  module Types
    module VendorDirectFulfillmentTransactionsV1
      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error
                    | (String?, String?, String?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error

        attr_reader code: String?

        attr_reader details: String?
        attr_reader message: String?

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class GetTransactionResponse < Data
        def self.new: (?errors: Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?, ?payload: Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::GetTransactionResponse
                    | (Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?, Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::GetTransactionResponse

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::GetTransactionResponse

        attr_reader errors: Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?
        attr_reader payload: Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus?

        def to_h: () -> { errors: Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?, payload: Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus? }
      end

      class Transaction < Data
        def self.new: (status: String?, transaction_id: String?, ?errors: Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction
                    | (String?, String?, Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction

        attr_reader errors: Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]?
        attr_reader status: String?
        attr_reader transaction_id: String?

        def to_h: () -> { status: String?, transaction_id: String?, errors: Array[Peddler::Types::VendorDirectFulfillmentTransactionsV1::Error]? }
      end

      class TransactionStatus < Data
        def self.new: (?transaction_status: Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus
                    | (Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction?) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::VendorDirectFulfillmentTransactionsV1::TransactionStatus

        attr_reader transaction_status: Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction?

        def to_h: () -> { transaction_status: Peddler::Types::VendorDirectFulfillmentTransactionsV1::Transaction? }
      end
    end
  end
end
