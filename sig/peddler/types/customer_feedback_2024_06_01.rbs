module Peddler
  module Types
    module CustomerFeedback20240601
      class BrowseNodeAllOccurrence < Data
        def self.new: (all_products: Float?, top_twenty_five_percent_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence
                    | (Float?, Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence

        def self.[]: (all_products: Float?, top_twenty_five_percent_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence
                   | (Float?, Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence

        def self.members: () -> [ :all_products, :top_twenty_five_percent_products ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence

        attr_reader all_products: Float?
        attr_reader top_twenty_five_percent_products: Float?
        def members: () -> [ :all_products, :top_twenty_five_percent_products ]

        def to_h: () -> { all_products: Float?, top_twenty_five_percent_products: Float? }
      end

      class BrowseNodeAllStarRatingImpact < Data
        def self.new: (all_products: Float?, top_twenty_five_percent_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact
                    | (Float?, Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact

        def self.[]: (all_products: Float?, top_twenty_five_percent_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact
                   | (Float?, Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact

        def self.members: () -> [ :all_products, :top_twenty_five_percent_products ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact

        attr_reader all_products: Float?
        attr_reader top_twenty_five_percent_products: Float?
        def members: () -> [ :all_products, :top_twenty_five_percent_products ]

        def to_h: () -> { all_products: Float?, top_twenty_five_percent_products: Float? }
      end

      class BrowseNodeOccurrence < Data
        def self.new: (all_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence
                    | (Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence

        def self.[]: (all_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence
                   | (Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence

        def self.members: () -> [ :all_products ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence

        attr_reader all_products: Float?
        def members: () -> [ :all_products ]

        def to_h: () -> { all_products: Float? }
      end

      class BrowseNodeResponse < Data
        def self.new: (browse_node_id: String?, display_name: String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeResponse
                    | (String?, String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeResponse

        def self.[]: (browse_node_id: String?, display_name: String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeResponse
                   | (String?, String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeResponse

        def self.members: () -> [ :browse_node_id, :display_name ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeResponse

        attr_reader browse_node_id: String?
        attr_reader display_name: String?
        def members: () -> [ :browse_node_id, :display_name ]

        def to_h: () -> { browse_node_id: String?, display_name: String? }
      end

      class BrowseNodeReturnTopics < Data
        def self.new: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, topic: String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics

        def self.[]: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, topic: String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, String?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics

        def self.members: () -> [ :browse_node_metrics, :topic ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics

        attr_reader browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?
        attr_reader topic: String?
        def members: () -> [ :browse_node_metrics, :topic ]

        def to_h: () -> { browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, topic: String? }
      end

      class BrowseNodeReturnTopicsResponse < Data
        def self.new: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopicsResponse
                    | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopicsResponse

        def self.[]: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopicsResponse
                   | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopicsResponse

        def self.members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopicsResponse

        attr_reader browse_node_id: String?
        attr_reader country_code: String?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader display_name: String?
        attr_reader marketplace_id: String?
        attr_reader topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics]?
        def members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :topics ]

        def to_h: () -> { browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTopics]? }
      end

      class BrowseNodeReturnTrend < Data
        def self.new: (topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend
                    | (String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend

        def self.[]: (topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend
                   | (String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend

        def self.members: () -> [ :topic, :trend_metrics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend

        attr_reader topic: String?
        attr_reader trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint]?
        def members: () -> [ :topic, :trend_metrics ]

        def to_h: () -> { topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint]? }
      end

      class BrowseNodeReturnTrendPoint < Data
        def self.new: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint

        def self.[]: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint

        def self.members: () -> [ :browse_node_metrics, :date_range ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendPoint

        attr_reader browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        def members: () -> [ :browse_node_metrics, :date_range ]

        def to_h: () -> { browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange? }
      end

      class BrowseNodeReturnTrendsResponse < Data
        def self.new: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, return_trends: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendsResponse
                    | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendsResponse

        def self.[]: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, return_trends: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendsResponse
                   | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendsResponse

        def self.members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :return_trends ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrendsResponse

        attr_reader browse_node_id: String?
        attr_reader country_code: String?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader display_name: String?
        attr_reader marketplace_id: String?
        attr_reader return_trends: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend]?
        def members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :return_trends ]

        def to_h: () -> { browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, return_trends: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReturnTrend]? }
      end

      class BrowseNodeReviewSubtopicMetrics < Data
        def self.new: (occurrence_percentage: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics
                    | (Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics

        def self.[]: (occurrence_percentage: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics
                   | (Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics

        def self.members: () -> [ :occurrence_percentage ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics

        attr_reader occurrence_percentage: Float?
        def members: () -> [ :occurrence_percentage ]

        def to_h: () -> { occurrence_percentage: Float? }
      end

      class BrowseNodeReviewTopic < Data
        def self.new: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics?, topic: String?, ?review_snippets: Array[String]?, ?subtopics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics?, String?, Array[String]?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic

        def self.[]: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics?, topic: String?, ?review_snippets: Array[String]?, ?subtopics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics?, String?, Array[String]?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic

        def self.members: () -> [ :browse_node_metrics, :topic, :review_snippets, :subtopics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic

        attr_reader browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics?
        attr_reader review_snippets: Array[String]?
        attr_reader subtopics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic]?
        attr_reader topic: String?
        def members: () -> [ :browse_node_metrics, :topic, :review_snippets, :subtopics ]

        def to_h: () -> { browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics?, topic: String?, review_snippets: Array[String]?, subtopics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic]? }
      end

      class BrowseNodeReviewTopicMetrics < Data
        def self.new: (?occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?, ?star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?, Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics

        def self.[]: (?occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?, ?star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?, Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics

        def self.members: () -> [ :occurrence_percentage, :star_rating_impact ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicMetrics

        attr_reader occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?
        attr_reader star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact?
        def members: () -> [ :occurrence_percentage, :star_rating_impact ]

        def to_h: () -> { occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?, star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllStarRatingImpact? }
      end

      class BrowseNodeReviewTopics < Data
        def self.new: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics
                    | (Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics

        def self.[]: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics
                   | (Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics

        def self.members: () -> [ :negative_topics, :positive_topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics

        attr_reader negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?
        attr_reader positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?
        def members: () -> [ :negative_topics, :positive_topics ]

        def to_h: () -> { negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]?, positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopic]? }
      end

      class BrowseNodeReviewTopicsResponse < Data
        def self.new: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, topics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicsResponse
                    | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicsResponse

        def self.[]: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, topics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicsResponse
                   | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicsResponse

        def self.members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopicsResponse

        attr_reader browse_node_id: String?
        attr_reader country_code: String?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader display_name: String?
        attr_reader marketplace_id: String?
        attr_reader topics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics?
        def members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :topics ]

        def to_h: () -> { browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, topics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTopics? }
      end

      class BrowseNodeReviewTrend < Data
        def self.new: (topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend
                    | (String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend

        def self.[]: (topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend
                   | (String?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend

        def self.members: () -> [ :topic, :trend_metrics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend

        attr_reader topic: String?
        attr_reader trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint]?
        def members: () -> [ :topic, :trend_metrics ]

        def to_h: () -> { topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint]? }
      end

      class BrowseNodeReviewTrendMetrics < Data
        def self.new: (occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics

        def self.[]: (occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics

        def self.members: () -> [ :occurrence_percentage ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics

        attr_reader occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence?
        def members: () -> [ :occurrence_percentage ]

        def to_h: () -> { occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeAllOccurrence? }
      end

      class BrowseNodeReviewTrendPoint < Data
        def self.new: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics?, Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint

        def self.[]: (browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics?, Peddler::Types::CustomerFeedback20240601::DateRange?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint

        def self.members: () -> [ :browse_node_metrics, :date_range ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendPoint

        attr_reader browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        def members: () -> [ :browse_node_metrics, :date_range ]

        def to_h: () -> { browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange? }
      end

      class BrowseNodeReviewTrends < Data
        def self.new: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends
                    | (Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends

        def self.[]: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends
                   | (Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?, Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends

        def self.members: () -> [ :negative_topics, :positive_topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends

        attr_reader negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?
        attr_reader positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?
        def members: () -> [ :negative_topics, :positive_topics ]

        def to_h: () -> { negative_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]?, positive_topics: Array[Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrend]? }
      end

      class BrowseNodeReviewTrendsResponse < Data
        def self.new: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, review_trends: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendsResponse
                    | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendsResponse

        def self.[]: (browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, review_trends: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendsResponse
                   | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendsResponse

        def self.members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :review_trends ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrendsResponse

        attr_reader browse_node_id: String?
        attr_reader country_code: String?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader display_name: String?
        attr_reader marketplace_id: String?
        attr_reader review_trends: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends?
        def members: () -> [ :browse_node_id, :country_code, :date_range, :display_name, :marketplace_id, :review_trends ]

        def to_h: () -> { browse_node_id: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, display_name: String?, marketplace_id: String?, review_trends: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewTrends? }
      end

      class BrowseNodeStarRatingImpact < Data
        def self.new: (all_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact
                    | (Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact

        def self.[]: (all_products: Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact
                   | (Float?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact

        def self.members: () -> [ :all_products ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact

        attr_reader all_products: Float?
        def members: () -> [ :all_products ]

        def to_h: () -> { all_products: Float? }
      end

      class BrowseNodeSubtopic < Data
        def self.new: (metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics?, subtopic: String?, ?review_snippets: Array[String]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics?, String?, Array[String]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic

        def self.[]: (metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics?, subtopic: String?, ?review_snippets: Array[String]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics?, String?, Array[String]?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic

        def self.members: () -> [ :metrics, :subtopic, :review_snippets ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeSubtopic

        attr_reader metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics?
        attr_reader review_snippets: Array[String]?
        attr_reader subtopic: String?
        def members: () -> [ :metrics, :subtopic, :review_snippets ]

        def to_h: () -> { metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeReviewSubtopicMetrics?, subtopic: String?, review_snippets: Array[String]? }
      end

      class BrowseNodeTrendMetrics < Data
        def self.new: (occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics

        def self.[]: (occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics

        def self.members: () -> [ :occurrence_percentage ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics

        attr_reader occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?
        def members: () -> [ :occurrence_percentage ]

        def to_h: () -> { occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence? }
      end

      class ChildAsinMentionMetrics < Data
        def self.new: (asin: String?, number_of_mentions: Integer?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics
                    | (String?, Integer?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics

        def self.[]: (asin: String?, number_of_mentions: Integer?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics
                   | (String?, Integer?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics

        def self.members: () -> [ :asin, :number_of_mentions ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics

        attr_reader asin: String?
        attr_reader number_of_mentions: Integer?
        def members: () -> [ :asin, :number_of_mentions ]

        def to_h: () -> { asin: String?, number_of_mentions: Integer? }
      end

      class ChildAsinMetrics < Data
        def self.new: (?least_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?, ?most_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics
                    | (Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?, Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics

        def self.[]: (?least_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?, ?most_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics
                   | (Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?, Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics

        def self.members: () -> [ :least_mentions, :most_mentions ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics

        attr_reader least_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?
        attr_reader most_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?
        def members: () -> [ :least_mentions, :most_mentions ]

        def to_h: () -> { least_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics?, most_mentions: Peddler::Types::CustomerFeedback20240601::ChildAsinMentionMetrics? }
      end

      class DateRange < Data
        def self.new: (end_date: String?, start_date: String?) -> Peddler::Types::CustomerFeedback20240601::DateRange
                    | (String?, String?) -> Peddler::Types::CustomerFeedback20240601::DateRange

        def self.[]: (end_date: String?, start_date: String?) -> Peddler::Types::CustomerFeedback20240601::DateRange
                   | (String?, String?) -> Peddler::Types::CustomerFeedback20240601::DateRange

        def self.members: () -> [ :end_date, :start_date ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::DateRange

        attr_reader end_date: String?
        attr_reader start_date: String?
        def members: () -> [ :end_date, :start_date ]

        def to_h: () -> { end_date: String?, start_date: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::Types::CustomerFeedback20240601::Error
                    | (String?, String?, String?) -> Peddler::Types::CustomerFeedback20240601::Error

        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::Types::CustomerFeedback20240601::Error
                   | (String?, String?, String?) -> Peddler::Types::CustomerFeedback20240601::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details ]

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Data
        def self.new: (errors: Array[Peddler::Types::CustomerFeedback20240601::Error]?) -> Peddler::Types::CustomerFeedback20240601::ErrorList
                    | (Array[Peddler::Types::CustomerFeedback20240601::Error]?) -> Peddler::Types::CustomerFeedback20240601::ErrorList

        def self.[]: (errors: Array[Peddler::Types::CustomerFeedback20240601::Error]?) -> Peddler::Types::CustomerFeedback20240601::ErrorList
                   | (Array[Peddler::Types::CustomerFeedback20240601::Error]?) -> Peddler::Types::CustomerFeedback20240601::ErrorList

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ErrorList

        attr_reader errors: Array[Peddler::Types::CustomerFeedback20240601::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::Types::CustomerFeedback20240601::Error]? }
      end

      class ItemReviewBrowseNodeMetrics < Data
        def self.new: (?occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?, ?star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics
                    | (Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?, Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics

        def self.[]: (?occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?, ?star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics
                   | (Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?, Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics

        def self.members: () -> [ :occurrence_percentage, :star_rating_impact ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics

        attr_reader occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?
        attr_reader star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact?
        def members: () -> [ :occurrence_percentage, :star_rating_impact ]

        def to_h: () -> { occurrence_percentage: Peddler::Types::CustomerFeedback20240601::BrowseNodeOccurrence?, star_rating_impact: Peddler::Types::CustomerFeedback20240601::BrowseNodeStarRatingImpact? }
      end

      class ItemReviewSubtopic < Data
        def self.new: (metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics?, subtopic: String?, ?review_snippets: Array[String]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic
                    | (Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics?, String?, Array[String]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic

        def self.[]: (metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics?, subtopic: String?, ?review_snippets: Array[String]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic
                   | (Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics?, String?, Array[String]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic

        def self.members: () -> [ :metrics, :subtopic, :review_snippets ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic

        attr_reader metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics?
        attr_reader review_snippets: Array[String]?
        attr_reader subtopic: String?
        def members: () -> [ :metrics, :subtopic, :review_snippets ]

        def to_h: () -> { metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics?, subtopic: String?, review_snippets: Array[String]? }
      end

      class ItemReviewSubtopicMetrics < Data
        def self.new: (number_of_mentions: Integer?, occurrence_percentage: Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics
                    | (Integer?, Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics

        def self.[]: (number_of_mentions: Integer?, occurrence_percentage: Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics
                   | (Integer?, Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics

        def self.members: () -> [ :number_of_mentions, :occurrence_percentage ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopicMetrics

        attr_reader number_of_mentions: Integer?
        attr_reader occurrence_percentage: Float?
        def members: () -> [ :number_of_mentions, :occurrence_percentage ]

        def to_h: () -> { number_of_mentions: Integer?, occurrence_percentage: Float? }
      end

      class ItemReviewTopic < Data
        def self.new: (asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, topic: String?, ?browse_node_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics?, ?child_asin_metrics: Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics?, ?parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, ?review_snippets: Array[String]?, ?subtopics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopic
                    | (Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, String?, Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics?, Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics?, Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, Array[String]?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopic

        def self.[]: (asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, topic: String?, ?browse_node_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics?, ?child_asin_metrics: Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics?, ?parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, ?review_snippets: Array[String]?, ?subtopics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopic
                   | (Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, String?, Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics?, Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics?, Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, Array[String]?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopic

        def self.members: () -> [ :asin_metrics, :topic, :browse_node_metrics, :child_asin_metrics, :parent_asin_metrics, :review_snippets, :subtopics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopic

        attr_reader asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?
        attr_reader browse_node_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics?
        attr_reader child_asin_metrics: Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics?
        attr_reader parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?
        attr_reader review_snippets: Array[String]?
        attr_reader subtopics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic]?
        attr_reader topic: String?
        def members: () -> [ :asin_metrics, :topic, :browse_node_metrics, :child_asin_metrics, :parent_asin_metrics, :review_snippets, :subtopics ]

        def to_h: () -> { asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, topic: String?, browse_node_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewBrowseNodeMetrics?, child_asin_metrics: Peddler::Types::CustomerFeedback20240601::ChildAsinMetrics?, parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics?, review_snippets: Array[String]?, subtopics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewSubtopic]? }
      end

      class ItemReviewTopicMetrics < Data
        def self.new: (?number_of_mentions: Integer?, ?occurrence_percentage: Float?, ?star_rating_impact: Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics
                    | (Integer?, Float?, Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics

        def self.[]: (?number_of_mentions: Integer?, ?occurrence_percentage: Float?, ?star_rating_impact: Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics
                   | (Integer?, Float?, Float?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics

        def self.members: () -> [ :number_of_mentions, :occurrence_percentage, :star_rating_impact ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicMetrics

        attr_reader number_of_mentions: Integer?
        attr_reader occurrence_percentage: Float?
        attr_reader star_rating_impact: Float?
        def members: () -> [ :number_of_mentions, :occurrence_percentage, :star_rating_impact ]

        def to_h: () -> { number_of_mentions: Integer?, occurrence_percentage: Float?, star_rating_impact: Float? }
      end

      class ItemReviewTopics < Data
        def self.new: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopics
                    | (Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopics

        def self.[]: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopics
                   | (Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopics

        def self.members: () -> [ :negative_topics, :positive_topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopics

        attr_reader negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?
        attr_reader positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?
        def members: () -> [ :negative_topics, :positive_topics ]

        def to_h: () -> { negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]?, positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTopic]? }
      end

      class ItemReviewTopicsResponse < Data
        def self.new: (asin: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, item_name: String?, marketplace_id: String?, topics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicsResponse
                    | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::ItemReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicsResponse

        def self.[]: (asin: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, item_name: String?, marketplace_id: String?, topics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicsResponse
                   | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::ItemReviewTopics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicsResponse

        def self.members: () -> [ :asin, :country_code, :date_range, :item_name, :marketplace_id, :topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTopicsResponse

        attr_reader asin: String?
        attr_reader country_code: String?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader item_name: String?
        attr_reader marketplace_id: String?
        attr_reader topics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopics?
        def members: () -> [ :asin, :country_code, :date_range, :item_name, :marketplace_id, :topics ]

        def to_h: () -> { asin: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, item_name: String?, marketplace_id: String?, topics: Peddler::Types::CustomerFeedback20240601::ItemReviewTopics? }
      end

      class ItemReviewTrend < Data
        def self.new: (topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrend
                    | (String?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrend

        def self.[]: (topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrend
                   | (String?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrend

        def self.members: () -> [ :topic, :trend_metrics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrend

        attr_reader topic: String?
        attr_reader trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint]?
        def members: () -> [ :topic, :trend_metrics ]

        def to_h: () -> { topic: String?, trend_metrics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint]? }
      end

      class ItemReviewTrendPoint < Data
        def self.new: (asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, ?browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, ?parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint
                    | (Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?, Peddler::Types::CustomerFeedback20240601::DateRange?, Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint

        def self.[]: (asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, ?browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, ?parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint
                   | (Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?, Peddler::Types::CustomerFeedback20240601::DateRange?, Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint

        def self.members: () -> [ :asin_metrics, :date_range, :browse_node_metrics, :parent_asin_metrics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendPoint

        attr_reader asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?
        attr_reader browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?
        def members: () -> [ :asin_metrics, :date_range, :browse_node_metrics, :parent_asin_metrics ]

        def to_h: () -> { asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, browse_node_metrics: Peddler::Types::CustomerFeedback20240601::BrowseNodeTrendMetrics?, parent_asin_metrics: Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics? }
      end

      class ItemReviewTrends < Data
        def self.new: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrends
                    | (Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrends

        def self.[]: (?negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?, ?positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrends
                   | (Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?, Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrends

        def self.members: () -> [ :negative_topics, :positive_topics ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrends

        attr_reader negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?
        attr_reader positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?
        def members: () -> [ :negative_topics, :positive_topics ]

        def to_h: () -> { negative_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]?, positive_topics: Array[Peddler::Types::CustomerFeedback20240601::ItemReviewTrend]? }
      end

      class ItemReviewTrendsResponse < Data
        def self.new: (asin: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, item_name: String?, marketplace_id: String?, review_trends: Peddler::Types::CustomerFeedback20240601::ItemReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendsResponse
                    | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::ItemReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendsResponse

        def self.[]: (asin: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, item_name: String?, marketplace_id: String?, review_trends: Peddler::Types::CustomerFeedback20240601::ItemReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendsResponse
                   | (String?, String?, Peddler::Types::CustomerFeedback20240601::DateRange?, String?, String?, Peddler::Types::CustomerFeedback20240601::ItemReviewTrends?) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendsResponse

        def self.members: () -> [ :asin, :country_code, :date_range, :item_name, :marketplace_id, :review_trends ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ItemReviewTrendsResponse

        attr_reader asin: String?
        attr_reader country_code: String?
        attr_reader date_range: Peddler::Types::CustomerFeedback20240601::DateRange?
        attr_reader item_name: String?
        attr_reader marketplace_id: String?
        attr_reader review_trends: Peddler::Types::CustomerFeedback20240601::ItemReviewTrends?
        def members: () -> [ :asin, :country_code, :date_range, :item_name, :marketplace_id, :review_trends ]

        def to_h: () -> { asin: String?, country_code: String?, date_range: Peddler::Types::CustomerFeedback20240601::DateRange?, item_name: String?, marketplace_id: String?, review_trends: Peddler::Types::CustomerFeedback20240601::ItemReviewTrends? }
      end

      class ReviewTrendMetrics < Data
        def self.new: (occurrence_percentage: Float?) -> Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics
                    | (Float?) -> Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics

        def self.[]: (occurrence_percentage: Float?) -> Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics
                   | (Float?) -> Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics

        def self.members: () -> [ :occurrence_percentage ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Types::CustomerFeedback20240601::ReviewTrendMetrics

        attr_reader occurrence_percentage: Float?
        def members: () -> [ :occurrence_percentage ]

        def to_h: () -> { occurrence_percentage: Float? }
      end
    end
  end
end
