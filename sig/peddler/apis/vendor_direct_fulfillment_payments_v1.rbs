module Peddler
  module APIs
    class VendorDirectFulfillmentPaymentsV1 < API
      class AdditionalDetails < Data
        def self.new: (detail: String?, type: String?, ?language_code: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails
                    | (String?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails
        def self.[]: (detail: String?, type: String?, ?language_code: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails
                   | (String?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails

        def self.members: () -> [ :detail, :type, :language_code ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails

        attr_reader detail: String?
        attr_reader language_code: String?
        attr_reader type: String?

        def members: () -> [ :detail, :type, :language_code ]
        def to_h: () -> { detail: String?, type: String?, language_code: String? }
      end

      class Address < Data
        def self.new: (address_line1: String?, city: String?, country_code: String?, name: String?, postal_code: String?, state_or_region: String?, ?address_line2: String?, ?address_line3: String?, ?county: String?, ?district: String?, ?phone: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address
                    | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address
        def self.[]: (address_line1: String?, city: String?, country_code: String?, name: String?, postal_code: String?, state_or_region: String?, ?address_line2: String?, ?address_line3: String?, ?county: String?, ?district: String?, ?phone: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address
                   | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address

        def self.members: () -> [ :address_line1, :city, :country_code, :name, :postal_code, :state_or_region, :address_line2, :address_line3, :county, :district, :phone ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address

        attr_reader address_line1: String?
        attr_reader address_line2: String?
        attr_reader address_line3: String?
        attr_reader city: String?
        attr_reader country_code: String?
        attr_reader county: String?
        attr_reader district: String?
        attr_reader name: String?
        attr_reader phone: String?
        attr_reader postal_code: String?
        attr_reader state_or_region: String?

        def members: () -> [ :address_line1, :city, :country_code, :name, :postal_code, :state_or_region, :address_line2, :address_line3, :county, :district, :phone ]
        def to_h: () -> { address_line1: String?, city: String?, country_code: String?, name: String?, postal_code: String?, state_or_region: String?, address_line2: String?, address_line3: String?, county: String?, district: String?, phone: String? }
      end

      class ChargeDetails < Data
        def self.new: (charge_amount: Peddler::Money?, type: String?, ?tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails
                    | (Peddler::Money?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails
        def self.[]: (charge_amount: Peddler::Money?, type: String?, ?tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails
                   | (Peddler::Money?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails

        def self.members: () -> [ :charge_amount, :type, :tax_details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails

        attr_reader charge_amount: Peddler::Money?
        attr_reader tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?
        attr_reader type: String?

        def members: () -> [ :charge_amount, :type, :tax_details ]
        def to_h: () -> { charge_amount: Peddler::Money?, type: String?, tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error
                    | (String?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error
        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error
                   | (String?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?

        def members: () -> [ :code, :message, :details ]
        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class InvoiceDetail < Data
        def self.new: (invoice_date: Time?, invoice_number: String?, invoice_total: Peddler::Money?, items: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem]?, remit_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ship_from_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ?additional_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails]?, ?bill_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ?charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, ?payment_terms_code: String?, ?reference_number: String?, ?ship_to_country_code: String?, ?tax_totals: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail
                    | (Time?, String?, Peddler::Money?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem]?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails]?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, String?, String?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail
        def self.[]: (invoice_date: Time?, invoice_number: String?, invoice_total: Peddler::Money?, items: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem]?, remit_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ship_from_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ?additional_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails]?, ?bill_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ?charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, ?payment_terms_code: String?, ?reference_number: String?, ?ship_to_country_code: String?, ?tax_totals: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail
                   | (Time?, String?, Peddler::Money?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem]?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails]?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, String?, String?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail

        def self.members: () -> [ :invoice_date, :invoice_number, :invoice_total, :items, :remit_to_party, :ship_from_party, :additional_details, :bill_to_party, :charge_details, :payment_terms_code, :reference_number, :ship_to_country_code, :tax_totals ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail

        attr_reader additional_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails]?
        attr_reader bill_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?
        attr_reader charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?
        attr_reader invoice_date: Time?
        attr_reader invoice_number: String?
        attr_reader invoice_total: Peddler::Money?
        attr_reader items: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem]?
        attr_reader payment_terms_code: String?
        attr_reader reference_number: String?
        attr_reader remit_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?
        attr_reader ship_from_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?
        attr_reader ship_to_country_code: String?
        attr_reader tax_totals: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?

        def members: () -> [ :invoice_date, :invoice_number, :invoice_total, :items, :remit_to_party, :ship_from_party, :additional_details, :bill_to_party, :charge_details, :payment_terms_code, :reference_number, :ship_to_country_code, :tax_totals ]
        def to_h: () -> { invoice_date: Time?, invoice_number: String?, invoice_total: Peddler::Money?, items: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem]?, remit_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, ship_from_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, additional_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::AdditionalDetails]?, bill_to_party: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification?, charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, payment_terms_code: String?, reference_number: String?, ship_to_country_code: String?, tax_totals: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]? }
      end

      class InvoiceItem < Data
        def self.new: (invoiced_quantity: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity?, item_sequence_number: String?, net_cost: Peddler::Money?, purchase_order_number: String?, ?buyer_product_identifier: String?, ?charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, ?hsn_code: String?, ?tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?, ?vendor_order_number: String?, ?vendor_product_identifier: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem
                    | (Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity?, String?, Peddler::Money?, String?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem
        def self.[]: (invoiced_quantity: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity?, item_sequence_number: String?, net_cost: Peddler::Money?, purchase_order_number: String?, ?buyer_product_identifier: String?, ?charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, ?hsn_code: String?, ?tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?, ?vendor_order_number: String?, ?vendor_product_identifier: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem
                   | (Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity?, String?, Peddler::Money?, String?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, String?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem

        def self.members: () -> [ :invoiced_quantity, :item_sequence_number, :net_cost, :purchase_order_number, :buyer_product_identifier, :charge_details, :hsn_code, :tax_details, :vendor_order_number, :vendor_product_identifier ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceItem

        attr_reader buyer_product_identifier: String?
        attr_reader charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?
        attr_reader hsn_code: String?
        attr_reader invoiced_quantity: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity?
        attr_reader item_sequence_number: String?
        attr_reader net_cost: Peddler::Money?
        attr_reader purchase_order_number: String?
        attr_reader tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?
        attr_reader vendor_order_number: String?
        attr_reader vendor_product_identifier: String?

        def members: () -> [ :invoiced_quantity, :item_sequence_number, :net_cost, :purchase_order_number, :buyer_product_identifier, :charge_details, :hsn_code, :tax_details, :vendor_order_number, :vendor_product_identifier ]
        def to_h: () -> { invoiced_quantity: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity?, item_sequence_number: String?, net_cost: Peddler::Money?, purchase_order_number: String?, buyer_product_identifier: String?, charge_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ChargeDetails]?, hsn_code: String?, tax_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail]?, vendor_order_number: String?, vendor_product_identifier: String? }
      end

      class ItemQuantity < Data
        def self.new: (amount: Integer?, unit_of_measure: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity
                    | (Integer?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity
        def self.[]: (amount: Integer?, unit_of_measure: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity
                   | (Integer?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity

        def self.members: () -> [ :amount, :unit_of_measure ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::ItemQuantity

        attr_reader amount: Integer?
        attr_reader unit_of_measure: String?

        def members: () -> [ :amount, :unit_of_measure ]
        def to_h: () -> { amount: Integer?, unit_of_measure: String? }
      end

      class PartyIdentification < Data
        def self.new: (party_id: String?, ?address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, ?tax_registration_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification
                    | (String?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification
        def self.[]: (party_id: String?, ?address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, ?tax_registration_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification
                   | (String?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification

        def self.members: () -> [ :party_id, :address, :tax_registration_details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::PartyIdentification

        attr_reader address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?
        attr_reader party_id: String?
        attr_reader tax_registration_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail]?

        def members: () -> [ :party_id, :address, :tax_registration_details ]
        def to_h: () -> { party_id: String?, address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, tax_registration_details: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail]? }
      end

      class SubmitInvoiceRequest < Data
        def self.new: (?invoices: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceRequest
                    | (Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceRequest
        def self.[]: (?invoices: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceRequest
                   | (Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail]?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceRequest

        def self.members: () -> [ :invoices ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceRequest

        attr_reader invoices: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail]?

        def members: () -> [ :invoices ]
        def to_h: () -> { invoices: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::InvoiceDetail]? }
      end

      class SubmitInvoiceResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error]?, ?payload: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceResponse
                    | (Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error]?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceResponse
        def self.[]: (?errors: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error]?, ?payload: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceResponse
                   | (Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error]?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::SubmitInvoiceResponse

        attr_reader errors: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error]?
        attr_reader payload: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference?

        def members: () -> [ :errors, :payload ]
        def to_h: () -> { errors: Array[Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Error]?, payload: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference? }
      end

      class TaxDetail < Data
        def self.new: (tax_amount: Peddler::Money?, tax_type: String?, ?tax_rate: String?, ?taxable_amount: Peddler::Money?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail
                    | (Peddler::Money?, String?, String?, Peddler::Money?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail
        def self.[]: (tax_amount: Peddler::Money?, tax_type: String?, ?tax_rate: String?, ?taxable_amount: Peddler::Money?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail
                   | (Peddler::Money?, String?, String?, Peddler::Money?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail

        def self.members: () -> [ :tax_amount, :tax_type, :tax_rate, :taxable_amount ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxDetail

        attr_reader tax_amount: Peddler::Money?
        attr_reader tax_rate: String?
        attr_reader tax_type: String?
        attr_reader taxable_amount: Peddler::Money?

        def members: () -> [ :tax_amount, :tax_type, :tax_rate, :taxable_amount ]
        def to_h: () -> { tax_amount: Peddler::Money?, tax_type: String?, tax_rate: String?, taxable_amount: Peddler::Money? }
      end

      class TaxRegistrationDetail < Data
        def self.new: (tax_registration_number: String?, ?tax_registration_address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, ?tax_registration_message: String?, ?tax_registration_type: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail
                    | (String?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail
        def self.[]: (tax_registration_number: String?, ?tax_registration_address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, ?tax_registration_message: String?, ?tax_registration_type: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail
                   | (String?, Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, String?, String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail

        def self.members: () -> [ :tax_registration_number, :tax_registration_address, :tax_registration_message, :tax_registration_type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TaxRegistrationDetail

        attr_reader tax_registration_address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?
        attr_reader tax_registration_message: String?
        attr_reader tax_registration_number: String?
        attr_reader tax_registration_type: String?

        def members: () -> [ :tax_registration_number, :tax_registration_address, :tax_registration_message, :tax_registration_type ]
        def to_h: () -> { tax_registration_number: String?, tax_registration_address: Peddler::APIs::VendorDirectFulfillmentPaymentsV1::Address?, tax_registration_message: String?, tax_registration_type: String? }
      end

      class TransactionReference < Data
        def self.new: (?transaction_id: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference
                    | (String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference
        def self.[]: (?transaction_id: String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference
                   | (String?) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference

        def self.members: () -> [ :transaction_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::VendorDirectFulfillmentPaymentsV1::TransactionReference

        attr_reader transaction_id: String?

        def members: () -> [ :transaction_id ]
        def to_h: () -> { transaction_id: String? }
      end

      def submit_invoice: (Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response
    end
  end
end
