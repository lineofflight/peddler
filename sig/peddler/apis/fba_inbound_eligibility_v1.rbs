module Peddler
  module APIs
    class FBAInboundEligibilityV1 < API
      class Error < Data
        def self.new: (code: String?, ?details: String?, ?message: String?) -> Peddler::APIs::FBAInboundEligibilityV1::Error
                    | (String?, String?, String?) -> Peddler::APIs::FBAInboundEligibilityV1::Error

        def self.[]: (code: String?, ?details: String?, ?message: String?) -> Peddler::APIs::FBAInboundEligibilityV1::Error
                   | (String?, String?, String?) -> Peddler::APIs::FBAInboundEligibilityV1::Error

        def self.members: () -> [ :code, :details, :message ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::FBAInboundEligibilityV1::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :details, :message ]

        def to_h: () -> { code: String?, details: String?, message: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class GetItemEligibilityPreviewResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::FBAInboundEligibilityV1::Error]?, ?payload: Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview?) -> Peddler::APIs::FBAInboundEligibilityV1::GetItemEligibilityPreviewResponse
                    | (Array[Peddler::APIs::FBAInboundEligibilityV1::Error]?, Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview?) -> Peddler::APIs::FBAInboundEligibilityV1::GetItemEligibilityPreviewResponse

        def self.[]: (?errors: Array[Peddler::APIs::FBAInboundEligibilityV1::Error]?, ?payload: Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview?) -> Peddler::APIs::FBAInboundEligibilityV1::GetItemEligibilityPreviewResponse
                   | (Array[Peddler::APIs::FBAInboundEligibilityV1::Error]?, Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview?) -> Peddler::APIs::FBAInboundEligibilityV1::GetItemEligibilityPreviewResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::FBAInboundEligibilityV1::GetItemEligibilityPreviewResponse

        attr_reader errors: Array[Peddler::APIs::FBAInboundEligibilityV1::Error]?
        attr_reader payload: Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::FBAInboundEligibilityV1::Error]?, payload: Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview? }
      end

      class ItemEligibilityPreview < Data
        def self.new: (asin: String?, eligible_for_program: bool?, program: String?, ?ineligibility_reason_list: Array[String]?, ?marketplace_id: String?) -> Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview
                    | (String?, bool?, String?, Array[String]?, String?) -> Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview

        def self.[]: (asin: String?, eligible_for_program: bool?, program: String?, ?ineligibility_reason_list: Array[String]?, ?marketplace_id: String?) -> Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview
                   | (String?, bool?, String?, Array[String]?, String?) -> Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview

        def self.members: () -> [ :asin, :eligible_for_program, :program, :ineligibility_reason_list, :marketplace_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::FBAInboundEligibilityV1::ItemEligibilityPreview

        attr_reader asin: String?
        attr_reader eligible_for_program: bool?
        attr_reader ineligibility_reason_list: Array[String]?
        attr_reader marketplace_id: String?
        attr_reader program: String?

        def eligible_for_program?: () -> bool
        def members: () -> [ :asin, :eligible_for_program, :program, :ineligibility_reason_list, :marketplace_id ]

        def to_h: () -> { asin: String?, eligible_for_program: bool?, program: String?, ineligibility_reason_list: Array[String]?, marketplace_id: String? }
      end

      def get_item_eligibility_preview: (String, String, ?marketplace_ids: Array[String]?, ?rate_limit: Float) -> Peddler::Response
    end
  end
end
