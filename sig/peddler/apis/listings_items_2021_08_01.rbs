module Peddler
  module APIs
    class ListingsItems20210801 < API
      class Audience < Data
        def self.new: (?display_name: String?, ?value: String?) -> Peddler::APIs::ListingsItems20210801::Audience
                    | (String?, String?) -> Peddler::APIs::ListingsItems20210801::Audience

        def self.[]: (?display_name: String?, ?value: String?) -> Peddler::APIs::ListingsItems20210801::Audience
                   | (String?, String?) -> Peddler::APIs::ListingsItems20210801::Audience

        def self.members: () -> [ :display_name, :value ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::Audience

        attr_reader display_name: String?
        attr_reader value: String?
        def members: () -> [ :display_name, :value ]

        def to_h: () -> { display_name: String?, value: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ListingsItems20210801::Error
                    | (String?, String?, String?) -> Peddler::APIs::ListingsItems20210801::Error

        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ListingsItems20210801::Error
                   | (String?, String?, String?) -> Peddler::APIs::ListingsItems20210801::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details ]

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Data
        def self.new: (errors: Array[Peddler::APIs::ListingsItems20210801::Error]?) -> Peddler::APIs::ListingsItems20210801::ErrorList
                    | (Array[Peddler::APIs::ListingsItems20210801::Error]?) -> Peddler::APIs::ListingsItems20210801::ErrorList

        def self.[]: (errors: Array[Peddler::APIs::ListingsItems20210801::Error]?) -> Peddler::APIs::ListingsItems20210801::ErrorList
                   | (Array[Peddler::APIs::ListingsItems20210801::Error]?) -> Peddler::APIs::ListingsItems20210801::ErrorList

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ErrorList

        attr_reader errors: Array[Peddler::APIs::ListingsItems20210801::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ListingsItems20210801::Error]? }
      end

      class FulfillmentAvailability < Data
        def self.new: (fulfillment_channel_code: String?, ?quantity: Integer?) -> Peddler::APIs::ListingsItems20210801::FulfillmentAvailability
                    | (String?, Integer?) -> Peddler::APIs::ListingsItems20210801::FulfillmentAvailability

        def self.[]: (fulfillment_channel_code: String?, ?quantity: Integer?) -> Peddler::APIs::ListingsItems20210801::FulfillmentAvailability
                   | (String?, Integer?) -> Peddler::APIs::ListingsItems20210801::FulfillmentAvailability

        def self.members: () -> [ :fulfillment_channel_code, :quantity ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::FulfillmentAvailability

        attr_reader fulfillment_channel_code: String?
        attr_reader quantity: Integer?
        def members: () -> [ :fulfillment_channel_code, :quantity ]

        def to_h: () -> { fulfillment_channel_code: String?, quantity: Integer? }
      end

      class Issue < Data
        def self.new: (categories: Array[String]?, code: String?, message: String?, severity: String?, ?attribute_names: Array[String]?, ?enforcements: Peddler::APIs::ListingsItems20210801::IssueEnforcements?) -> Peddler::APIs::ListingsItems20210801::Issue
                    | (Array[String]?, String?, String?, String?, Array[String]?, Peddler::APIs::ListingsItems20210801::IssueEnforcements?) -> Peddler::APIs::ListingsItems20210801::Issue

        def self.[]: (categories: Array[String]?, code: String?, message: String?, severity: String?, ?attribute_names: Array[String]?, ?enforcements: Peddler::APIs::ListingsItems20210801::IssueEnforcements?) -> Peddler::APIs::ListingsItems20210801::Issue
                   | (Array[String]?, String?, String?, String?, Array[String]?, Peddler::APIs::ListingsItems20210801::IssueEnforcements?) -> Peddler::APIs::ListingsItems20210801::Issue

        def self.members: () -> [ :categories, :code, :message, :severity, :attribute_names, :enforcements ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::Issue

        attr_reader attribute_names: Array[String]?
        attr_reader categories: Array[String]?
        attr_reader code: String?
        attr_reader enforcements: Peddler::APIs::ListingsItems20210801::IssueEnforcements?
        attr_reader message: String?
        attr_reader severity: String?
        def members: () -> [ :categories, :code, :message, :severity, :attribute_names, :enforcements ]

        def to_h: () -> { categories: Array[String]?, code: String?, message: String?, severity: String?, attribute_names: Array[String]?, enforcements: Peddler::APIs::ListingsItems20210801::IssueEnforcements? }
      end

      class IssueEnforcementAction < Data
        def self.new: (action: String?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcementAction
                    | (String?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcementAction

        def self.[]: (action: String?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcementAction
                   | (String?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcementAction

        def self.members: () -> [ :action ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::IssueEnforcementAction

        attr_reader action: String?
        def members: () -> [ :action ]

        def to_h: () -> { action: String? }
      end

      class IssueEnforcements < Data
        def self.new: (actions: Array[Peddler::APIs::ListingsItems20210801::IssueEnforcementAction]?, exemption: Peddler::APIs::ListingsItems20210801::IssueExemption?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcements
                    | (Array[Peddler::APIs::ListingsItems20210801::IssueEnforcementAction]?, Peddler::APIs::ListingsItems20210801::IssueExemption?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcements

        def self.[]: (actions: Array[Peddler::APIs::ListingsItems20210801::IssueEnforcementAction]?, exemption: Peddler::APIs::ListingsItems20210801::IssueExemption?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcements
                   | (Array[Peddler::APIs::ListingsItems20210801::IssueEnforcementAction]?, Peddler::APIs::ListingsItems20210801::IssueExemption?) -> Peddler::APIs::ListingsItems20210801::IssueEnforcements

        def self.members: () -> [ :actions, :exemption ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::IssueEnforcements

        attr_reader actions: Array[Peddler::APIs::ListingsItems20210801::IssueEnforcementAction]?
        attr_reader exemption: Peddler::APIs::ListingsItems20210801::IssueExemption?
        def members: () -> [ :actions, :exemption ]

        def to_h: () -> { actions: Array[Peddler::APIs::ListingsItems20210801::IssueEnforcementAction]?, exemption: Peddler::APIs::ListingsItems20210801::IssueExemption? }
      end

      class IssueExemption < Data
        def self.new: (status: String?, ?expiry_date: Time?) -> Peddler::APIs::ListingsItems20210801::IssueExemption
                    | (String?, Time?) -> Peddler::APIs::ListingsItems20210801::IssueExemption

        def self.[]: (status: String?, ?expiry_date: Time?) -> Peddler::APIs::ListingsItems20210801::IssueExemption
                   | (String?, Time?) -> Peddler::APIs::ListingsItems20210801::IssueExemption

        def self.members: () -> [ :status, :expiry_date ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::IssueExemption

        attr_reader expiry_date: Time?
        attr_reader status: String?
        def members: () -> [ :status, :expiry_date ]

        def to_h: () -> { status: String?, expiry_date: Time? }
      end

      class Item < Data
        def self.new: (sku: String?, ?attributes: Hash[untyped, untyped]?, ?fulfillment_availability: Array[Peddler::APIs::ListingsItems20210801::FulfillmentAvailability]?, ?issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?, ?offers: Array[Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace]?, ?procurement: Array[Peddler::APIs::ListingsItems20210801::ItemProcurement]?, ?product_types: Array[Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace]?, ?relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace]?, ?summaries: Array[Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace]?) -> Peddler::APIs::ListingsItems20210801::Item
                    | (String?, Hash[untyped, untyped]?, Array[Peddler::APIs::ListingsItems20210801::FulfillmentAvailability]?, Array[Peddler::APIs::ListingsItems20210801::Issue]?, Array[Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::ItemProcurement]?, Array[Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace]?) -> Peddler::APIs::ListingsItems20210801::Item

        def self.[]: (sku: String?, ?attributes: Hash[untyped, untyped]?, ?fulfillment_availability: Array[Peddler::APIs::ListingsItems20210801::FulfillmentAvailability]?, ?issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?, ?offers: Array[Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace]?, ?procurement: Array[Peddler::APIs::ListingsItems20210801::ItemProcurement]?, ?product_types: Array[Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace]?, ?relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace]?, ?summaries: Array[Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace]?) -> Peddler::APIs::ListingsItems20210801::Item
                   | (String?, Hash[untyped, untyped]?, Array[Peddler::APIs::ListingsItems20210801::FulfillmentAvailability]?, Array[Peddler::APIs::ListingsItems20210801::Issue]?, Array[Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::ItemProcurement]?, Array[Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace]?) -> Peddler::APIs::ListingsItems20210801::Item

        def self.members: () -> [ :sku, :attributes, :fulfillment_availability, :issues, :offers, :procurement, :product_types, :relationships, :summaries ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::Item

        attr_reader attributes: Hash[untyped, untyped]?
        attr_reader fulfillment_availability: Array[Peddler::APIs::ListingsItems20210801::FulfillmentAvailability]?
        attr_reader issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?
        attr_reader offers: Array[Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace]?
        attr_reader procurement: Array[Peddler::APIs::ListingsItems20210801::ItemProcurement]?
        attr_reader product_types: Array[Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace]?
        attr_reader relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace]?
        attr_reader sku: String?
        attr_reader summaries: Array[Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace]?
        def members: () -> [ :sku, :attributes, :fulfillment_availability, :issues, :offers, :procurement, :product_types, :relationships, :summaries ]

        def to_h: () -> { sku: String?, attributes: Hash[untyped, untyped]?, fulfillment_availability: Array[Peddler::APIs::ListingsItems20210801::FulfillmentAvailability]?, issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?, offers: Array[Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace]?, procurement: Array[Peddler::APIs::ListingsItems20210801::ItemProcurement]?, product_types: Array[Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace]?, relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace]?, summaries: Array[Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace]? }
      end

      class ItemIdentifiers < Array[ItemIdentifiersByMarketplace]
        def self.parse: (Array[untyped]) -> ItemIdentifiers
      end

      class ItemIdentifiersByMarketplace < Data
        def self.new: (?asin: String?, ?marketplace_id: String?) -> Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace
                    | (String?, String?) -> Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace

        def self.[]: (?asin: String?, ?marketplace_id: String?) -> Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace
                   | (String?, String?) -> Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace

        def self.members: () -> [ :asin, :marketplace_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace

        attr_reader asin: String?
        attr_reader marketplace_id: String?
        def members: () -> [ :asin, :marketplace_id ]

        def to_h: () -> { asin: String?, marketplace_id: String? }
      end

      class ItemImage < Data
        def self.new: (height: Integer?, link: String?, width: Integer?) -> Peddler::APIs::ListingsItems20210801::ItemImage
                    | (Integer?, String?, Integer?) -> Peddler::APIs::ListingsItems20210801::ItemImage

        def self.[]: (height: Integer?, link: String?, width: Integer?) -> Peddler::APIs::ListingsItems20210801::ItemImage
                   | (Integer?, String?, Integer?) -> Peddler::APIs::ListingsItems20210801::ItemImage

        def self.members: () -> [ :height, :link, :width ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemImage

        attr_reader height: Integer?
        attr_reader link: String?
        attr_reader width: Integer?
        def members: () -> [ :height, :link, :width ]

        def to_h: () -> { height: Integer?, link: String?, width: Integer? }
      end

      class ItemIssues < Array[Issue]
        def self.parse: (Array[untyped]) -> ItemIssues
      end

      class ItemOfferByMarketplace < Data
        def self.new: (marketplace_id: String?, offer_type: String?, price: Peddler::Money?, ?audience: Peddler::APIs::ListingsItems20210801::Audience?, ?points: Peddler::APIs::ListingsItems20210801::Points?) -> Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace
                    | (String?, String?, Peddler::Money?, Peddler::APIs::ListingsItems20210801::Audience?, Peddler::APIs::ListingsItems20210801::Points?) -> Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace

        def self.[]: (marketplace_id: String?, offer_type: String?, price: Peddler::Money?, ?audience: Peddler::APIs::ListingsItems20210801::Audience?, ?points: Peddler::APIs::ListingsItems20210801::Points?) -> Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace
                   | (String?, String?, Peddler::Money?, Peddler::APIs::ListingsItems20210801::Audience?, Peddler::APIs::ListingsItems20210801::Points?) -> Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace

        def self.members: () -> [ :marketplace_id, :offer_type, :price, :audience, :points ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemOfferByMarketplace

        attr_reader audience: Peddler::APIs::ListingsItems20210801::Audience?
        attr_reader marketplace_id: String?
        attr_reader offer_type: String?
        attr_reader points: Peddler::APIs::ListingsItems20210801::Points?
        attr_reader price: Peddler::Money?
        def members: () -> [ :marketplace_id, :offer_type, :price, :audience, :points ]

        def to_h: () -> { marketplace_id: String?, offer_type: String?, price: Peddler::Money?, audience: Peddler::APIs::ListingsItems20210801::Audience?, points: Peddler::APIs::ListingsItems20210801::Points? }
      end

      class ItemOffers < Array[ItemOfferByMarketplace]
        def self.parse: (Array[untyped]) -> ItemOffers
      end

      class ItemProcurement < Data
        def self.new: (cost_price: Peddler::Money?) -> Peddler::APIs::ListingsItems20210801::ItemProcurement
                    | (Peddler::Money?) -> Peddler::APIs::ListingsItems20210801::ItemProcurement

        def self.[]: (cost_price: Peddler::Money?) -> Peddler::APIs::ListingsItems20210801::ItemProcurement
                   | (Peddler::Money?) -> Peddler::APIs::ListingsItems20210801::ItemProcurement

        def self.members: () -> [ :cost_price ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemProcurement

        attr_reader cost_price: Peddler::Money?
        def members: () -> [ :cost_price ]

        def to_h: () -> { cost_price: Peddler::Money? }
      end

      class ItemProductTypeByMarketplace < Data
        def self.new: (marketplace_id: String?, product_type: String?) -> Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace
                    | (String?, String?) -> Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace

        def self.[]: (marketplace_id: String?, product_type: String?) -> Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace
                   | (String?, String?) -> Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace

        def self.members: () -> [ :marketplace_id, :product_type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemProductTypeByMarketplace

        attr_reader marketplace_id: String?
        attr_reader product_type: String?
        def members: () -> [ :marketplace_id, :product_type ]

        def to_h: () -> { marketplace_id: String?, product_type: String? }
      end

      class ItemProductTypes < Array[ItemProductTypeByMarketplace]
        def self.parse: (Array[untyped]) -> ItemProductTypes
      end

      class ItemRelationship < Data
        def self.new: (type: String?, ?child_skus: Array[String]?, ?parent_skus: Array[String]?, ?variation_theme: Peddler::APIs::ListingsItems20210801::ItemVariationTheme?) -> Peddler::APIs::ListingsItems20210801::ItemRelationship
                    | (String?, Array[String]?, Array[String]?, Peddler::APIs::ListingsItems20210801::ItemVariationTheme?) -> Peddler::APIs::ListingsItems20210801::ItemRelationship

        def self.[]: (type: String?, ?child_skus: Array[String]?, ?parent_skus: Array[String]?, ?variation_theme: Peddler::APIs::ListingsItems20210801::ItemVariationTheme?) -> Peddler::APIs::ListingsItems20210801::ItemRelationship
                   | (String?, Array[String]?, Array[String]?, Peddler::APIs::ListingsItems20210801::ItemVariationTheme?) -> Peddler::APIs::ListingsItems20210801::ItemRelationship

        def self.members: () -> [ :type, :child_skus, :parent_skus, :variation_theme ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemRelationship

        attr_reader child_skus: Array[String]?
        attr_reader parent_skus: Array[String]?
        attr_reader type: String?
        attr_reader variation_theme: Peddler::APIs::ListingsItems20210801::ItemVariationTheme?
        def members: () -> [ :type, :child_skus, :parent_skus, :variation_theme ]

        def to_h: () -> { type: String?, child_skus: Array[String]?, parent_skus: Array[String]?, variation_theme: Peddler::APIs::ListingsItems20210801::ItemVariationTheme? }
      end

      class ItemRelationships < Array[ItemRelationshipsByMarketplace]
        def self.parse: (Array[untyped]) -> ItemRelationships
      end

      class ItemRelationshipsByMarketplace < Data
        def self.new: (marketplace_id: String?, relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationship]?) -> Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace
                    | (String?, Array[Peddler::APIs::ListingsItems20210801::ItemRelationship]?) -> Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace

        def self.[]: (marketplace_id: String?, relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationship]?) -> Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace
                   | (String?, Array[Peddler::APIs::ListingsItems20210801::ItemRelationship]?) -> Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace

        def self.members: () -> [ :marketplace_id, :relationships ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemRelationshipsByMarketplace

        attr_reader marketplace_id: String?
        attr_reader relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationship]?
        def members: () -> [ :marketplace_id, :relationships ]

        def to_h: () -> { marketplace_id: String?, relationships: Array[Peddler::APIs::ListingsItems20210801::ItemRelationship]? }
      end

      class ItemSearchResults < Data
        def self.new: (items: Array[Peddler::APIs::ListingsItems20210801::Item]?, number_of_results: Integer?, ?pagination: Peddler::APIs::ListingsItems20210801::Pagination?) -> Peddler::APIs::ListingsItems20210801::ItemSearchResults
                    | (Array[Peddler::APIs::ListingsItems20210801::Item]?, Integer?, Peddler::APIs::ListingsItems20210801::Pagination?) -> Peddler::APIs::ListingsItems20210801::ItemSearchResults

        def self.[]: (items: Array[Peddler::APIs::ListingsItems20210801::Item]?, number_of_results: Integer?, ?pagination: Peddler::APIs::ListingsItems20210801::Pagination?) -> Peddler::APIs::ListingsItems20210801::ItemSearchResults
                   | (Array[Peddler::APIs::ListingsItems20210801::Item]?, Integer?, Peddler::APIs::ListingsItems20210801::Pagination?) -> Peddler::APIs::ListingsItems20210801::ItemSearchResults

        def self.members: () -> [ :items, :number_of_results, :pagination ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemSearchResults

        attr_reader items: Array[Peddler::APIs::ListingsItems20210801::Item]?
        attr_reader number_of_results: Integer?
        attr_reader pagination: Peddler::APIs::ListingsItems20210801::Pagination?
        def members: () -> [ :items, :number_of_results, :pagination ]

        def to_h: () -> { items: Array[Peddler::APIs::ListingsItems20210801::Item]?, number_of_results: Integer?, pagination: Peddler::APIs::ListingsItems20210801::Pagination? }
      end

      class ItemSummaries < Array[ItemSummaryByMarketplace]
        def self.parse: (Array[untyped]) -> ItemSummaries
      end

      class ItemSummaryByMarketplace < Data
        def self.new: (created_date: Time?, last_updated_date: Time?, marketplace_id: String?, product_type: String?, status: Array[String]?, ?asin: String?, ?condition_type: String?, ?fn_sku: String?, ?item_name: String?, ?main_image: Peddler::APIs::ListingsItems20210801::ItemImage?) -> Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace
                    | (Time?, Time?, String?, String?, Array[String]?, String?, String?, String?, String?, Peddler::APIs::ListingsItems20210801::ItemImage?) -> Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace

        def self.[]: (created_date: Time?, last_updated_date: Time?, marketplace_id: String?, product_type: String?, status: Array[String]?, ?asin: String?, ?condition_type: String?, ?fn_sku: String?, ?item_name: String?, ?main_image: Peddler::APIs::ListingsItems20210801::ItemImage?) -> Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace
                   | (Time?, Time?, String?, String?, Array[String]?, String?, String?, String?, String?, Peddler::APIs::ListingsItems20210801::ItemImage?) -> Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace

        def self.members: () -> [ :created_date, :last_updated_date, :marketplace_id, :product_type, :status, :asin, :condition_type, :fn_sku, :item_name, :main_image ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemSummaryByMarketplace

        attr_reader asin: String?
        attr_reader condition_type: String?
        attr_reader created_date: Time?
        attr_reader fn_sku: String?
        attr_reader item_name: String?
        attr_reader last_updated_date: Time?
        attr_reader main_image: Peddler::APIs::ListingsItems20210801::ItemImage?
        attr_reader marketplace_id: String?
        attr_reader product_type: String?
        attr_reader status: Array[String]?
        def members: () -> [ :created_date, :last_updated_date, :marketplace_id, :product_type, :status, :asin, :condition_type, :fn_sku, :item_name, :main_image ]

        def to_h: () -> { created_date: Time?, last_updated_date: Time?, marketplace_id: String?, product_type: String?, status: Array[String]?, asin: String?, condition_type: String?, fn_sku: String?, item_name: String?, main_image: Peddler::APIs::ListingsItems20210801::ItemImage? }
      end

      class ItemVariationTheme < Data
        def self.new: (attributes: Array[String]?, theme: String?) -> Peddler::APIs::ListingsItems20210801::ItemVariationTheme
                    | (Array[String]?, String?) -> Peddler::APIs::ListingsItems20210801::ItemVariationTheme

        def self.[]: (attributes: Array[String]?, theme: String?) -> Peddler::APIs::ListingsItems20210801::ItemVariationTheme
                   | (Array[String]?, String?) -> Peddler::APIs::ListingsItems20210801::ItemVariationTheme

        def self.members: () -> [ :attributes, :theme ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ItemVariationTheme

        attr_reader attributes: Array[String]?
        attr_reader theme: String?
        def members: () -> [ :attributes, :theme ]

        def to_h: () -> { attributes: Array[String]?, theme: String? }
      end

      class ListingsItemPatchRequest < Data
        def self.new: (patches: Array[Peddler::APIs::ListingsItems20210801::PatchOperation]?, product_type: String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPatchRequest
                    | (Array[Peddler::APIs::ListingsItems20210801::PatchOperation]?, String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPatchRequest

        def self.[]: (patches: Array[Peddler::APIs::ListingsItems20210801::PatchOperation]?, product_type: String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPatchRequest
                   | (Array[Peddler::APIs::ListingsItems20210801::PatchOperation]?, String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPatchRequest

        def self.members: () -> [ :patches, :product_type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ListingsItemPatchRequest

        attr_reader patches: Array[Peddler::APIs::ListingsItems20210801::PatchOperation]?
        attr_reader product_type: String?
        def members: () -> [ :patches, :product_type ]

        def to_h: () -> { patches: Array[Peddler::APIs::ListingsItems20210801::PatchOperation]?, product_type: String? }
      end

      class ListingsItemPutRequest < Data
        def self.new: (attributes: Hash[untyped, untyped]?, product_type: String?, ?requirements: String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPutRequest
                    | (Hash[untyped, untyped]?, String?, String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPutRequest

        def self.[]: (attributes: Hash[untyped, untyped]?, product_type: String?, ?requirements: String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPutRequest
                   | (Hash[untyped, untyped]?, String?, String?) -> Peddler::APIs::ListingsItems20210801::ListingsItemPutRequest

        def self.members: () -> [ :attributes, :product_type, :requirements ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ListingsItemPutRequest

        attr_reader attributes: Hash[untyped, untyped]?
        attr_reader product_type: String?
        attr_reader requirements: String?
        def members: () -> [ :attributes, :product_type, :requirements ]

        def to_h: () -> { attributes: Hash[untyped, untyped]?, product_type: String?, requirements: String? }
      end

      class ListingsItemSubmissionResponse < Data
        def self.new: (sku: String?, status: String?, submission_id: String?, ?identifiers: Array[Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace]?, ?issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?) -> Peddler::APIs::ListingsItems20210801::ListingsItemSubmissionResponse
                    | (String?, String?, String?, Array[Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::Issue]?) -> Peddler::APIs::ListingsItems20210801::ListingsItemSubmissionResponse

        def self.[]: (sku: String?, status: String?, submission_id: String?, ?identifiers: Array[Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace]?, ?issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?) -> Peddler::APIs::ListingsItems20210801::ListingsItemSubmissionResponse
                   | (String?, String?, String?, Array[Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace]?, Array[Peddler::APIs::ListingsItems20210801::Issue]?) -> Peddler::APIs::ListingsItems20210801::ListingsItemSubmissionResponse

        def self.members: () -> [ :sku, :status, :submission_id, :identifiers, :issues ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::ListingsItemSubmissionResponse

        attr_reader identifiers: Array[Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace]?
        attr_reader issues: Array[Peddler::APIs::ListingsItems20210801::Issue]?
        attr_reader sku: String?
        attr_reader status: String?
        attr_reader submission_id: String?
        def members: () -> [ :sku, :status, :submission_id, :identifiers, :issues ]

        def to_h: () -> { sku: String?, status: String?, submission_id: String?, identifiers: Array[Peddler::APIs::ListingsItems20210801::ItemIdentifiersByMarketplace]?, issues: Array[Peddler::APIs::ListingsItems20210801::Issue]? }
      end

      class Pagination < Data
        def self.new: (?next_token: String?, ?previous_token: String?) -> Peddler::APIs::ListingsItems20210801::Pagination
                    | (String?, String?) -> Peddler::APIs::ListingsItems20210801::Pagination

        def self.[]: (?next_token: String?, ?previous_token: String?) -> Peddler::APIs::ListingsItems20210801::Pagination
                   | (String?, String?) -> Peddler::APIs::ListingsItems20210801::Pagination

        def self.members: () -> [ :next_token, :previous_token ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::Pagination

        attr_reader next_token: String?
        attr_reader previous_token: String?
        def members: () -> [ :next_token, :previous_token ]

        def to_h: () -> { next_token: String?, previous_token: String? }
      end

      class PatchOperation < Data
        def self.new: (op: String?, path: String?, ?value: Array[untyped]?) -> Peddler::APIs::ListingsItems20210801::PatchOperation
                    | (String?, String?, Array[untyped]?) -> Peddler::APIs::ListingsItems20210801::PatchOperation

        def self.[]: (op: String?, path: String?, ?value: Array[untyped]?) -> Peddler::APIs::ListingsItems20210801::PatchOperation
                   | (String?, String?, Array[untyped]?) -> Peddler::APIs::ListingsItems20210801::PatchOperation

        def self.members: () -> [ :op, :path, :value ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::PatchOperation

        attr_reader op: String?
        attr_reader path: String?
        attr_reader value: Array[untyped]?
        def members: () -> [ :op, :path, :value ]

        def to_h: () -> { op: String?, path: String?, value: Array[untyped]? }
      end

      class Points < Data
        def self.new: (points_number: Integer?) -> Peddler::APIs::ListingsItems20210801::Points
                    | (Integer?) -> Peddler::APIs::ListingsItems20210801::Points

        def self.[]: (points_number: Integer?) -> Peddler::APIs::ListingsItems20210801::Points
                   | (Integer?) -> Peddler::APIs::ListingsItems20210801::Points

        def self.members: () -> [ :points_number ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ListingsItems20210801::Points

        attr_reader points_number: Integer?
        def members: () -> [ :points_number ]

        def to_h: () -> { points_number: Integer? }
      end

      def delete_listings_item: (String, String, Array[String], ?issue_locale: String?, ?rate_limit: Float) -> Peddler::Response
      def get_listings_item: (String, String, Array[String], ?issue_locale: String?, ?included_data: Array[String]?, ?rate_limit: Float) -> Peddler::Response
      def patch_listings_item: (String, String, Array[String], Hash[untyped, untyped], ?included_data: Array[String]?, ?mode: String?, ?issue_locale: String?, ?rate_limit: Float) -> Peddler::Response
      def put_listings_item: (String, String, Array[String], Hash[untyped, untyped], ?included_data: Array[String]?, ?mode: String?, ?issue_locale: String?, ?rate_limit: Float) -> Peddler::Response
      def search_listings_items: (String, Array[String], ?issue_locale: String?, ?included_data: Array[String]?, ?identifiers: Array[String]?, ?identifiers_type: String?, ?variation_parent_sku: String?, ?package_hierarchy_sku: String?, ?created_after: String?, ?created_before: String?, ?last_updated_after: String?, ?last_updated_before: String?, ?with_issue_severity: Array[String]?, ?with_status: Array[String]?, ?without_status: Array[String]?, ?sort_by: String?, ?sort_order: String?, ?page_size: Integer?, ?page_token: String?, ?rate_limit: Float) -> Peddler::Response
    end
  end
end
