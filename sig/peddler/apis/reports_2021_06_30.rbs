module Peddler
  module APIs
    class Reports20210630 < API
      class CreateReportResponse < Data
        def self.new: (report_id: String?) -> Peddler::APIs::Reports20210630::CreateReportResponse
                    | (String?) -> Peddler::APIs::Reports20210630::CreateReportResponse

        def self.[]: (report_id: String?) -> Peddler::APIs::Reports20210630::CreateReportResponse
                   | (String?) -> Peddler::APIs::Reports20210630::CreateReportResponse

        def self.members: () -> [ :report_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::CreateReportResponse

        attr_reader report_id: String?
        def members: () -> [ :report_id ]

        def to_h: () -> { report_id: String? }
      end

      class CreateReportScheduleResponse < Data
        def self.new: (report_schedule_id: String?) -> Peddler::APIs::Reports20210630::CreateReportScheduleResponse
                    | (String?) -> Peddler::APIs::Reports20210630::CreateReportScheduleResponse

        def self.[]: (report_schedule_id: String?) -> Peddler::APIs::Reports20210630::CreateReportScheduleResponse
                   | (String?) -> Peddler::APIs::Reports20210630::CreateReportScheduleResponse

        def self.members: () -> [ :report_schedule_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::CreateReportScheduleResponse

        attr_reader report_schedule_id: String?
        def members: () -> [ :report_schedule_id ]

        def to_h: () -> { report_schedule_id: String? }
      end

      class CreateReportScheduleSpecification < Data
        def self.new: (marketplace_ids: Array[String]?, period: String?, report_type: String?, ?next_report_creation_time: Time?, ?report_options: Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportScheduleSpecification
                    | (Array[String]?, String?, String?, Time?, Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportScheduleSpecification

        def self.[]: (marketplace_ids: Array[String]?, period: String?, report_type: String?, ?next_report_creation_time: Time?, ?report_options: Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportScheduleSpecification
                   | (Array[String]?, String?, String?, Time?, Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportScheduleSpecification

        def self.members: () -> [ :marketplace_ids, :period, :report_type, :next_report_creation_time, :report_options ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::CreateReportScheduleSpecification

        attr_reader marketplace_ids: Array[String]?
        attr_reader next_report_creation_time: Time?
        attr_reader period: String?
        attr_reader report_options: Hash[untyped, untyped]?
        attr_reader report_type: String?
        def members: () -> [ :marketplace_ids, :period, :report_type, :next_report_creation_time, :report_options ]

        def to_h: () -> { marketplace_ids: Array[String]?, period: String?, report_type: String?, next_report_creation_time: Time?, report_options: Hash[untyped, untyped]? }
      end

      class CreateReportSpecification < Data
        def self.new: (marketplace_ids: Array[String]?, report_type: String?, ?data_end_time: Time?, ?data_start_time: Time?, ?report_options: Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportSpecification
                    | (Array[String]?, String?, Time?, Time?, Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportSpecification

        def self.[]: (marketplace_ids: Array[String]?, report_type: String?, ?data_end_time: Time?, ?data_start_time: Time?, ?report_options: Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportSpecification
                   | (Array[String]?, String?, Time?, Time?, Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::CreateReportSpecification

        def self.members: () -> [ :marketplace_ids, :report_type, :data_end_time, :data_start_time, :report_options ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::CreateReportSpecification

        attr_reader data_end_time: Time?
        attr_reader data_start_time: Time?
        attr_reader marketplace_ids: Array[String]?
        attr_reader report_options: Hash[untyped, untyped]?
        attr_reader report_type: String?
        def members: () -> [ :marketplace_ids, :report_type, :data_end_time, :data_start_time, :report_options ]

        def to_h: () -> { marketplace_ids: Array[String]?, report_type: String?, data_end_time: Time?, data_start_time: Time?, report_options: Hash[untyped, untyped]? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::Reports20210630::Error
                    | (String?, String?, String?) -> Peddler::APIs::Reports20210630::Error

        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::Reports20210630::Error
                   | (String?, String?, String?) -> Peddler::APIs::Reports20210630::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details ]

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Data
        def self.new: (errors: Array[Peddler::APIs::Reports20210630::Error]?) -> Peddler::APIs::Reports20210630::ErrorList
                    | (Array[Peddler::APIs::Reports20210630::Error]?) -> Peddler::APIs::Reports20210630::ErrorList

        def self.[]: (errors: Array[Peddler::APIs::Reports20210630::Error]?) -> Peddler::APIs::Reports20210630::ErrorList
                   | (Array[Peddler::APIs::Reports20210630::Error]?) -> Peddler::APIs::Reports20210630::ErrorList

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::ErrorList

        attr_reader errors: Array[Peddler::APIs::Reports20210630::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::Reports20210630::Error]? }
      end

      class GetReportsResponse < Data
        def self.new: (reports: Array[Peddler::APIs::Reports20210630::Report]?, ?next_token: String?) -> Peddler::APIs::Reports20210630::GetReportsResponse
                    | (Array[Peddler::APIs::Reports20210630::Report]?, String?) -> Peddler::APIs::Reports20210630::GetReportsResponse

        def self.[]: (reports: Array[Peddler::APIs::Reports20210630::Report]?, ?next_token: String?) -> Peddler::APIs::Reports20210630::GetReportsResponse
                   | (Array[Peddler::APIs::Reports20210630::Report]?, String?) -> Peddler::APIs::Reports20210630::GetReportsResponse

        def self.members: () -> [ :reports, :next_token ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::GetReportsResponse

        attr_reader next_token: String?
        attr_reader reports: Array[Peddler::APIs::Reports20210630::Report]?
        def members: () -> [ :reports, :next_token ]

        def to_h: () -> { reports: Array[Peddler::APIs::Reports20210630::Report]?, next_token: String? }
      end

      class Report < Data
        def self.new: (created_time: Time?, processing_status: String?, report_id: String?, report_type: String?, ?data_end_time: Time?, ?data_start_time: Time?, ?marketplace_ids: Array[String]?, ?processing_end_time: Time?, ?processing_start_time: Time?, ?report_document_id: String?, ?report_schedule_id: String?) -> Peddler::APIs::Reports20210630::Report
                    | (Time?, String?, String?, String?, Time?, Time?, Array[String]?, Time?, Time?, String?, String?) -> Peddler::APIs::Reports20210630::Report

        def self.[]: (created_time: Time?, processing_status: String?, report_id: String?, report_type: String?, ?data_end_time: Time?, ?data_start_time: Time?, ?marketplace_ids: Array[String]?, ?processing_end_time: Time?, ?processing_start_time: Time?, ?report_document_id: String?, ?report_schedule_id: String?) -> Peddler::APIs::Reports20210630::Report
                   | (Time?, String?, String?, String?, Time?, Time?, Array[String]?, Time?, Time?, String?, String?) -> Peddler::APIs::Reports20210630::Report

        def self.members: () -> [ :created_time, :processing_status, :report_id, :report_type, :data_end_time, :data_start_time, :marketplace_ids, :processing_end_time, :processing_start_time, :report_document_id, :report_schedule_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::Report

        attr_reader created_time: Time?
        attr_reader data_end_time: Time?
        attr_reader data_start_time: Time?
        attr_reader marketplace_ids: Array[String]?
        attr_reader processing_end_time: Time?
        attr_reader processing_start_time: Time?
        attr_reader processing_status: String?
        attr_reader report_document_id: String?
        attr_reader report_id: String?
        attr_reader report_schedule_id: String?
        attr_reader report_type: String?
        def members: () -> [ :created_time, :processing_status, :report_id, :report_type, :data_end_time, :data_start_time, :marketplace_ids, :processing_end_time, :processing_start_time, :report_document_id, :report_schedule_id ]

        def to_h: () -> { created_time: Time?, processing_status: String?, report_id: String?, report_type: String?, data_end_time: Time?, data_start_time: Time?, marketplace_ids: Array[String]?, processing_end_time: Time?, processing_start_time: Time?, report_document_id: String?, report_schedule_id: String? }
      end

      class ReportDocument < Data
        def self.new: (report_document_id: String?, url: String?, ?compression_algorithm: String?) -> Peddler::APIs::Reports20210630::ReportDocument
                    | (String?, String?, String?) -> Peddler::APIs::Reports20210630::ReportDocument

        def self.[]: (report_document_id: String?, url: String?, ?compression_algorithm: String?) -> Peddler::APIs::Reports20210630::ReportDocument
                   | (String?, String?, String?) -> Peddler::APIs::Reports20210630::ReportDocument

        def self.members: () -> [ :report_document_id, :url, :compression_algorithm ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::ReportDocument

        attr_reader compression_algorithm: String?
        attr_reader report_document_id: String?
        attr_reader url: String?
        def members: () -> [ :report_document_id, :url, :compression_algorithm ]

        def to_h: () -> { report_document_id: String?, url: String?, compression_algorithm: String? }
      end

      class ReportList < Array[Report]
        def self.parse: (Array[untyped]) -> ReportList
      end

      class ReportSchedule < Data
        def self.new: (period: String?, report_schedule_id: String?, report_type: String?, ?marketplace_ids: Array[String]?, ?next_report_creation_time: Time?, ?report_options: Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::ReportSchedule
                    | (String?, String?, String?, Array[String]?, Time?, Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::ReportSchedule

        def self.[]: (period: String?, report_schedule_id: String?, report_type: String?, ?marketplace_ids: Array[String]?, ?next_report_creation_time: Time?, ?report_options: Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::ReportSchedule
                   | (String?, String?, String?, Array[String]?, Time?, Hash[untyped, untyped]?) -> Peddler::APIs::Reports20210630::ReportSchedule

        def self.members: () -> [ :period, :report_schedule_id, :report_type, :marketplace_ids, :next_report_creation_time, :report_options ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::ReportSchedule

        attr_reader marketplace_ids: Array[String]?
        attr_reader next_report_creation_time: Time?
        attr_reader period: String?
        attr_reader report_options: Hash[untyped, untyped]?
        attr_reader report_schedule_id: String?
        attr_reader report_type: String?
        def members: () -> [ :period, :report_schedule_id, :report_type, :marketplace_ids, :next_report_creation_time, :report_options ]

        def to_h: () -> { period: String?, report_schedule_id: String?, report_type: String?, marketplace_ids: Array[String]?, next_report_creation_time: Time?, report_options: Hash[untyped, untyped]? }
      end

      class ReportScheduleList < Data
        def self.new: (report_schedules: Array[Peddler::APIs::Reports20210630::ReportSchedule]?) -> Peddler::APIs::Reports20210630::ReportScheduleList
                    | (Array[Peddler::APIs::Reports20210630::ReportSchedule]?) -> Peddler::APIs::Reports20210630::ReportScheduleList

        def self.[]: (report_schedules: Array[Peddler::APIs::Reports20210630::ReportSchedule]?) -> Peddler::APIs::Reports20210630::ReportScheduleList
                   | (Array[Peddler::APIs::Reports20210630::ReportSchedule]?) -> Peddler::APIs::Reports20210630::ReportScheduleList

        def self.members: () -> [ :report_schedules ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::Reports20210630::ReportScheduleList

        attr_reader report_schedules: Array[Peddler::APIs::Reports20210630::ReportSchedule]?
        def members: () -> [ :report_schedules ]

        def to_h: () -> { report_schedules: Array[Peddler::APIs::Reports20210630::ReportSchedule]? }
      end

      def cancel_report: (String, ?rate_limit: Float) -> Peddler::Response

      def cancel_report_schedule: (String, ?rate_limit: Float) -> Peddler::Response
      def create_report: (Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response

      def create_report_schedule: (Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response
      def get_report: (String, ?rate_limit: Float) -> Peddler::Response

      def get_report_document: (String, ?rate_limit: Float) -> Peddler::Response
      def get_report_schedule: (String, ?rate_limit: Float) -> Peddler::Response
      def get_report_schedules: (Array[String], ?rate_limit: Float) -> Peddler::Response
      def get_reports: (?report_types: Array[String]?, ?processing_statuses: Array[String]?, ?marketplace_ids: Array[String]?, ?page_size: Integer?, ?created_since: String?, ?created_until: String?, ?next_token: String?, ?rate_limit: Float) -> Peddler::Response
    end
  end
end
