module Peddler
  module APIs
    class ProductFeesV0 < API
      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ProductFeesV0::Error
                    | (String?, String?, String?) -> Peddler::APIs::ProductFeesV0::Error
        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ProductFeesV0::Error
                   | (String?, String?, String?) -> Peddler::APIs::ProductFeesV0::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?

        def members: () -> [ :code, :message, :details ]
        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class FeeDetail < Data
        def self.new: (fee_amount: Peddler::Money?, fee_type: String?, final_fee: Peddler::Money?, ?fee_promotion: Peddler::Money?, ?included_fee_detail_list: Array[Peddler::APIs::ProductFeesV0::IncludedFeeDetail]?, ?tax_amount: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeeDetail
                    | (Peddler::Money?, String?, Peddler::Money?, Peddler::Money?, Array[Peddler::APIs::ProductFeesV0::IncludedFeeDetail]?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeeDetail
        def self.[]: (fee_amount: Peddler::Money?, fee_type: String?, final_fee: Peddler::Money?, ?fee_promotion: Peddler::Money?, ?included_fee_detail_list: Array[Peddler::APIs::ProductFeesV0::IncludedFeeDetail]?, ?tax_amount: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeeDetail
                   | (Peddler::Money?, String?, Peddler::Money?, Peddler::Money?, Array[Peddler::APIs::ProductFeesV0::IncludedFeeDetail]?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeeDetail

        def self.members: () -> [ :fee_amount, :fee_type, :final_fee, :fee_promotion, :included_fee_detail_list, :tax_amount ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeeDetail

        attr_reader fee_amount: Peddler::Money?
        attr_reader fee_promotion: Peddler::Money?
        attr_reader fee_type: String?
        attr_reader final_fee: Peddler::Money?
        attr_reader included_fee_detail_list: Array[Peddler::APIs::ProductFeesV0::IncludedFeeDetail]?
        attr_reader tax_amount: Peddler::Money?

        def members: () -> [ :fee_amount, :fee_type, :final_fee, :fee_promotion, :included_fee_detail_list, :tax_amount ]
        def to_h: () -> { fee_amount: Peddler::Money?, fee_type: String?, final_fee: Peddler::Money?, fee_promotion: Peddler::Money?, included_fee_detail_list: Array[Peddler::APIs::ProductFeesV0::IncludedFeeDetail]?, tax_amount: Peddler::Money? }
      end

      class FeeDetailList < Array[FeeDetail]
        def self.parse: (Array[untyped]) -> FeeDetailList
      end

      class FeesEstimate < Data
        def self.new: (time_of_fees_estimation: Time?, ?fee_detail_list: Array[Peddler::APIs::ProductFeesV0::FeeDetail]?, ?total_fees_estimate: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeesEstimate
                    | (Time?, Array[Peddler::APIs::ProductFeesV0::FeeDetail]?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeesEstimate
        def self.[]: (time_of_fees_estimation: Time?, ?fee_detail_list: Array[Peddler::APIs::ProductFeesV0::FeeDetail]?, ?total_fees_estimate: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeesEstimate
                   | (Time?, Array[Peddler::APIs::ProductFeesV0::FeeDetail]?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::FeesEstimate

        def self.members: () -> [ :time_of_fees_estimation, :fee_detail_list, :total_fees_estimate ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeesEstimate

        attr_reader fee_detail_list: Array[Peddler::APIs::ProductFeesV0::FeeDetail]?
        attr_reader time_of_fees_estimation: Time?
        attr_reader total_fees_estimate: Peddler::Money?

        def members: () -> [ :time_of_fees_estimation, :fee_detail_list, :total_fees_estimate ]
        def to_h: () -> { time_of_fees_estimation: Time?, fee_detail_list: Array[Peddler::APIs::ProductFeesV0::FeeDetail]?, total_fees_estimate: Peddler::Money? }
      end

      class FeesEstimateByIdRequest < Data
        def self.new: (id_type: String?, id_value: String?, ?fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::FeesEstimateByIdRequest
                    | (String?, String?, Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::FeesEstimateByIdRequest
        def self.[]: (id_type: String?, id_value: String?, ?fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::FeesEstimateByIdRequest
                   | (String?, String?, Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::FeesEstimateByIdRequest

        def self.members: () -> [ :id_type, :id_value, :fees_estimate_request ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeesEstimateByIdRequest

        attr_reader fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest?
        attr_reader id_type: String?
        attr_reader id_value: String?

        def members: () -> [ :id_type, :id_value, :fees_estimate_request ]
        def to_h: () -> { id_type: String?, id_value: String?, fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest? }
      end

      class FeesEstimateError < Data
        def self.new: (code: String?, detail: Array[untyped]?, message: String?, type: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateError
                    | (String?, Array[untyped]?, String?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateError
        def self.[]: (code: String?, detail: Array[untyped]?, message: String?, type: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateError
                   | (String?, Array[untyped]?, String?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateError

        def self.members: () -> [ :code, :detail, :message, :type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeesEstimateError

        attr_reader code: String?
        attr_reader detail: Array[untyped]?
        attr_reader message: String?
        attr_reader type: String?

        def members: () -> [ :code, :detail, :message, :type ]
        def to_h: () -> { code: String?, detail: Array[untyped]?, message: String?, type: String? }
      end

      class FeesEstimateErrorDetail < Array[untyped]
        def self.parse: (Array[untyped]) -> FeesEstimateErrorDetail
      end

      class FeesEstimateIdentifier < Data
        def self.new: (?id_type: String?, ?id_value: String?, ?amazon_fulfilled: bool?, ?marketplace_id: String?, ?optional_fulfillment_program: String?, ?price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, ?seller_id: String?, ?seller_input_identifier: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier
                    | (String?, String?, bool?, String?, String?, Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, String?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier
        def self.[]: (?id_type: String?, ?id_value: String?, ?amazon_fulfilled: bool?, ?marketplace_id: String?, ?optional_fulfillment_program: String?, ?price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, ?seller_id: String?, ?seller_input_identifier: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier
                   | (String?, String?, bool?, String?, String?, Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, String?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier

        def self.members: () -> [ :id_type, :id_value, :amazon_fulfilled, :marketplace_id, :optional_fulfillment_program, :price_to_estimate_fees, :seller_id, :seller_input_identifier ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier

        attr_reader amazon_fulfilled: bool?
        attr_reader id_type: String?
        attr_reader id_value: String?
        attr_reader marketplace_id: String?
        attr_reader optional_fulfillment_program: String?
        attr_reader price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?
        attr_reader seller_id: String?
        attr_reader seller_input_identifier: String?

        def amazon_fulfilled?: () -> bool
        def members: () -> [ :id_type, :id_value, :amazon_fulfilled, :marketplace_id, :optional_fulfillment_program, :price_to_estimate_fees, :seller_id, :seller_input_identifier ]
        def to_h: () -> { id_type: String?, id_value: String?, amazon_fulfilled: bool?, marketplace_id: String?, optional_fulfillment_program: String?, price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, seller_id: String?, seller_input_identifier: String? }
      end

      class FeesEstimateRequest < Data
        def self.new: (identifier: String?, marketplace_id: String?, price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, ?amazon_fulfilled: bool?, ?optional_fulfillment_program: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateRequest
                    | (String?, String?, Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, bool?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateRequest
        def self.[]: (identifier: String?, marketplace_id: String?, price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, ?amazon_fulfilled: bool?, ?optional_fulfillment_program: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateRequest
                   | (String?, String?, Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, bool?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateRequest

        def self.members: () -> [ :identifier, :marketplace_id, :price_to_estimate_fees, :amazon_fulfilled, :optional_fulfillment_program ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeesEstimateRequest

        attr_reader amazon_fulfilled: bool?
        attr_reader identifier: String?
        attr_reader marketplace_id: String?
        attr_reader optional_fulfillment_program: String?
        attr_reader price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?

        def amazon_fulfilled?: () -> bool
        def members: () -> [ :identifier, :marketplace_id, :price_to_estimate_fees, :amazon_fulfilled, :optional_fulfillment_program ]
        def to_h: () -> { identifier: String?, marketplace_id: String?, price_to_estimate_fees: Peddler::APIs::ProductFeesV0::PriceToEstimateFees?, amazon_fulfilled: bool?, optional_fulfillment_program: String? }
      end

      class FeesEstimateResult < Data
        def self.new: (?error: Peddler::APIs::ProductFeesV0::FeesEstimateError?, ?fees_estimate: Peddler::APIs::ProductFeesV0::FeesEstimate?, ?fees_estimate_identifier: Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier?, ?status: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateResult
                    | (Peddler::APIs::ProductFeesV0::FeesEstimateError?, Peddler::APIs::ProductFeesV0::FeesEstimate?, Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateResult
        def self.[]: (?error: Peddler::APIs::ProductFeesV0::FeesEstimateError?, ?fees_estimate: Peddler::APIs::ProductFeesV0::FeesEstimate?, ?fees_estimate_identifier: Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier?, ?status: String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateResult
                   | (Peddler::APIs::ProductFeesV0::FeesEstimateError?, Peddler::APIs::ProductFeesV0::FeesEstimate?, Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier?, String?) -> Peddler::APIs::ProductFeesV0::FeesEstimateResult

        def self.members: () -> [ :error, :fees_estimate, :fees_estimate_identifier, :status ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::FeesEstimateResult

        attr_reader error: Peddler::APIs::ProductFeesV0::FeesEstimateError?
        attr_reader fees_estimate: Peddler::APIs::ProductFeesV0::FeesEstimate?
        attr_reader fees_estimate_identifier: Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier?
        attr_reader status: String?

        def members: () -> [ :error, :fees_estimate, :fees_estimate_identifier, :status ]
        def to_h: () -> { error: Peddler::APIs::ProductFeesV0::FeesEstimateError?, fees_estimate: Peddler::APIs::ProductFeesV0::FeesEstimate?, fees_estimate_identifier: Peddler::APIs::ProductFeesV0::FeesEstimateIdentifier?, status: String? }
      end

      class GetMyFeesEstimateRequest < Data
        def self.new: (?fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateRequest
                    | (Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateRequest
        def self.[]: (?fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateRequest
                   | (Peddler::APIs::ProductFeesV0::FeesEstimateRequest?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateRequest

        def self.members: () -> [ :fees_estimate_request ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateRequest

        attr_reader fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest?

        def members: () -> [ :fees_estimate_request ]
        def to_h: () -> { fees_estimate_request: Peddler::APIs::ProductFeesV0::FeesEstimateRequest? }
      end

      class GetMyFeesEstimateResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ProductFeesV0::Error]?, ?payload: Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResponse
                    | (Array[Peddler::APIs::ProductFeesV0::Error]?, Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResponse
        def self.[]: (?errors: Array[Peddler::APIs::ProductFeesV0::Error]?, ?payload: Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResponse
                   | (Array[Peddler::APIs::ProductFeesV0::Error]?, Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResponse

        attr_reader errors: Array[Peddler::APIs::ProductFeesV0::Error]?
        attr_reader payload: Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult?

        def members: () -> [ :errors, :payload ]
        def to_h: () -> { errors: Array[Peddler::APIs::ProductFeesV0::Error]?, payload: Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult? }
      end

      class GetMyFeesEstimateResult < Data
        def self.new: (?fees_estimate_result: Peddler::APIs::ProductFeesV0::FeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult
                    | (Peddler::APIs::ProductFeesV0::FeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult
        def self.[]: (?fees_estimate_result: Peddler::APIs::ProductFeesV0::FeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult
                   | (Peddler::APIs::ProductFeesV0::FeesEstimateResult?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult

        def self.members: () -> [ :fees_estimate_result ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimateResult

        attr_reader fees_estimate_result: Peddler::APIs::ProductFeesV0::FeesEstimateResult?

        def members: () -> [ :fees_estimate_result ]
        def to_h: () -> { fees_estimate_result: Peddler::APIs::ProductFeesV0::FeesEstimateResult? }
      end

      class GetMyFeesEstimatesErrorList < Data
        def self.new: (errors: Array[Peddler::APIs::ProductFeesV0::Error]?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimatesErrorList
                    | (Array[Peddler::APIs::ProductFeesV0::Error]?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimatesErrorList
        def self.[]: (errors: Array[Peddler::APIs::ProductFeesV0::Error]?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimatesErrorList
                   | (Array[Peddler::APIs::ProductFeesV0::Error]?) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimatesErrorList

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::GetMyFeesEstimatesErrorList

        attr_reader errors: Array[Peddler::APIs::ProductFeesV0::Error]?

        def members: () -> [ :errors ]
        def to_h: () -> { errors: Array[Peddler::APIs::ProductFeesV0::Error]? }
      end

      class GetMyFeesEstimatesRequest < Array[FeesEstimateByIdRequest]
        def self.parse: (Array[untyped]) -> GetMyFeesEstimatesRequest
      end

      class GetMyFeesEstimatesResponse < Array[FeesEstimateResult]
        def self.parse: (Array[untyped]) -> GetMyFeesEstimatesResponse
      end

      class IncludedFeeDetail < Data
        def self.new: (fee_amount: Peddler::Money?, fee_type: String?, final_fee: Peddler::Money?, ?fee_promotion: Peddler::Money?, ?tax_amount: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::IncludedFeeDetail
                    | (Peddler::Money?, String?, Peddler::Money?, Peddler::Money?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::IncludedFeeDetail
        def self.[]: (fee_amount: Peddler::Money?, fee_type: String?, final_fee: Peddler::Money?, ?fee_promotion: Peddler::Money?, ?tax_amount: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::IncludedFeeDetail
                   | (Peddler::Money?, String?, Peddler::Money?, Peddler::Money?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::IncludedFeeDetail

        def self.members: () -> [ :fee_amount, :fee_type, :final_fee, :fee_promotion, :tax_amount ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::IncludedFeeDetail

        attr_reader fee_amount: Peddler::Money?
        attr_reader fee_promotion: Peddler::Money?
        attr_reader fee_type: String?
        attr_reader final_fee: Peddler::Money?
        attr_reader tax_amount: Peddler::Money?

        def members: () -> [ :fee_amount, :fee_type, :final_fee, :fee_promotion, :tax_amount ]
        def to_h: () -> { fee_amount: Peddler::Money?, fee_type: String?, final_fee: Peddler::Money?, fee_promotion: Peddler::Money?, tax_amount: Peddler::Money? }
      end

      class IncludedFeeDetailList < Array[IncludedFeeDetail]
        def self.parse: (Array[untyped]) -> IncludedFeeDetailList
      end

      class Points < Data
        def self.new: (?points_monetary_value: Peddler::Money?, ?points_number: Integer?) -> Peddler::APIs::ProductFeesV0::Points
                    | (Peddler::Money?, Integer?) -> Peddler::APIs::ProductFeesV0::Points
        def self.[]: (?points_monetary_value: Peddler::Money?, ?points_number: Integer?) -> Peddler::APIs::ProductFeesV0::Points
                   | (Peddler::Money?, Integer?) -> Peddler::APIs::ProductFeesV0::Points

        def self.members: () -> [ :points_monetary_value, :points_number ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::Points

        attr_reader points_monetary_value: Peddler::Money?
        attr_reader points_number: Integer?

        def members: () -> [ :points_monetary_value, :points_number ]
        def to_h: () -> { points_monetary_value: Peddler::Money?, points_number: Integer? }
      end

      class PriceToEstimateFees < Data
        def self.new: (listing_price: Peddler::Money?, ?points: Peddler::APIs::ProductFeesV0::Points?, ?shipping: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::PriceToEstimateFees
                    | (Peddler::Money?, Peddler::APIs::ProductFeesV0::Points?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::PriceToEstimateFees
        def self.[]: (listing_price: Peddler::Money?, ?points: Peddler::APIs::ProductFeesV0::Points?, ?shipping: Peddler::Money?) -> Peddler::APIs::ProductFeesV0::PriceToEstimateFees
                   | (Peddler::Money?, Peddler::APIs::ProductFeesV0::Points?, Peddler::Money?) -> Peddler::APIs::ProductFeesV0::PriceToEstimateFees

        def self.members: () -> [ :listing_price, :points, :shipping ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ProductFeesV0::PriceToEstimateFees

        attr_reader listing_price: Peddler::Money?
        attr_reader points: Peddler::APIs::ProductFeesV0::Points?
        attr_reader shipping: Peddler::Money?

        def members: () -> [ :listing_price, :points, :shipping ]
        def to_h: () -> { listing_price: Peddler::Money?, points: Peddler::APIs::ProductFeesV0::Points?, shipping: Peddler::Money? }
      end

      def get_my_fees_estimate_for_asin: (Hash[untyped, untyped], String, ?rate_limit: Float) -> Peddler::Response
      def get_my_fees_estimate_for_sku: (Hash[untyped, untyped], String, ?rate_limit: Float) -> Peddler::Response

      def get_my_fees_estimates: (Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response
    end
  end
end
