module Peddler
  module APIs
    class ServicesV1 < API
      class AddAppointmentRequest < Data
        def self.new: (appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?) -> Peddler::APIs::ServicesV1::AddAppointmentRequest
                    | (Peddler::APIs::ServicesV1::AppointmentTimeInput?) -> Peddler::APIs::ServicesV1::AddAppointmentRequest

        def self.[]: (appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?) -> Peddler::APIs::ServicesV1::AddAppointmentRequest
                   | (Peddler::APIs::ServicesV1::AppointmentTimeInput?) -> Peddler::APIs::ServicesV1::AddAppointmentRequest

        def self.members: () -> [ :appointment_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AddAppointmentRequest

        attr_reader appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?
        def members: () -> [ :appointment_time ]

        def to_h: () -> { appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput? }
      end

      class Address < Data
        def self.new: (address_line1: String?, name: String?, ?address_line2: String?, ?address_line3: String?, ?city: String?, ?country_code: String?, ?county: String?, ?district: String?, ?phone: String?, ?postal_code: String?, ?state_or_region: String?) -> Peddler::APIs::ServicesV1::Address
                    | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::APIs::ServicesV1::Address

        def self.[]: (address_line1: String?, name: String?, ?address_line2: String?, ?address_line3: String?, ?city: String?, ?country_code: String?, ?county: String?, ?district: String?, ?phone: String?, ?postal_code: String?, ?state_or_region: String?) -> Peddler::APIs::ServicesV1::Address
                   | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::APIs::ServicesV1::Address

        def self.members: () -> [ :address_line1, :name, :address_line2, :address_line3, :city, :country_code, :county, :district, :phone, :postal_code, :state_or_region ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Address

        attr_reader address_line1: String?
        attr_reader address_line2: String?
        attr_reader address_line3: String?
        attr_reader city: String?
        attr_reader country_code: String?
        attr_reader county: String?
        attr_reader district: String?
        attr_reader name: String?
        attr_reader phone: String?
        attr_reader postal_code: String?
        attr_reader state_or_region: String?
        def members: () -> [ :address_line1, :name, :address_line2, :address_line3, :city, :country_code, :county, :district, :phone, :postal_code, :state_or_region ]

        def to_h: () -> { address_line1: String?, name: String?, address_line2: String?, address_line3: String?, city: String?, country_code: String?, county: String?, district: String?, phone: String?, postal_code: String?, state_or_region: String? }
      end

      class Appointment < Data
        def self.new: (?appointment_id: String?, ?appointment_status: String?, ?appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?, ?assigned_technicians: Array[Peddler::APIs::ServicesV1::Technician]?, ?poa: Peddler::APIs::ServicesV1::Poa?, ?rescheduled_appointment_id: String?) -> Peddler::APIs::ServicesV1::Appointment
                    | (String?, String?, Peddler::APIs::ServicesV1::AppointmentTime?, Array[Peddler::APIs::ServicesV1::Technician]?, Peddler::APIs::ServicesV1::Poa?, String?) -> Peddler::APIs::ServicesV1::Appointment

        def self.[]: (?appointment_id: String?, ?appointment_status: String?, ?appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?, ?assigned_technicians: Array[Peddler::APIs::ServicesV1::Technician]?, ?poa: Peddler::APIs::ServicesV1::Poa?, ?rescheduled_appointment_id: String?) -> Peddler::APIs::ServicesV1::Appointment
                   | (String?, String?, Peddler::APIs::ServicesV1::AppointmentTime?, Array[Peddler::APIs::ServicesV1::Technician]?, Peddler::APIs::ServicesV1::Poa?, String?) -> Peddler::APIs::ServicesV1::Appointment

        def self.members: () -> [ :appointment_id, :appointment_status, :appointment_time, :assigned_technicians, :poa, :rescheduled_appointment_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Appointment

        attr_reader appointment_id: String?
        attr_reader appointment_status: String?
        attr_reader appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?
        attr_reader assigned_technicians: Array[Peddler::APIs::ServicesV1::Technician]?
        attr_reader poa: Peddler::APIs::ServicesV1::Poa?
        attr_reader rescheduled_appointment_id: String?
        def members: () -> [ :appointment_id, :appointment_status, :appointment_time, :assigned_technicians, :poa, :rescheduled_appointment_id ]

        def to_h: () -> { appointment_id: String?, appointment_status: String?, appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?, assigned_technicians: Array[Peddler::APIs::ServicesV1::Technician]?, poa: Peddler::APIs::ServicesV1::Poa?, rescheduled_appointment_id: String? }
      end

      class AppointmentResource < Data
        def self.new: (?resource_id: String?) -> Peddler::APIs::ServicesV1::AppointmentResource
                    | (String?) -> Peddler::APIs::ServicesV1::AppointmentResource

        def self.[]: (?resource_id: String?) -> Peddler::APIs::ServicesV1::AppointmentResource
                   | (String?) -> Peddler::APIs::ServicesV1::AppointmentResource

        def self.members: () -> [ :resource_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AppointmentResource

        attr_reader resource_id: String?
        def members: () -> [ :resource_id ]

        def to_h: () -> { resource_id: String? }
      end

      class AppointmentResources < Array[AppointmentResource]
        def self.parse: (Array[untyped]) -> AppointmentResources
      end

      class AppointmentSlot < Data
        def self.new: (?capacity: Integer?, ?end_time: Time?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::AppointmentSlot
                    | (Integer?, Time?, Time?) -> Peddler::APIs::ServicesV1::AppointmentSlot

        def self.[]: (?capacity: Integer?, ?end_time: Time?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::AppointmentSlot
                   | (Integer?, Time?, Time?) -> Peddler::APIs::ServicesV1::AppointmentSlot

        def self.members: () -> [ :capacity, :end_time, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AppointmentSlot

        attr_reader capacity: Integer?
        attr_reader end_time: Time?
        attr_reader start_time: Time?
        def members: () -> [ :capacity, :end_time, :start_time ]

        def to_h: () -> { capacity: Integer?, end_time: Time?, start_time: Time? }
      end

      class AppointmentSlotReport < Data
        def self.new: (?appointment_slots: Array[Peddler::APIs::ServicesV1::AppointmentSlot]?, ?end_time: Time?, ?scheduling_type: String?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::AppointmentSlotReport
                    | (Array[Peddler::APIs::ServicesV1::AppointmentSlot]?, Time?, String?, Time?) -> Peddler::APIs::ServicesV1::AppointmentSlotReport

        def self.[]: (?appointment_slots: Array[Peddler::APIs::ServicesV1::AppointmentSlot]?, ?end_time: Time?, ?scheduling_type: String?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::AppointmentSlotReport
                   | (Array[Peddler::APIs::ServicesV1::AppointmentSlot]?, Time?, String?, Time?) -> Peddler::APIs::ServicesV1::AppointmentSlotReport

        def self.members: () -> [ :appointment_slots, :end_time, :scheduling_type, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AppointmentSlotReport

        attr_reader appointment_slots: Array[Peddler::APIs::ServicesV1::AppointmentSlot]?
        attr_reader end_time: Time?
        attr_reader scheduling_type: String?
        attr_reader start_time: Time?
        def members: () -> [ :appointment_slots, :end_time, :scheduling_type, :start_time ]

        def to_h: () -> { appointment_slots: Array[Peddler::APIs::ServicesV1::AppointmentSlot]?, end_time: Time?, scheduling_type: String?, start_time: Time? }
      end

      class AppointmentTime < Data
        def self.new: (duration_in_minutes: Integer?, start_time: Time?) -> Peddler::APIs::ServicesV1::AppointmentTime
                    | (Integer?, Time?) -> Peddler::APIs::ServicesV1::AppointmentTime

        def self.[]: (duration_in_minutes: Integer?, start_time: Time?) -> Peddler::APIs::ServicesV1::AppointmentTime
                   | (Integer?, Time?) -> Peddler::APIs::ServicesV1::AppointmentTime

        def self.members: () -> [ :duration_in_minutes, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AppointmentTime

        attr_reader duration_in_minutes: Integer?
        attr_reader start_time: Time?
        def members: () -> [ :duration_in_minutes, :start_time ]

        def to_h: () -> { duration_in_minutes: Integer?, start_time: Time? }
      end

      class AppointmentTimeInput < Data
        def self.new: (start_time: Time?, ?duration_in_minutes: Integer?) -> Peddler::APIs::ServicesV1::AppointmentTimeInput
                    | (Time?, Integer?) -> Peddler::APIs::ServicesV1::AppointmentTimeInput

        def self.[]: (start_time: Time?, ?duration_in_minutes: Integer?) -> Peddler::APIs::ServicesV1::AppointmentTimeInput
                   | (Time?, Integer?) -> Peddler::APIs::ServicesV1::AppointmentTimeInput

        def self.members: () -> [ :start_time, :duration_in_minutes ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AppointmentTimeInput

        attr_reader duration_in_minutes: Integer?
        attr_reader start_time: Time?
        def members: () -> [ :start_time, :duration_in_minutes ]

        def to_h: () -> { start_time: Time?, duration_in_minutes: Integer? }
      end

      class AssignAppointmentResourcesRequest < Data
        def self.new: (resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesRequest
                    | (Array[Peddler::APIs::ServicesV1::AppointmentResource]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesRequest

        def self.[]: (resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesRequest
                   | (Array[Peddler::APIs::ServicesV1::AppointmentResource]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesRequest

        def self.members: () -> [ :resources ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesRequest

        attr_reader resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?
        def members: () -> [ :resources ]

        def to_h: () -> { resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]? }
      end

      class AssignAppointmentResourcesResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AssignAppointmentResourcesResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Hash[untyped, untyped]?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Hash[untyped, untyped]? }
      end

      class AssociatedItem < Data
        def self.new: (?asin: String?, ?brand_name: String?, ?item_delivery: Peddler::APIs::ServicesV1::ItemDelivery?, ?item_status: String?, ?order_id: String?, ?quantity: Integer?, ?title: String?) -> Peddler::APIs::ServicesV1::AssociatedItem
                    | (String?, String?, Peddler::APIs::ServicesV1::ItemDelivery?, String?, String?, Integer?, String?) -> Peddler::APIs::ServicesV1::AssociatedItem

        def self.[]: (?asin: String?, ?brand_name: String?, ?item_delivery: Peddler::APIs::ServicesV1::ItemDelivery?, ?item_status: String?, ?order_id: String?, ?quantity: Integer?, ?title: String?) -> Peddler::APIs::ServicesV1::AssociatedItem
                   | (String?, String?, Peddler::APIs::ServicesV1::ItemDelivery?, String?, String?, Integer?, String?) -> Peddler::APIs::ServicesV1::AssociatedItem

        def self.members: () -> [ :asin, :brand_name, :item_delivery, :item_status, :order_id, :quantity, :title ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AssociatedItem

        attr_reader asin: String?
        attr_reader brand_name: String?
        attr_reader item_delivery: Peddler::APIs::ServicesV1::ItemDelivery?
        attr_reader item_status: String?
        attr_reader order_id: String?
        attr_reader quantity: Integer?
        attr_reader title: String?
        def members: () -> [ :asin, :brand_name, :item_delivery, :item_status, :order_id, :quantity, :title ]

        def to_h: () -> { asin: String?, brand_name: String?, item_delivery: Peddler::APIs::ServicesV1::ItemDelivery?, item_status: String?, order_id: String?, quantity: Integer?, title: String? }
      end

      class AvailabilityRecord < Data
        def self.new: (end_time: Time?, start_time: Time?, ?capacity: Integer?, ?recurrence: Peddler::APIs::ServicesV1::Recurrence?) -> Peddler::APIs::ServicesV1::AvailabilityRecord
                    | (Time?, Time?, Integer?, Peddler::APIs::ServicesV1::Recurrence?) -> Peddler::APIs::ServicesV1::AvailabilityRecord

        def self.[]: (end_time: Time?, start_time: Time?, ?capacity: Integer?, ?recurrence: Peddler::APIs::ServicesV1::Recurrence?) -> Peddler::APIs::ServicesV1::AvailabilityRecord
                   | (Time?, Time?, Integer?, Peddler::APIs::ServicesV1::Recurrence?) -> Peddler::APIs::ServicesV1::AvailabilityRecord

        def self.members: () -> [ :end_time, :start_time, :capacity, :recurrence ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::AvailabilityRecord

        attr_reader capacity: Integer?
        attr_reader end_time: Time?
        attr_reader recurrence: Peddler::APIs::ServicesV1::Recurrence?
        attr_reader start_time: Time?
        def members: () -> [ :end_time, :start_time, :capacity, :recurrence ]

        def to_h: () -> { end_time: Time?, start_time: Time?, capacity: Integer?, recurrence: Peddler::APIs::ServicesV1::Recurrence? }
      end

      class AvailabilityRecords < Array[AvailabilityRecord]
        def self.parse: (Array[untyped]) -> AvailabilityRecords
      end

      class Buyer < Data
        def self.new: (?buyer_id: String?, ?prime_member: bool?, ?name: String?, ?phone: String?) -> Peddler::APIs::ServicesV1::Buyer
                    | (String?, bool?, String?, String?) -> Peddler::APIs::ServicesV1::Buyer

        def self.[]: (?buyer_id: String?, ?prime_member: bool?, ?name: String?, ?phone: String?) -> Peddler::APIs::ServicesV1::Buyer
                   | (String?, bool?, String?, String?) -> Peddler::APIs::ServicesV1::Buyer

        def self.members: () -> [ :buyer_id, :prime_member, :name, :phone ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Buyer

        attr_reader buyer_id: String?
        attr_reader name: String?
        attr_reader phone: String?
        attr_reader prime_member: bool?

        def members: () -> [ :buyer_id, :prime_member, :name, :phone ]
        def prime_member?: () -> bool

        def to_h: () -> { buyer_id: String?, prime_member: bool?, name: String?, phone: String? }
      end

      class CancelReservationResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelReservationResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelReservationResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelReservationResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelReservationResponse

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CancelReservationResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]? }
      end

      class CancelServiceJobByServiceJobIdResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelServiceJobByServiceJobIdResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelServiceJobByServiceJobIdResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelServiceJobByServiceJobIdResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CancelServiceJobByServiceJobIdResponse

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CancelServiceJobByServiceJobIdResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]? }
      end

      class CompleteServiceJobByServiceJobIdResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CompleteServiceJobByServiceJobIdResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CompleteServiceJobByServiceJobIdResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CompleteServiceJobByServiceJobIdResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::CompleteServiceJobByServiceJobIdResponse

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CompleteServiceJobByServiceJobIdResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]? }
      end

      class CreateReservationRecord < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?reservation: Peddler::APIs::ServicesV1::Reservation?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::CreateReservationRecord
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::Reservation?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::CreateReservationRecord

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?reservation: Peddler::APIs::ServicesV1::Reservation?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::CreateReservationRecord
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::Reservation?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::CreateReservationRecord

        def self.members: () -> [ :errors, :reservation, :warnings ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CreateReservationRecord

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader reservation: Peddler::APIs::ServicesV1::Reservation?
        attr_reader warnings: Array[Peddler::APIs::ServicesV1::Warning]?
        def members: () -> [ :errors, :reservation, :warnings ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, reservation: Peddler::APIs::ServicesV1::Reservation?, warnings: Array[Peddler::APIs::ServicesV1::Warning]? }
      end

      class CreateReservationRequest < Data
        def self.new: (reservation: Peddler::APIs::ServicesV1::Reservation?, resource_id: String?) -> Peddler::APIs::ServicesV1::CreateReservationRequest
                    | (Peddler::APIs::ServicesV1::Reservation?, String?) -> Peddler::APIs::ServicesV1::CreateReservationRequest

        def self.[]: (reservation: Peddler::APIs::ServicesV1::Reservation?, resource_id: String?) -> Peddler::APIs::ServicesV1::CreateReservationRequest
                   | (Peddler::APIs::ServicesV1::Reservation?, String?) -> Peddler::APIs::ServicesV1::CreateReservationRequest

        def self.members: () -> [ :reservation, :resource_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CreateReservationRequest

        attr_reader reservation: Peddler::APIs::ServicesV1::Reservation?
        attr_reader resource_id: String?
        def members: () -> [ :reservation, :resource_id ]

        def to_h: () -> { reservation: Peddler::APIs::ServicesV1::Reservation?, resource_id: String? }
      end

      class CreateReservationResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::CreateReservationRecord?) -> Peddler::APIs::ServicesV1::CreateReservationResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::CreateReservationRecord?) -> Peddler::APIs::ServicesV1::CreateReservationResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::CreateReservationRecord?) -> Peddler::APIs::ServicesV1::CreateReservationResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::CreateReservationRecord?) -> Peddler::APIs::ServicesV1::CreateReservationResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CreateReservationResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Peddler::APIs::ServicesV1::CreateReservationRecord?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Peddler::APIs::ServicesV1::CreateReservationRecord? }
      end

      class CreateServiceDocumentUploadDestination < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination?) -> Peddler::APIs::ServicesV1::CreateServiceDocumentUploadDestination
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination?) -> Peddler::APIs::ServicesV1::CreateServiceDocumentUploadDestination

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination?) -> Peddler::APIs::ServicesV1::CreateServiceDocumentUploadDestination
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination?) -> Peddler::APIs::ServicesV1::CreateServiceDocumentUploadDestination

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::CreateServiceDocumentUploadDestination

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination? }
      end

      class DateTimeRange < Data
        def self.new: (end_time: Time?, start_time: Time?) -> Peddler::APIs::ServicesV1::DateTimeRange
                    | (Time?, Time?) -> Peddler::APIs::ServicesV1::DateTimeRange

        def self.[]: (end_time: Time?, start_time: Time?) -> Peddler::APIs::ServicesV1::DateTimeRange
                   | (Time?, Time?) -> Peddler::APIs::ServicesV1::DateTimeRange

        def self.members: () -> [ :end_time, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::DateTimeRange

        attr_reader end_time: Time?
        attr_reader start_time: Time?
        def members: () -> [ :end_time, :start_time ]

        def to_h: () -> { end_time: Time?, start_time: Time? }
      end

      class EncryptionDetails < Data
        def self.new: (initialization_vector: String?, key: String?, standard: String?) -> Peddler::APIs::ServicesV1::EncryptionDetails
                    | (String?, String?, String?) -> Peddler::APIs::ServicesV1::EncryptionDetails

        def self.[]: (initialization_vector: String?, key: String?, standard: String?) -> Peddler::APIs::ServicesV1::EncryptionDetails
                   | (String?, String?, String?) -> Peddler::APIs::ServicesV1::EncryptionDetails

        def self.members: () -> [ :initialization_vector, :key, :standard ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::EncryptionDetails

        attr_reader initialization_vector: String?
        attr_reader key: String?
        attr_reader standard: String?
        def members: () -> [ :initialization_vector, :key, :standard ]

        def to_h: () -> { initialization_vector: String?, key: String?, standard: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?, ?error_level: String?) -> Peddler::APIs::ServicesV1::Error
                    | (String?, String?, String?, String?) -> Peddler::APIs::ServicesV1::Error

        def self.[]: (code: String?, message: String?, ?details: String?, ?error_level: String?) -> Peddler::APIs::ServicesV1::Error
                   | (String?, String?, String?, String?) -> Peddler::APIs::ServicesV1::Error

        def self.members: () -> [ :code, :message, :details, :error_level ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader error_level: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details, :error_level ]

        def to_h: () -> { code: String?, message: String?, details: String?, error_level: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class FixedSlot < Data
        def self.new: (?available_capacity: Integer?, ?encumbered_capacity: Integer?, ?reserved_capacity: Integer?, ?scheduled_capacity: Integer?, ?start_date_time: Time?) -> Peddler::APIs::ServicesV1::FixedSlot
                    | (Integer?, Integer?, Integer?, Integer?, Time?) -> Peddler::APIs::ServicesV1::FixedSlot

        def self.[]: (?available_capacity: Integer?, ?encumbered_capacity: Integer?, ?reserved_capacity: Integer?, ?scheduled_capacity: Integer?, ?start_date_time: Time?) -> Peddler::APIs::ServicesV1::FixedSlot
                   | (Integer?, Integer?, Integer?, Integer?, Time?) -> Peddler::APIs::ServicesV1::FixedSlot

        def self.members: () -> [ :available_capacity, :encumbered_capacity, :reserved_capacity, :scheduled_capacity, :start_date_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::FixedSlot

        attr_reader available_capacity: Integer?
        attr_reader encumbered_capacity: Integer?
        attr_reader reserved_capacity: Integer?
        attr_reader scheduled_capacity: Integer?
        attr_reader start_date_time: Time?
        def members: () -> [ :available_capacity, :encumbered_capacity, :reserved_capacity, :scheduled_capacity, :start_date_time ]

        def to_h: () -> { available_capacity: Integer?, encumbered_capacity: Integer?, reserved_capacity: Integer?, scheduled_capacity: Integer?, start_date_time: Time? }
      end

      class FixedSlotCapacity < Data
        def self.new: (?capacities: Array[Peddler::APIs::ServicesV1::FixedSlot]?, ?next_page_token: String?, ?resource_id: String?, ?slot_duration: Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacity
                    | (Array[Peddler::APIs::ServicesV1::FixedSlot]?, String?, String?, Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacity

        def self.[]: (?capacities: Array[Peddler::APIs::ServicesV1::FixedSlot]?, ?next_page_token: String?, ?resource_id: String?, ?slot_duration: Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacity
                   | (Array[Peddler::APIs::ServicesV1::FixedSlot]?, String?, String?, Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacity

        def self.members: () -> [ :capacities, :next_page_token, :resource_id, :slot_duration ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::FixedSlotCapacity

        attr_reader capacities: Array[Peddler::APIs::ServicesV1::FixedSlot]?
        attr_reader next_page_token: String?
        attr_reader resource_id: String?
        attr_reader slot_duration: Float?
        def members: () -> [ :capacities, :next_page_token, :resource_id, :slot_duration ]

        def to_h: () -> { capacities: Array[Peddler::APIs::ServicesV1::FixedSlot]?, next_page_token: String?, resource_id: String?, slot_duration: Float? }
      end

      class FixedSlotCapacityErrors < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityErrors
                    | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityErrors

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityErrors
                   | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityErrors

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::FixedSlotCapacityErrors

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]? }
      end

      class FixedSlotCapacityQuery < Data
        def self.new: (end_date_time: Time?, start_date_time: Time?, ?capacity_types: Array[untyped]?, ?slot_duration: Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityQuery
                    | (Time?, Time?, Array[untyped]?, Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityQuery

        def self.[]: (end_date_time: Time?, start_date_time: Time?, ?capacity_types: Array[untyped]?, ?slot_duration: Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityQuery
                   | (Time?, Time?, Array[untyped]?, Float?) -> Peddler::APIs::ServicesV1::FixedSlotCapacityQuery

        def self.members: () -> [ :end_date_time, :start_date_time, :capacity_types, :slot_duration ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::FixedSlotCapacityQuery

        attr_reader capacity_types: Array[untyped]?
        attr_reader end_date_time: Time?
        attr_reader slot_duration: Float?
        attr_reader start_date_time: Time?
        def members: () -> [ :end_date_time, :start_date_time, :capacity_types, :slot_duration ]

        def to_h: () -> { end_date_time: Time?, start_date_time: Time?, capacity_types: Array[untyped]?, slot_duration: Float? }
      end

      class FulfillmentDocument < Data
        def self.new: (?content_sha256: String?, ?upload_destination_id: String?) -> Peddler::APIs::ServicesV1::FulfillmentDocument
                    | (String?, String?) -> Peddler::APIs::ServicesV1::FulfillmentDocument

        def self.[]: (?content_sha256: String?, ?upload_destination_id: String?) -> Peddler::APIs::ServicesV1::FulfillmentDocument
                   | (String?, String?) -> Peddler::APIs::ServicesV1::FulfillmentDocument

        def self.members: () -> [ :content_sha256, :upload_destination_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::FulfillmentDocument

        attr_reader content_sha256: String?
        attr_reader upload_destination_id: String?
        def members: () -> [ :content_sha256, :upload_destination_id ]

        def to_h: () -> { content_sha256: String?, upload_destination_id: String? }
      end

      class FulfillmentDocuments < Array[FulfillmentDocument]
        def self.parse: (Array[untyped]) -> FulfillmentDocuments
      end

      class FulfillmentTime < Data
        def self.new: (?end_time: Time?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::FulfillmentTime
                    | (Time?, Time?) -> Peddler::APIs::ServicesV1::FulfillmentTime

        def self.[]: (?end_time: Time?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::FulfillmentTime
                   | (Time?, Time?) -> Peddler::APIs::ServicesV1::FulfillmentTime

        def self.members: () -> [ :end_time, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::FulfillmentTime

        attr_reader end_time: Time?
        attr_reader start_time: Time?
        def members: () -> [ :end_time, :start_time ]

        def to_h: () -> { end_time: Time?, start_time: Time? }
      end

      class GetAppointmentSlotsResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::AppointmentSlotReport?) -> Peddler::APIs::ServicesV1::GetAppointmentSlotsResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::AppointmentSlotReport?) -> Peddler::APIs::ServicesV1::GetAppointmentSlotsResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::AppointmentSlotReport?) -> Peddler::APIs::ServicesV1::GetAppointmentSlotsResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::AppointmentSlotReport?) -> Peddler::APIs::ServicesV1::GetAppointmentSlotsResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::GetAppointmentSlotsResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Peddler::APIs::ServicesV1::AppointmentSlotReport?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Peddler::APIs::ServicesV1::AppointmentSlotReport? }
      end

      class GetServiceJobByServiceJobIdResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::ServiceJob?) -> Peddler::APIs::ServicesV1::GetServiceJobByServiceJobIdResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::ServiceJob?) -> Peddler::APIs::ServicesV1::GetServiceJobByServiceJobIdResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::ServiceJob?) -> Peddler::APIs::ServicesV1::GetServiceJobByServiceJobIdResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::ServiceJob?) -> Peddler::APIs::ServicesV1::GetServiceJobByServiceJobIdResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::GetServiceJobByServiceJobIdResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Peddler::APIs::ServicesV1::ServiceJob?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Peddler::APIs::ServicesV1::ServiceJob? }
      end

      class GetServiceJobsResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::JobListing?) -> Peddler::APIs::ServicesV1::GetServiceJobsResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::JobListing?) -> Peddler::APIs::ServicesV1::GetServiceJobsResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::JobListing?) -> Peddler::APIs::ServicesV1::GetServiceJobsResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::JobListing?) -> Peddler::APIs::ServicesV1::GetServiceJobsResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::GetServiceJobsResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Peddler::APIs::ServicesV1::JobListing?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Peddler::APIs::ServicesV1::JobListing? }
      end

      class ItemDelivery < Data
        def self.new: (?estimated_delivery_date: Time?, ?item_delivery_promise: Peddler::APIs::ServicesV1::ItemDeliveryPromise?) -> Peddler::APIs::ServicesV1::ItemDelivery
                    | (Time?, Peddler::APIs::ServicesV1::ItemDeliveryPromise?) -> Peddler::APIs::ServicesV1::ItemDelivery

        def self.[]: (?estimated_delivery_date: Time?, ?item_delivery_promise: Peddler::APIs::ServicesV1::ItemDeliveryPromise?) -> Peddler::APIs::ServicesV1::ItemDelivery
                   | (Time?, Peddler::APIs::ServicesV1::ItemDeliveryPromise?) -> Peddler::APIs::ServicesV1::ItemDelivery

        def self.members: () -> [ :estimated_delivery_date, :item_delivery_promise ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ItemDelivery

        attr_reader estimated_delivery_date: Time?
        attr_reader item_delivery_promise: Peddler::APIs::ServicesV1::ItemDeliveryPromise?
        def members: () -> [ :estimated_delivery_date, :item_delivery_promise ]

        def to_h: () -> { estimated_delivery_date: Time?, item_delivery_promise: Peddler::APIs::ServicesV1::ItemDeliveryPromise? }
      end

      class ItemDeliveryPromise < Data
        def self.new: (?end_time: Time?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::ItemDeliveryPromise
                    | (Time?, Time?) -> Peddler::APIs::ServicesV1::ItemDeliveryPromise

        def self.[]: (?end_time: Time?, ?start_time: Time?) -> Peddler::APIs::ServicesV1::ItemDeliveryPromise
                   | (Time?, Time?) -> Peddler::APIs::ServicesV1::ItemDeliveryPromise

        def self.members: () -> [ :end_time, :start_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ItemDeliveryPromise

        attr_reader end_time: Time?
        attr_reader start_time: Time?
        def members: () -> [ :end_time, :start_time ]

        def to_h: () -> { end_time: Time?, start_time: Time? }
      end

      class JobListing < Data
        def self.new: (?jobs: Array[Peddler::APIs::ServicesV1::ServiceJob]?, ?next_page_token: String?, ?previous_page_token: String?, ?total_result_size: Integer?) -> Peddler::APIs::ServicesV1::JobListing
                    | (Array[Peddler::APIs::ServicesV1::ServiceJob]?, String?, String?, Integer?) -> Peddler::APIs::ServicesV1::JobListing

        def self.[]: (?jobs: Array[Peddler::APIs::ServicesV1::ServiceJob]?, ?next_page_token: String?, ?previous_page_token: String?, ?total_result_size: Integer?) -> Peddler::APIs::ServicesV1::JobListing
                   | (Array[Peddler::APIs::ServicesV1::ServiceJob]?, String?, String?, Integer?) -> Peddler::APIs::ServicesV1::JobListing

        def self.members: () -> [ :jobs, :next_page_token, :previous_page_token, :total_result_size ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::JobListing

        attr_reader jobs: Array[Peddler::APIs::ServicesV1::ServiceJob]?
        attr_reader next_page_token: String?
        attr_reader previous_page_token: String?
        attr_reader total_result_size: Integer?
        def members: () -> [ :jobs, :next_page_token, :previous_page_token, :total_result_size ]

        def to_h: () -> { jobs: Array[Peddler::APIs::ServicesV1::ServiceJob]?, next_page_token: String?, previous_page_token: String?, total_result_size: Integer? }
      end

      class Poa < Data
        def self.new: (?appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?, ?poa_type: String?, ?technicians: Array[Peddler::APIs::ServicesV1::Technician]?, ?upload_time: Time?, ?uploading_technician: String?) -> Peddler::APIs::ServicesV1::Poa
                    | (Peddler::APIs::ServicesV1::AppointmentTime?, String?, Array[Peddler::APIs::ServicesV1::Technician]?, Time?, String?) -> Peddler::APIs::ServicesV1::Poa

        def self.[]: (?appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?, ?poa_type: String?, ?technicians: Array[Peddler::APIs::ServicesV1::Technician]?, ?upload_time: Time?, ?uploading_technician: String?) -> Peddler::APIs::ServicesV1::Poa
                   | (Peddler::APIs::ServicesV1::AppointmentTime?, String?, Array[Peddler::APIs::ServicesV1::Technician]?, Time?, String?) -> Peddler::APIs::ServicesV1::Poa

        def self.members: () -> [ :appointment_time, :poa_type, :technicians, :upload_time, :uploading_technician ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Poa

        attr_reader appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?
        attr_reader poa_type: String?
        attr_reader technicians: Array[Peddler::APIs::ServicesV1::Technician]?
        attr_reader upload_time: Time?
        attr_reader uploading_technician: String?
        def members: () -> [ :appointment_time, :poa_type, :technicians, :upload_time, :uploading_technician ]

        def to_h: () -> { appointment_time: Peddler::APIs::ServicesV1::AppointmentTime?, poa_type: String?, technicians: Array[Peddler::APIs::ServicesV1::Technician]?, upload_time: Time?, uploading_technician: String? }
      end

      class RangeCapacity < Data
        def self.new: (?capacity_type: String?, ?slots: Array[Peddler::APIs::ServicesV1::RangeSlot]?) -> Peddler::APIs::ServicesV1::RangeCapacity
                    | (String?, Array[Peddler::APIs::ServicesV1::RangeSlot]?) -> Peddler::APIs::ServicesV1::RangeCapacity

        def self.[]: (?capacity_type: String?, ?slots: Array[Peddler::APIs::ServicesV1::RangeSlot]?) -> Peddler::APIs::ServicesV1::RangeCapacity
                   | (String?, Array[Peddler::APIs::ServicesV1::RangeSlot]?) -> Peddler::APIs::ServicesV1::RangeCapacity

        def self.members: () -> [ :capacity_type, :slots ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::RangeCapacity

        attr_reader capacity_type: String?
        attr_reader slots: Array[Peddler::APIs::ServicesV1::RangeSlot]?
        def members: () -> [ :capacity_type, :slots ]

        def to_h: () -> { capacity_type: String?, slots: Array[Peddler::APIs::ServicesV1::RangeSlot]? }
      end

      class RangeSlot < Data
        def self.new: (?capacity: Integer?, ?end_date_time: Time?, ?start_date_time: Time?) -> Peddler::APIs::ServicesV1::RangeSlot
                    | (Integer?, Time?, Time?) -> Peddler::APIs::ServicesV1::RangeSlot

        def self.[]: (?capacity: Integer?, ?end_date_time: Time?, ?start_date_time: Time?) -> Peddler::APIs::ServicesV1::RangeSlot
                   | (Integer?, Time?, Time?) -> Peddler::APIs::ServicesV1::RangeSlot

        def self.members: () -> [ :capacity, :end_date_time, :start_date_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::RangeSlot

        attr_reader capacity: Integer?
        attr_reader end_date_time: Time?
        attr_reader start_date_time: Time?
        def members: () -> [ :capacity, :end_date_time, :start_date_time ]

        def to_h: () -> { capacity: Integer?, end_date_time: Time?, start_date_time: Time? }
      end

      class RangeSlotCapacity < Data
        def self.new: (?capacities: Array[Peddler::APIs::ServicesV1::RangeCapacity]?, ?next_page_token: String?, ?resource_id: String?) -> Peddler::APIs::ServicesV1::RangeSlotCapacity
                    | (Array[Peddler::APIs::ServicesV1::RangeCapacity]?, String?, String?) -> Peddler::APIs::ServicesV1::RangeSlotCapacity

        def self.[]: (?capacities: Array[Peddler::APIs::ServicesV1::RangeCapacity]?, ?next_page_token: String?, ?resource_id: String?) -> Peddler::APIs::ServicesV1::RangeSlotCapacity
                   | (Array[Peddler::APIs::ServicesV1::RangeCapacity]?, String?, String?) -> Peddler::APIs::ServicesV1::RangeSlotCapacity

        def self.members: () -> [ :capacities, :next_page_token, :resource_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::RangeSlotCapacity

        attr_reader capacities: Array[Peddler::APIs::ServicesV1::RangeCapacity]?
        attr_reader next_page_token: String?
        attr_reader resource_id: String?
        def members: () -> [ :capacities, :next_page_token, :resource_id ]

        def to_h: () -> { capacities: Array[Peddler::APIs::ServicesV1::RangeCapacity]?, next_page_token: String?, resource_id: String? }
      end

      class RangeSlotCapacityErrors < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityErrors
                    | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityErrors

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityErrors
                   | (Array[Peddler::APIs::ServicesV1::Error]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityErrors

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::RangeSlotCapacityErrors

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]? }
      end

      class RangeSlotCapacityQuery < Data
        def self.new: (end_date_time: Time?, start_date_time: Time?, ?capacity_types: Array[untyped]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityQuery
                    | (Time?, Time?, Array[untyped]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityQuery

        def self.[]: (end_date_time: Time?, start_date_time: Time?, ?capacity_types: Array[untyped]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityQuery
                   | (Time?, Time?, Array[untyped]?) -> Peddler::APIs::ServicesV1::RangeSlotCapacityQuery

        def self.members: () -> [ :end_date_time, :start_date_time, :capacity_types ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::RangeSlotCapacityQuery

        attr_reader capacity_types: Array[untyped]?
        attr_reader end_date_time: Time?
        attr_reader start_date_time: Time?
        def members: () -> [ :end_date_time, :start_date_time, :capacity_types ]

        def to_h: () -> { end_date_time: Time?, start_date_time: Time?, capacity_types: Array[untyped]? }
      end

      class Recurrence < Data
        def self.new: (end_time: Time?, ?days_of_month: Array[Integer]?, ?days_of_week: Array[untyped]?) -> Peddler::APIs::ServicesV1::Recurrence
                    | (Time?, Array[Integer]?, Array[untyped]?) -> Peddler::APIs::ServicesV1::Recurrence

        def self.[]: (end_time: Time?, ?days_of_month: Array[Integer]?, ?days_of_week: Array[untyped]?) -> Peddler::APIs::ServicesV1::Recurrence
                   | (Time?, Array[Integer]?, Array[untyped]?) -> Peddler::APIs::ServicesV1::Recurrence

        def self.members: () -> [ :end_time, :days_of_month, :days_of_week ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Recurrence

        attr_reader days_of_month: Array[Integer]?
        attr_reader days_of_week: Array[untyped]?
        attr_reader end_time: Time?
        def members: () -> [ :end_time, :days_of_month, :days_of_week ]

        def to_h: () -> { end_time: Time?, days_of_month: Array[Integer]?, days_of_week: Array[untyped]? }
      end

      class RescheduleAppointmentRequest < Data
        def self.new: (appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?, reschedule_reason_code: String?) -> Peddler::APIs::ServicesV1::RescheduleAppointmentRequest
                    | (Peddler::APIs::ServicesV1::AppointmentTimeInput?, String?) -> Peddler::APIs::ServicesV1::RescheduleAppointmentRequest

        def self.[]: (appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?, reschedule_reason_code: String?) -> Peddler::APIs::ServicesV1::RescheduleAppointmentRequest
                   | (Peddler::APIs::ServicesV1::AppointmentTimeInput?, String?) -> Peddler::APIs::ServicesV1::RescheduleAppointmentRequest

        def self.members: () -> [ :appointment_time, :reschedule_reason_code ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::RescheduleAppointmentRequest

        attr_reader appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?
        attr_reader reschedule_reason_code: String?
        def members: () -> [ :appointment_time, :reschedule_reason_code ]

        def to_h: () -> { appointment_time: Peddler::APIs::ServicesV1::AppointmentTimeInput?, reschedule_reason_code: String? }
      end

      class Reservation < Data
        def self.new: (availability: Peddler::APIs::ServicesV1::AvailabilityRecord?, type: String?, ?reservation_id: String?) -> Peddler::APIs::ServicesV1::Reservation
                    | (Peddler::APIs::ServicesV1::AvailabilityRecord?, String?, String?) -> Peddler::APIs::ServicesV1::Reservation

        def self.[]: (availability: Peddler::APIs::ServicesV1::AvailabilityRecord?, type: String?, ?reservation_id: String?) -> Peddler::APIs::ServicesV1::Reservation
                   | (Peddler::APIs::ServicesV1::AvailabilityRecord?, String?, String?) -> Peddler::APIs::ServicesV1::Reservation

        def self.members: () -> [ :availability, :type, :reservation_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Reservation

        attr_reader availability: Peddler::APIs::ServicesV1::AvailabilityRecord?
        attr_reader reservation_id: String?
        attr_reader type: String?
        def members: () -> [ :availability, :type, :reservation_id ]

        def to_h: () -> { availability: Peddler::APIs::ServicesV1::AvailabilityRecord?, type: String?, reservation_id: String? }
      end

      class ScopeOfWork < Data
        def self.new: (?asin: String?, ?quantity: Integer?, ?required_skills: Array[String]?, ?title: String?) -> Peddler::APIs::ServicesV1::ScopeOfWork
                    | (String?, Integer?, Array[String]?, String?) -> Peddler::APIs::ServicesV1::ScopeOfWork

        def self.[]: (?asin: String?, ?quantity: Integer?, ?required_skills: Array[String]?, ?title: String?) -> Peddler::APIs::ServicesV1::ScopeOfWork
                   | (String?, Integer?, Array[String]?, String?) -> Peddler::APIs::ServicesV1::ScopeOfWork

        def self.members: () -> [ :asin, :quantity, :required_skills, :title ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ScopeOfWork

        attr_reader asin: String?
        attr_reader quantity: Integer?
        attr_reader required_skills: Array[String]?
        attr_reader title: String?
        def members: () -> [ :asin, :quantity, :required_skills, :title ]

        def to_h: () -> { asin: String?, quantity: Integer?, required_skills: Array[String]?, title: String? }
      end

      class Seller < Data
        def self.new: (?seller_id: String?) -> Peddler::APIs::ServicesV1::Seller
                    | (String?) -> Peddler::APIs::ServicesV1::Seller

        def self.[]: (?seller_id: String?) -> Peddler::APIs::ServicesV1::Seller
                   | (String?) -> Peddler::APIs::ServicesV1::Seller

        def self.members: () -> [ :seller_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Seller

        attr_reader seller_id: String?
        def members: () -> [ :seller_id ]

        def to_h: () -> { seller_id: String? }
      end

      class ServiceDocumentUploadDestination < Data
        def self.new: (encryption_details: Peddler::APIs::ServicesV1::EncryptionDetails?, upload_destination_id: String?, url: String?, ?headers: Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination
                    | (Peddler::APIs::ServicesV1::EncryptionDetails?, String?, String?, Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination

        def self.[]: (encryption_details: Peddler::APIs::ServicesV1::EncryptionDetails?, upload_destination_id: String?, url: String?, ?headers: Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination
                   | (Peddler::APIs::ServicesV1::EncryptionDetails?, String?, String?, Hash[untyped, untyped]?) -> Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination

        def self.members: () -> [ :encryption_details, :upload_destination_id, :url, :headers ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ServiceDocumentUploadDestination

        attr_reader encryption_details: Peddler::APIs::ServicesV1::EncryptionDetails?
        attr_reader headers: Hash[untyped, untyped]?
        attr_reader upload_destination_id: String?
        attr_reader url: String?
        def members: () -> [ :encryption_details, :upload_destination_id, :url, :headers ]

        def to_h: () -> { encryption_details: Peddler::APIs::ServicesV1::EncryptionDetails?, upload_destination_id: String?, url: String?, headers: Hash[untyped, untyped]? }
      end

      class ServiceJob < Data
        def self.new: (?appointments: Array[Peddler::APIs::ServicesV1::Appointment]?, ?associated_items: Array[Peddler::APIs::ServicesV1::AssociatedItem]?, ?buyer: Peddler::APIs::ServicesV1::Buyer?, ?create_time: Time?, ?marketplace_id: String?, ?preferred_appointment_times: Array[Peddler::APIs::ServicesV1::AppointmentTime]?, ?scope_of_work: Peddler::APIs::ServicesV1::ScopeOfWork?, ?seller: Peddler::APIs::ServicesV1::Seller?, ?service_job_id: String?, ?service_job_provider: Peddler::APIs::ServicesV1::ServiceJobProvider?, ?service_job_status: String?, ?service_location: Peddler::APIs::ServicesV1::ServiceLocation?, ?service_order_id: String?, ?store_id: String?) -> Peddler::APIs::ServicesV1::ServiceJob
                    | (Array[Peddler::APIs::ServicesV1::Appointment]?, Array[Peddler::APIs::ServicesV1::AssociatedItem]?, Peddler::APIs::ServicesV1::Buyer?, Time?, String?, Array[Peddler::APIs::ServicesV1::AppointmentTime]?, Peddler::APIs::ServicesV1::ScopeOfWork?, Peddler::APIs::ServicesV1::Seller?, String?, Peddler::APIs::ServicesV1::ServiceJobProvider?, String?, Peddler::APIs::ServicesV1::ServiceLocation?, String?, String?) -> Peddler::APIs::ServicesV1::ServiceJob

        def self.[]: (?appointments: Array[Peddler::APIs::ServicesV1::Appointment]?, ?associated_items: Array[Peddler::APIs::ServicesV1::AssociatedItem]?, ?buyer: Peddler::APIs::ServicesV1::Buyer?, ?create_time: Time?, ?marketplace_id: String?, ?preferred_appointment_times: Array[Peddler::APIs::ServicesV1::AppointmentTime]?, ?scope_of_work: Peddler::APIs::ServicesV1::ScopeOfWork?, ?seller: Peddler::APIs::ServicesV1::Seller?, ?service_job_id: String?, ?service_job_provider: Peddler::APIs::ServicesV1::ServiceJobProvider?, ?service_job_status: String?, ?service_location: Peddler::APIs::ServicesV1::ServiceLocation?, ?service_order_id: String?, ?store_id: String?) -> Peddler::APIs::ServicesV1::ServiceJob
                   | (Array[Peddler::APIs::ServicesV1::Appointment]?, Array[Peddler::APIs::ServicesV1::AssociatedItem]?, Peddler::APIs::ServicesV1::Buyer?, Time?, String?, Array[Peddler::APIs::ServicesV1::AppointmentTime]?, Peddler::APIs::ServicesV1::ScopeOfWork?, Peddler::APIs::ServicesV1::Seller?, String?, Peddler::APIs::ServicesV1::ServiceJobProvider?, String?, Peddler::APIs::ServicesV1::ServiceLocation?, String?, String?) -> Peddler::APIs::ServicesV1::ServiceJob

        def self.members: () -> [ :appointments, :associated_items, :buyer, :create_time, :marketplace_id, :preferred_appointment_times, :scope_of_work, :seller, :service_job_id, :service_job_provider, :service_job_status, :service_location, :service_order_id, :store_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ServiceJob

        attr_reader appointments: Array[Peddler::APIs::ServicesV1::Appointment]?
        attr_reader associated_items: Array[Peddler::APIs::ServicesV1::AssociatedItem]?
        attr_reader buyer: Peddler::APIs::ServicesV1::Buyer?
        attr_reader create_time: Time?
        attr_reader marketplace_id: String?
        attr_reader preferred_appointment_times: Array[Peddler::APIs::ServicesV1::AppointmentTime]?
        attr_reader scope_of_work: Peddler::APIs::ServicesV1::ScopeOfWork?
        attr_reader seller: Peddler::APIs::ServicesV1::Seller?
        attr_reader service_job_id: String?
        attr_reader service_job_provider: Peddler::APIs::ServicesV1::ServiceJobProvider?
        attr_reader service_job_status: String?
        attr_reader service_location: Peddler::APIs::ServicesV1::ServiceLocation?
        attr_reader service_order_id: String?
        attr_reader store_id: String?
        def members: () -> [ :appointments, :associated_items, :buyer, :create_time, :marketplace_id, :preferred_appointment_times, :scope_of_work, :seller, :service_job_id, :service_job_provider, :service_job_status, :service_location, :service_order_id, :store_id ]

        def to_h: () -> { appointments: Array[Peddler::APIs::ServicesV1::Appointment]?, associated_items: Array[Peddler::APIs::ServicesV1::AssociatedItem]?, buyer: Peddler::APIs::ServicesV1::Buyer?, create_time: Time?, marketplace_id: String?, preferred_appointment_times: Array[Peddler::APIs::ServicesV1::AppointmentTime]?, scope_of_work: Peddler::APIs::ServicesV1::ScopeOfWork?, seller: Peddler::APIs::ServicesV1::Seller?, service_job_id: String?, service_job_provider: Peddler::APIs::ServicesV1::ServiceJobProvider?, service_job_status: String?, service_location: Peddler::APIs::ServicesV1::ServiceLocation?, service_order_id: String?, store_id: String? }
      end

      class ServiceJobProvider < Data
        def self.new: (?service_job_provider_id: String?) -> Peddler::APIs::ServicesV1::ServiceJobProvider
                    | (String?) -> Peddler::APIs::ServicesV1::ServiceJobProvider

        def self.[]: (?service_job_provider_id: String?) -> Peddler::APIs::ServicesV1::ServiceJobProvider
                   | (String?) -> Peddler::APIs::ServicesV1::ServiceJobProvider

        def self.members: () -> [ :service_job_provider_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ServiceJobProvider

        attr_reader service_job_provider_id: String?
        def members: () -> [ :service_job_provider_id ]

        def to_h: () -> { service_job_provider_id: String? }
      end

      class ServiceLocation < Data
        def self.new: (?address: Peddler::APIs::ServicesV1::Address?, ?service_location_type: String?) -> Peddler::APIs::ServicesV1::ServiceLocation
                    | (Peddler::APIs::ServicesV1::Address?, String?) -> Peddler::APIs::ServicesV1::ServiceLocation

        def self.[]: (?address: Peddler::APIs::ServicesV1::Address?, ?service_location_type: String?) -> Peddler::APIs::ServicesV1::ServiceLocation
                   | (Peddler::APIs::ServicesV1::Address?, String?) -> Peddler::APIs::ServicesV1::ServiceLocation

        def self.members: () -> [ :address, :service_location_type ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ServiceLocation

        attr_reader address: Peddler::APIs::ServicesV1::Address?
        attr_reader service_location_type: String?
        def members: () -> [ :address, :service_location_type ]

        def to_h: () -> { address: Peddler::APIs::ServicesV1::Address?, service_location_type: String? }
      end

      class ServiceUploadDocument < Data
        def self.new: (content_length: Float?, content_type: String?, ?content_md5: String?) -> Peddler::APIs::ServicesV1::ServiceUploadDocument
                    | (Float?, String?, String?) -> Peddler::APIs::ServicesV1::ServiceUploadDocument

        def self.[]: (content_length: Float?, content_type: String?, ?content_md5: String?) -> Peddler::APIs::ServicesV1::ServiceUploadDocument
                   | (Float?, String?, String?) -> Peddler::APIs::ServicesV1::ServiceUploadDocument

        def self.members: () -> [ :content_length, :content_type, :content_md5 ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::ServiceUploadDocument

        attr_reader content_length: Float?
        attr_reader content_md5: String?
        attr_reader content_type: String?
        def members: () -> [ :content_length, :content_type, :content_md5 ]

        def to_h: () -> { content_length: Float?, content_type: String?, content_md5: String? }
      end

      class SetAppointmentFulfillmentDataRequest < Data
        def self.new: (?appointment_resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?, ?estimated_arrival_time: Peddler::APIs::ServicesV1::DateTimeRange?, ?fulfillment_documents: Array[Peddler::APIs::ServicesV1::FulfillmentDocument]?, ?fulfillment_time: Peddler::APIs::ServicesV1::FulfillmentTime?) -> Peddler::APIs::ServicesV1::SetAppointmentFulfillmentDataRequest
                    | (Array[Peddler::APIs::ServicesV1::AppointmentResource]?, Peddler::APIs::ServicesV1::DateTimeRange?, Array[Peddler::APIs::ServicesV1::FulfillmentDocument]?, Peddler::APIs::ServicesV1::FulfillmentTime?) -> Peddler::APIs::ServicesV1::SetAppointmentFulfillmentDataRequest

        def self.[]: (?appointment_resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?, ?estimated_arrival_time: Peddler::APIs::ServicesV1::DateTimeRange?, ?fulfillment_documents: Array[Peddler::APIs::ServicesV1::FulfillmentDocument]?, ?fulfillment_time: Peddler::APIs::ServicesV1::FulfillmentTime?) -> Peddler::APIs::ServicesV1::SetAppointmentFulfillmentDataRequest
                   | (Array[Peddler::APIs::ServicesV1::AppointmentResource]?, Peddler::APIs::ServicesV1::DateTimeRange?, Array[Peddler::APIs::ServicesV1::FulfillmentDocument]?, Peddler::APIs::ServicesV1::FulfillmentTime?) -> Peddler::APIs::ServicesV1::SetAppointmentFulfillmentDataRequest

        def self.members: () -> [ :appointment_resources, :estimated_arrival_time, :fulfillment_documents, :fulfillment_time ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::SetAppointmentFulfillmentDataRequest

        attr_reader appointment_resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?
        attr_reader estimated_arrival_time: Peddler::APIs::ServicesV1::DateTimeRange?
        attr_reader fulfillment_documents: Array[Peddler::APIs::ServicesV1::FulfillmentDocument]?
        attr_reader fulfillment_time: Peddler::APIs::ServicesV1::FulfillmentTime?
        def members: () -> [ :appointment_resources, :estimated_arrival_time, :fulfillment_documents, :fulfillment_time ]

        def to_h: () -> { appointment_resources: Array[Peddler::APIs::ServicesV1::AppointmentResource]?, estimated_arrival_time: Peddler::APIs::ServicesV1::DateTimeRange?, fulfillment_documents: Array[Peddler::APIs::ServicesV1::FulfillmentDocument]?, fulfillment_time: Peddler::APIs::ServicesV1::FulfillmentTime? }
      end

      class SetAppointmentResponse < Data
        def self.new: (?appointment_id: String?, ?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::SetAppointmentResponse
                    | (String?, Array[Peddler::APIs::ServicesV1::Error]?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::SetAppointmentResponse

        def self.[]: (?appointment_id: String?, ?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::SetAppointmentResponse
                   | (String?, Array[Peddler::APIs::ServicesV1::Error]?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::SetAppointmentResponse

        def self.members: () -> [ :appointment_id, :errors, :warnings ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::SetAppointmentResponse

        attr_reader appointment_id: String?
        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader warnings: Array[Peddler::APIs::ServicesV1::Warning]?
        def members: () -> [ :appointment_id, :errors, :warnings ]

        def to_h: () -> { appointment_id: String?, errors: Array[Peddler::APIs::ServicesV1::Error]?, warnings: Array[Peddler::APIs::ServicesV1::Warning]? }
      end

      class Technician < Data
        def self.new: (?name: String?, ?technician_id: String?) -> Peddler::APIs::ServicesV1::Technician
                    | (String?, String?) -> Peddler::APIs::ServicesV1::Technician

        def self.[]: (?name: String?, ?technician_id: String?) -> Peddler::APIs::ServicesV1::Technician
                   | (String?, String?) -> Peddler::APIs::ServicesV1::Technician

        def self.members: () -> [ :name, :technician_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Technician

        attr_reader name: String?
        attr_reader technician_id: String?
        def members: () -> [ :name, :technician_id ]

        def to_h: () -> { name: String?, technician_id: String? }
      end

      class UpdateReservationRecord < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?reservation: Peddler::APIs::ServicesV1::Reservation?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateReservationRecord
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::Reservation?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateReservationRecord

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?reservation: Peddler::APIs::ServicesV1::Reservation?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateReservationRecord
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::Reservation?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateReservationRecord

        def self.members: () -> [ :errors, :reservation, :warnings ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::UpdateReservationRecord

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader reservation: Peddler::APIs::ServicesV1::Reservation?
        attr_reader warnings: Array[Peddler::APIs::ServicesV1::Warning]?
        def members: () -> [ :errors, :reservation, :warnings ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, reservation: Peddler::APIs::ServicesV1::Reservation?, warnings: Array[Peddler::APIs::ServicesV1::Warning]? }
      end

      class UpdateReservationRequest < Data
        def self.new: (reservation: Peddler::APIs::ServicesV1::Reservation?, resource_id: String?) -> Peddler::APIs::ServicesV1::UpdateReservationRequest
                    | (Peddler::APIs::ServicesV1::Reservation?, String?) -> Peddler::APIs::ServicesV1::UpdateReservationRequest

        def self.[]: (reservation: Peddler::APIs::ServicesV1::Reservation?, resource_id: String?) -> Peddler::APIs::ServicesV1::UpdateReservationRequest
                   | (Peddler::APIs::ServicesV1::Reservation?, String?) -> Peddler::APIs::ServicesV1::UpdateReservationRequest

        def self.members: () -> [ :reservation, :resource_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::UpdateReservationRequest

        attr_reader reservation: Peddler::APIs::ServicesV1::Reservation?
        attr_reader resource_id: String?
        def members: () -> [ :reservation, :resource_id ]

        def to_h: () -> { reservation: Peddler::APIs::ServicesV1::Reservation?, resource_id: String? }
      end

      class UpdateReservationResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::UpdateReservationRecord?) -> Peddler::APIs::ServicesV1::UpdateReservationResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::UpdateReservationRecord?) -> Peddler::APIs::ServicesV1::UpdateReservationResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Peddler::APIs::ServicesV1::UpdateReservationRecord?) -> Peddler::APIs::ServicesV1::UpdateReservationResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Peddler::APIs::ServicesV1::UpdateReservationRecord?) -> Peddler::APIs::ServicesV1::UpdateReservationResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::UpdateReservationResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Peddler::APIs::ServicesV1::UpdateReservationRecord?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Peddler::APIs::ServicesV1::UpdateReservationRecord? }
      end

      class UpdateScheduleRecord < Data
        def self.new: (?availability: Peddler::APIs::ServicesV1::AvailabilityRecord?, ?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRecord
                    | (Peddler::APIs::ServicesV1::AvailabilityRecord?, Array[Peddler::APIs::ServicesV1::Error]?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRecord

        def self.[]: (?availability: Peddler::APIs::ServicesV1::AvailabilityRecord?, ?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?warnings: Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRecord
                   | (Peddler::APIs::ServicesV1::AvailabilityRecord?, Array[Peddler::APIs::ServicesV1::Error]?, Array[Peddler::APIs::ServicesV1::Warning]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRecord

        def self.members: () -> [ :availability, :errors, :warnings ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::UpdateScheduleRecord

        attr_reader availability: Peddler::APIs::ServicesV1::AvailabilityRecord?
        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader warnings: Array[Peddler::APIs::ServicesV1::Warning]?
        def members: () -> [ :availability, :errors, :warnings ]

        def to_h: () -> { availability: Peddler::APIs::ServicesV1::AvailabilityRecord?, errors: Array[Peddler::APIs::ServicesV1::Error]?, warnings: Array[Peddler::APIs::ServicesV1::Warning]? }
      end

      class UpdateScheduleRequest < Data
        def self.new: (schedules: Array[Peddler::APIs::ServicesV1::AvailabilityRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRequest
                    | (Array[Peddler::APIs::ServicesV1::AvailabilityRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRequest

        def self.[]: (schedules: Array[Peddler::APIs::ServicesV1::AvailabilityRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRequest
                   | (Array[Peddler::APIs::ServicesV1::AvailabilityRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleRequest

        def self.members: () -> [ :schedules ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::UpdateScheduleRequest

        attr_reader schedules: Array[Peddler::APIs::ServicesV1::AvailabilityRecord]?
        def members: () -> [ :schedules ]

        def to_h: () -> { schedules: Array[Peddler::APIs::ServicesV1::AvailabilityRecord]? }
      end

      class UpdateScheduleResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Array[Peddler::APIs::ServicesV1::UpdateScheduleRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleResponse
                    | (Array[Peddler::APIs::ServicesV1::Error]?, Array[Peddler::APIs::ServicesV1::UpdateScheduleRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleResponse

        def self.[]: (?errors: Array[Peddler::APIs::ServicesV1::Error]?, ?payload: Array[Peddler::APIs::ServicesV1::UpdateScheduleRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleResponse
                   | (Array[Peddler::APIs::ServicesV1::Error]?, Array[Peddler::APIs::ServicesV1::UpdateScheduleRecord]?) -> Peddler::APIs::ServicesV1::UpdateScheduleResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::UpdateScheduleResponse

        attr_reader errors: Array[Peddler::APIs::ServicesV1::Error]?
        attr_reader payload: Array[Peddler::APIs::ServicesV1::UpdateScheduleRecord]?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ServicesV1::Error]?, payload: Array[Peddler::APIs::ServicesV1::UpdateScheduleRecord]? }
      end

      class Warning < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ServicesV1::Warning
                    | (String?, String?, String?) -> Peddler::APIs::ServicesV1::Warning

        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ServicesV1::Warning
                   | (String?, String?, String?) -> Peddler::APIs::ServicesV1::Warning

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ServicesV1::Warning

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details ]

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class WarningList < Array[Warning]
        def self.parse: (Array[untyped]) -> WarningList
      end

      def add_appointment_for_service_job_by_service_job_id: (String, Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response

      def assign_appointment_resources: (String, String, Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response

      def cancel_reservation: (String, Array[String], ?rate_limit: Float) -> Peddler::Response
      def cancel_service_job_by_service_job_id: (String, String, ?rate_limit: Float) -> Peddler::Response
      def complete_service_job_by_service_job_id: (String, ?rate_limit: Float) -> Peddler::Response

      def create_reservation: (Hash[untyped, untyped], Array[String], ?rate_limit: Float) -> Peddler::Response

      def create_service_document_upload_destination: (Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response
      def get_appointment_slots: (String, String, Array[String], ?start_time: String?, ?end_time: String?, ?rate_limit: Float) -> Peddler::Response
      def get_appointmment_slots_by_job_id: (String, Array[String], ?start_time: String?, ?end_time: String?, ?rate_limit: Float) -> Peddler::Response
      def get_fixed_slot_capacity: (String, Hash[untyped, untyped], Array[String], ?next_page_token: String?, ?rate_limit: Float) -> Peddler::Response
      def get_range_slot_capacity: (String, Hash[untyped, untyped], Array[String], ?next_page_token: String?, ?rate_limit: Float) -> Peddler::Response
      def get_service_job_by_service_job_id: (String, ?rate_limit: Float) -> Peddler::Response

      def get_service_jobs: (Array[String], ?service_order_ids: Array[String]?, ?service_job_status: Array[String]?, ?page_token: String?, ?page_size: Integer?, ?sort_field: String?, ?sort_order: String?, ?created_after: String?, ?created_before: String?, ?last_updated_after: String?, ?last_updated_before: String?, ?schedule_start_date: String?, ?schedule_end_date: String?, ?asins: Array[String]?, ?required_skills: Array[String]?, ?store_ids: Array[String]?, ?rate_limit: Float) -> Peddler::Response

      def reschedule_appointment_for_service_job_by_service_job_id: (String, String, Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response

      def set_appointment_fulfillment_data: (String, String, Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response

      def update_reservation: (String, Hash[untyped, untyped], Array[String], ?rate_limit: Float) -> Peddler::Response
      def update_schedule: (String, Hash[untyped, untyped], Array[String], ?rate_limit: Float) -> Peddler::Response
    end
  end
end
