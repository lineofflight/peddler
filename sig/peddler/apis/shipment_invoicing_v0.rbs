module Peddler
  module APIs
    class ShipmentInvoicingV0 < API
      class Address < Data
        def self.new: (?address_line1: String?, ?address_line2: String?, ?address_line3: String?, ?address_type: String?, ?city: String?, ?country_code: String?, ?county: String?, ?district: String?, ?name: String?, ?phone: String?, ?postal_code: String?, ?state_or_region: String?) -> Peddler::APIs::ShipmentInvoicingV0::Address
                    | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::Address

        def self.[]: (?address_line1: String?, ?address_line2: String?, ?address_line3: String?, ?address_type: String?, ?city: String?, ?country_code: String?, ?county: String?, ?district: String?, ?name: String?, ?phone: String?, ?postal_code: String?, ?state_or_region: String?) -> Peddler::APIs::ShipmentInvoicingV0::Address
                   | (String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::Address

        def self.members: () -> [ :address_line1, :address_line2, :address_line3, :address_type, :city, :country_code, :county, :district, :name, :phone, :postal_code, :state_or_region ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::Address

        attr_reader address_line1: String?
        attr_reader address_line2: String?
        attr_reader address_line3: String?
        attr_reader address_type: String?
        attr_reader city: String?
        attr_reader country_code: String?
        attr_reader county: String?
        attr_reader district: String?
        attr_reader name: String?
        attr_reader phone: String?
        attr_reader postal_code: String?
        attr_reader state_or_region: String?
        def members: () -> [ :address_line1, :address_line2, :address_line3, :address_type, :city, :country_code, :county, :district, :name, :phone, :postal_code, :state_or_region ]

        def to_h: () -> { address_line1: String?, address_line2: String?, address_line3: String?, address_type: String?, city: String?, country_code: String?, county: String?, district: String?, name: String?, phone: String?, postal_code: String?, state_or_region: String? }
      end

      class BuyerTaxInfo < Data
        def self.new: (?company_legal_name: String?, ?tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, ?taxing_region: String?) -> Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo
                    | (String?, Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, String?) -> Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo

        def self.[]: (?company_legal_name: String?, ?tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, ?taxing_region: String?) -> Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo
                   | (String?, Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, String?) -> Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo

        def self.members: () -> [ :company_legal_name, :tax_classifications, :taxing_region ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo

        attr_reader company_legal_name: String?
        attr_reader tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?
        attr_reader taxing_region: String?
        def members: () -> [ :company_legal_name, :tax_classifications, :taxing_region ]

        def to_h: () -> { company_legal_name: String?, tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, taxing_region: String? }
      end

      class Error < Data
        def self.new: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ShipmentInvoicingV0::Error
                    | (String?, String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::Error

        def self.[]: (code: String?, message: String?, ?details: String?) -> Peddler::APIs::ShipmentInvoicingV0::Error
                   | (String?, String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::Error

        def self.members: () -> [ :code, :message, :details ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::Error

        attr_reader code: String?
        attr_reader details: String?
        attr_reader message: String?
        def members: () -> [ :code, :message, :details ]

        def to_h: () -> { code: String?, message: String?, details: String? }
      end

      class ErrorList < Array[Error]
        def self.parse: (Array[untyped]) -> ErrorList
      end

      class GetInvoiceStatusResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, ?payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse?) -> Peddler::APIs::ShipmentInvoicingV0::GetInvoiceStatusResponse
                    | (Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse?) -> Peddler::APIs::ShipmentInvoicingV0::GetInvoiceStatusResponse

        def self.[]: (?errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, ?payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse?) -> Peddler::APIs::ShipmentInvoicingV0::GetInvoiceStatusResponse
                   | (Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse?) -> Peddler::APIs::ShipmentInvoicingV0::GetInvoiceStatusResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::GetInvoiceStatusResponse

        attr_reader errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?
        attr_reader payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse? }
      end

      class GetShipmentDetailsResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, ?payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail?) -> Peddler::APIs::ShipmentInvoicingV0::GetShipmentDetailsResponse
                    | (Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail?) -> Peddler::APIs::ShipmentInvoicingV0::GetShipmentDetailsResponse

        def self.[]: (?errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, ?payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail?) -> Peddler::APIs::ShipmentInvoicingV0::GetShipmentDetailsResponse
                   | (Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail?) -> Peddler::APIs::ShipmentInvoicingV0::GetShipmentDetailsResponse

        def self.members: () -> [ :errors, :payload ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::GetShipmentDetailsResponse

        attr_reader errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?
        attr_reader payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail?
        def members: () -> [ :errors, :payload ]

        def to_h: () -> { errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?, payload: Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail? }
      end

      class MarketplaceTaxInfo < Data
        def self.new: (?company_legal_name: String?, ?tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, ?taxing_region: String?) -> Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo
                    | (String?, Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, String?) -> Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo

        def self.[]: (?company_legal_name: String?, ?tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, ?taxing_region: String?) -> Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo
                   | (String?, Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, String?) -> Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo

        def self.members: () -> [ :company_legal_name, :tax_classifications, :taxing_region ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo

        attr_reader company_legal_name: String?
        attr_reader tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?
        attr_reader taxing_region: String?
        def members: () -> [ :company_legal_name, :tax_classifications, :taxing_region ]

        def to_h: () -> { company_legal_name: String?, tax_classifications: Array[Peddler::APIs::ShipmentInvoicingV0::TaxClassification]?, taxing_region: String? }
      end

      class PaymentInformation < Data
        def self.new: (?acquirer_id: String?, ?authorization_code: String?, ?card_brand: String?, ?payment_method: String?, ?payment_value: Peddler::Money?) -> Peddler::APIs::ShipmentInvoicingV0::PaymentInformation
                    | (String?, String?, String?, String?, Peddler::Money?) -> Peddler::APIs::ShipmentInvoicingV0::PaymentInformation

        def self.[]: (?acquirer_id: String?, ?authorization_code: String?, ?card_brand: String?, ?payment_method: String?, ?payment_value: Peddler::Money?) -> Peddler::APIs::ShipmentInvoicingV0::PaymentInformation
                   | (String?, String?, String?, String?, Peddler::Money?) -> Peddler::APIs::ShipmentInvoicingV0::PaymentInformation

        def self.members: () -> [ :acquirer_id, :authorization_code, :card_brand, :payment_method, :payment_value ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::PaymentInformation

        attr_reader acquirer_id: String?
        attr_reader authorization_code: String?
        attr_reader card_brand: String?
        attr_reader payment_method: String?
        attr_reader payment_value: Peddler::Money?
        def members: () -> [ :acquirer_id, :authorization_code, :card_brand, :payment_method, :payment_value ]

        def to_h: () -> { acquirer_id: String?, authorization_code: String?, card_brand: String?, payment_method: String?, payment_value: Peddler::Money? }
      end

      class PaymentInformationList < Array[PaymentInformation]
        def self.parse: (Array[untyped]) -> PaymentInformationList
      end

      class PaymentMethodDetailItemList < Array[untyped]
        def self.parse: (Array[untyped]) -> PaymentMethodDetailItemList
      end

      class SerialNumbersList < Array[untyped]
        def self.parse: (Array[untyped]) -> SerialNumbersList
      end

      class ShipmentDetail < Data
        def self.new: (?amazon_order_id: String?, ?amazon_shipment_id: String?, ?buyer_county: String?, ?buyer_name: String?, ?buyer_tax_info: Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo?, ?marketplace_id: String?, ?marketplace_tax_info: Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo?, ?payment_method_details: Array[String]?, ?payments: Array[Peddler::APIs::ShipmentInvoicingV0::PaymentInformation]?, ?purchase_date: Time?, ?seller_display_name: String?, ?seller_id: String?, ?shipment_items: Array[Peddler::APIs::ShipmentInvoicingV0::ShipmentItem]?, ?shipping_address: Peddler::APIs::ShipmentInvoicingV0::Address?, ?warehouse_id: String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail
                    | (String?, String?, String?, String?, Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo?, String?, Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo?, Array[String]?, Array[Peddler::APIs::ShipmentInvoicingV0::PaymentInformation]?, Time?, String?, String?, Array[Peddler::APIs::ShipmentInvoicingV0::ShipmentItem]?, Peddler::APIs::ShipmentInvoicingV0::Address?, String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail

        def self.[]: (?amazon_order_id: String?, ?amazon_shipment_id: String?, ?buyer_county: String?, ?buyer_name: String?, ?buyer_tax_info: Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo?, ?marketplace_id: String?, ?marketplace_tax_info: Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo?, ?payment_method_details: Array[String]?, ?payments: Array[Peddler::APIs::ShipmentInvoicingV0::PaymentInformation]?, ?purchase_date: Time?, ?seller_display_name: String?, ?seller_id: String?, ?shipment_items: Array[Peddler::APIs::ShipmentInvoicingV0::ShipmentItem]?, ?shipping_address: Peddler::APIs::ShipmentInvoicingV0::Address?, ?warehouse_id: String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail
                   | (String?, String?, String?, String?, Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo?, String?, Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo?, Array[String]?, Array[Peddler::APIs::ShipmentInvoicingV0::PaymentInformation]?, Time?, String?, String?, Array[Peddler::APIs::ShipmentInvoicingV0::ShipmentItem]?, Peddler::APIs::ShipmentInvoicingV0::Address?, String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail

        def self.members: () -> [ :amazon_order_id, :amazon_shipment_id, :buyer_county, :buyer_name, :buyer_tax_info, :marketplace_id, :marketplace_tax_info, :payment_method_details, :payments, :purchase_date, :seller_display_name, :seller_id, :shipment_items, :shipping_address, :warehouse_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentDetail

        attr_reader amazon_order_id: String?
        attr_reader amazon_shipment_id: String?
        attr_reader buyer_county: String?
        attr_reader buyer_name: String?
        attr_reader buyer_tax_info: Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo?
        attr_reader marketplace_id: String?
        attr_reader marketplace_tax_info: Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo?
        attr_reader payment_method_details: Array[String]?
        attr_reader payments: Array[Peddler::APIs::ShipmentInvoicingV0::PaymentInformation]?
        attr_reader purchase_date: Time?
        attr_reader seller_display_name: String?
        attr_reader seller_id: String?
        attr_reader shipment_items: Array[Peddler::APIs::ShipmentInvoicingV0::ShipmentItem]?
        attr_reader shipping_address: Peddler::APIs::ShipmentInvoicingV0::Address?
        attr_reader warehouse_id: String?
        def members: () -> [ :amazon_order_id, :amazon_shipment_id, :buyer_county, :buyer_name, :buyer_tax_info, :marketplace_id, :marketplace_tax_info, :payment_method_details, :payments, :purchase_date, :seller_display_name, :seller_id, :shipment_items, :shipping_address, :warehouse_id ]

        def to_h: () -> { amazon_order_id: String?, amazon_shipment_id: String?, buyer_county: String?, buyer_name: String?, buyer_tax_info: Peddler::APIs::ShipmentInvoicingV0::BuyerTaxInfo?, marketplace_id: String?, marketplace_tax_info: Peddler::APIs::ShipmentInvoicingV0::MarketplaceTaxInfo?, payment_method_details: Array[String]?, payments: Array[Peddler::APIs::ShipmentInvoicingV0::PaymentInformation]?, purchase_date: Time?, seller_display_name: String?, seller_id: String?, shipment_items: Array[Peddler::APIs::ShipmentInvoicingV0::ShipmentItem]?, shipping_address: Peddler::APIs::ShipmentInvoicingV0::Address?, warehouse_id: String? }
      end

      class ShipmentInvoiceStatusInfo < Data
        def self.new: (?amazon_shipment_id: String?, ?invoice_status: String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo
                    | (String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo

        def self.[]: (?amazon_shipment_id: String?, ?invoice_status: String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo
                   | (String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo

        def self.members: () -> [ :amazon_shipment_id, :invoice_status ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo

        attr_reader amazon_shipment_id: String?
        attr_reader invoice_status: String?
        def members: () -> [ :amazon_shipment_id, :invoice_status ]

        def to_h: () -> { amazon_shipment_id: String?, invoice_status: String? }
      end

      class ShipmentInvoiceStatusResponse < Data
        def self.new: (?shipments: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse
                    | (Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse

        def self.[]: (?shipments: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse
                   | (Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse

        def self.members: () -> [ :shipments ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusResponse

        attr_reader shipments: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo?
        def members: () -> [ :shipments ]

        def to_h: () -> { shipments: Peddler::APIs::ShipmentInvoicingV0::ShipmentInvoiceStatusInfo? }
      end

      class ShipmentItem < Data
        def self.new: (?asin: String?, ?gift_wrap_price: Peddler::Money?, ?item_price: Peddler::Money?, ?order_item_id: String?, ?promotion_discount: Peddler::Money?, ?quantity_ordered: Float?, ?seller_sku: String?, ?serial_numbers: Array[String]?, ?shipping_discount: Peddler::Money?, ?shipping_price: Peddler::Money?, ?title: String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentItem
                    | (String?, Peddler::Money?, Peddler::Money?, String?, Peddler::Money?, Float?, String?, Array[String]?, Peddler::Money?, Peddler::Money?, String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentItem

        def self.[]: (?asin: String?, ?gift_wrap_price: Peddler::Money?, ?item_price: Peddler::Money?, ?order_item_id: String?, ?promotion_discount: Peddler::Money?, ?quantity_ordered: Float?, ?seller_sku: String?, ?serial_numbers: Array[String]?, ?shipping_discount: Peddler::Money?, ?shipping_price: Peddler::Money?, ?title: String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentItem
                   | (String?, Peddler::Money?, Peddler::Money?, String?, Peddler::Money?, Float?, String?, Array[String]?, Peddler::Money?, Peddler::Money?, String?) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentItem

        def self.members: () -> [ :asin, :gift_wrap_price, :item_price, :order_item_id, :promotion_discount, :quantity_ordered, :seller_sku, :serial_numbers, :shipping_discount, :shipping_price, :title ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::ShipmentItem

        attr_reader asin: String?
        attr_reader gift_wrap_price: Peddler::Money?
        attr_reader item_price: Peddler::Money?
        attr_reader order_item_id: String?
        attr_reader promotion_discount: Peddler::Money?
        attr_reader quantity_ordered: Float?
        attr_reader seller_sku: String?
        attr_reader serial_numbers: Array[String]?
        attr_reader shipping_discount: Peddler::Money?
        attr_reader shipping_price: Peddler::Money?
        attr_reader title: String?
        def members: () -> [ :asin, :gift_wrap_price, :item_price, :order_item_id, :promotion_discount, :quantity_ordered, :seller_sku, :serial_numbers, :shipping_discount, :shipping_price, :title ]

        def to_h: () -> { asin: String?, gift_wrap_price: Peddler::Money?, item_price: Peddler::Money?, order_item_id: String?, promotion_discount: Peddler::Money?, quantity_ordered: Float?, seller_sku: String?, serial_numbers: Array[String]?, shipping_discount: Peddler::Money?, shipping_price: Peddler::Money?, title: String? }
      end

      class ShipmentItems < Array[ShipmentItem]
        def self.parse: (Array[untyped]) -> ShipmentItems
      end

      class SubmitInvoiceRequest < Data
        def self.new: (content_md5_value: String?, invoice_content: String?, ?marketplace_id: String?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceRequest
                    | (String?, String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceRequest

        def self.[]: (content_md5_value: String?, invoice_content: String?, ?marketplace_id: String?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceRequest
                   | (String?, String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceRequest

        def self.members: () -> [ :content_md5_value, :invoice_content, :marketplace_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceRequest

        attr_reader content_md5_value: String?
        attr_reader invoice_content: String?
        attr_reader marketplace_id: String?
        def members: () -> [ :content_md5_value, :invoice_content, :marketplace_id ]

        def to_h: () -> { content_md5_value: String?, invoice_content: String?, marketplace_id: String? }
      end

      class SubmitInvoiceResponse < Data
        def self.new: (?errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceResponse
                    | (Array[Peddler::APIs::ShipmentInvoicingV0::Error]?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceResponse

        def self.[]: (?errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceResponse
                   | (Array[Peddler::APIs::ShipmentInvoicingV0::Error]?) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceResponse

        def self.members: () -> [ :errors ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::SubmitInvoiceResponse

        attr_reader errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]?
        def members: () -> [ :errors ]

        def to_h: () -> { errors: Array[Peddler::APIs::ShipmentInvoicingV0::Error]? }
      end

      class TaxClassification < Data
        def self.new: (?name: String?, ?value: String?) -> Peddler::APIs::ShipmentInvoicingV0::TaxClassification
                    | (String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::TaxClassification

        def self.[]: (?name: String?, ?value: String?) -> Peddler::APIs::ShipmentInvoicingV0::TaxClassification
                   | (String?, String?) -> Peddler::APIs::ShipmentInvoicingV0::TaxClassification

        def self.members: () -> [ :name, :value ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::APIs::ShipmentInvoicingV0::TaxClassification

        attr_reader name: String?
        attr_reader value: String?
        def members: () -> [ :name, :value ]

        def to_h: () -> { name: String?, value: String? }
      end

      class TaxClassificationList < Array[TaxClassification]
        def self.parse: (Array[untyped]) -> TaxClassificationList
      end

      def get_invoice_status: (String, ?rate_limit: Float) -> Peddler::Response
      def get_shipment_details: (String, ?rate_limit: Float) -> Peddler::Response
      def submit_invoice: (String, Hash[untyped, untyped], ?rate_limit: Float) -> Peddler::Response
    end
  end
end
