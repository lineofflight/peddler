module Peddler
  module Notifications
    module OrderStatusChange
      class Notification < Data
        def self.new: (event_time: String?, notification_metadata: Hash[untyped, untyped]?, notification_type: String?, notification_version: String?, payload: Peddler::Notifications::OrderStatusChange::Payload?, payload_version: String?) -> Peddler::Notifications::OrderStatusChange::Notification
                    | (String?, Hash[untyped, untyped]?, String?, String?, Peddler::Notifications::OrderStatusChange::Payload?, String?) -> Peddler::Notifications::OrderStatusChange::Notification
        def self.[]: (event_time: String?, notification_metadata: Hash[untyped, untyped]?, notification_type: String?, notification_version: String?, payload: Peddler::Notifications::OrderStatusChange::Payload?, payload_version: String?) -> Peddler::Notifications::OrderStatusChange::Notification
                   | (String?, Hash[untyped, untyped]?, String?, String?, Peddler::Notifications::OrderStatusChange::Payload?, String?) -> Peddler::Notifications::OrderStatusChange::Notification

        def self.members: () -> [ :event_time, :notification_metadata, :notification_type, :notification_version, :payload, :payload_version ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::OrderStatusChange::Notification

        attr_reader event_time: String?
        attr_reader notification_metadata: Hash[untyped, untyped]?
        attr_reader notification_type: String?
        attr_reader notification_version: String?
        attr_reader payload: Peddler::Notifications::OrderStatusChange::Payload?
        attr_reader payload_version: String?

        def members: () -> [ :event_time, :notification_metadata, :notification_type, :notification_version, :payload, :payload_version ]
        def to_h: () -> { event_time: String?, notification_metadata: Hash[untyped, untyped]?, notification_type: String?, notification_version: String?, payload: Peddler::Notifications::OrderStatusChange::Payload?, payload_version: String? }
      end

      class OrderStatusChangeNotification < Data
        def self.new: (amazon_order_id: String?, destination_postal_code: String?, fulfillment_channel: String?, marketplace_id: String?, order_item_id: String?, order_status: String?, purchase_date: String?, quantity: Integer?, seller_id: String?, seller_sku: String?, supply_source_id: String?) -> Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification
                    | (String?, String?, String?, String?, String?, String?, String?, Integer?, String?, String?, String?) -> Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification
        def self.[]: (amazon_order_id: String?, destination_postal_code: String?, fulfillment_channel: String?, marketplace_id: String?, order_item_id: String?, order_status: String?, purchase_date: String?, quantity: Integer?, seller_id: String?, seller_sku: String?, supply_source_id: String?) -> Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification
                   | (String?, String?, String?, String?, String?, String?, String?, Integer?, String?, String?, String?) -> Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification

        def self.members: () -> [ :amazon_order_id, :destination_postal_code, :fulfillment_channel, :marketplace_id, :order_item_id, :order_status, :purchase_date, :quantity, :seller_id, :seller_sku, :supply_source_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification

        attr_reader amazon_order_id: String?
        attr_reader destination_postal_code: String?
        attr_reader fulfillment_channel: String?
        attr_reader marketplace_id: String?
        attr_reader order_item_id: String?
        attr_reader order_status: String?
        attr_reader purchase_date: String?
        attr_reader quantity: Integer?
        attr_reader seller_id: String?
        attr_reader seller_sku: String?
        attr_reader supply_source_id: String?

        def members: () -> [ :amazon_order_id, :destination_postal_code, :fulfillment_channel, :marketplace_id, :order_item_id, :order_status, :purchase_date, :quantity, :seller_id, :seller_sku, :supply_source_id ]
        def to_h: () -> { amazon_order_id: String?, destination_postal_code: String?, fulfillment_channel: String?, marketplace_id: String?, order_item_id: String?, order_status: String?, purchase_date: String?, quantity: Integer?, seller_id: String?, seller_sku: String?, supply_source_id: String? }
      end

      class Payload < Data
        def self.new: (order_status_change_notification: Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification?) -> Peddler::Notifications::OrderStatusChange::Payload
                    | (Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification?) -> Peddler::Notifications::OrderStatusChange::Payload
        def self.[]: (order_status_change_notification: Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification?) -> Peddler::Notifications::OrderStatusChange::Payload
                   | (Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification?) -> Peddler::Notifications::OrderStatusChange::Payload

        def self.members: () -> [ :order_status_change_notification ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::OrderStatusChange::Payload

        attr_reader order_status_change_notification: Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification?

        def members: () -> [ :order_status_change_notification ]
        def to_h: () -> { order_status_change_notification: Peddler::Notifications::OrderStatusChange::OrderStatusChangeNotification? }
      end

      def self.parse: (Hash[String | Symbol, untyped]) -> Peddler::Notifications::OrderStatusChange::Notification
    end
  end
end
