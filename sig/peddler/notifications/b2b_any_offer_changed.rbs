module Peddler
  module Notifications
    module B2BAnyOfferChanged
      class B2BAnyOfferChangedNotification < Data
        def self.new: (offer_change_trigger: String?, offers: Array[Peddler::Notifications::B2BAnyOfferChanged::Offer]?, seller_id: String?, summary: String?) -> Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification
                    | (String?, Array[Peddler::Notifications::B2BAnyOfferChanged::Offer]?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification

        def self.[]: (offer_change_trigger: String?, offers: Array[Peddler::Notifications::B2BAnyOfferChanged::Offer]?, seller_id: String?, summary: String?) -> Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification
                   | (String?, Array[Peddler::Notifications::B2BAnyOfferChanged::Offer]?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification

        def self.members: () -> [ :offer_change_trigger, :offers, :seller_id, :summary ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification

        attr_reader offer_change_trigger: String?
        attr_reader offers: Array[Peddler::Notifications::B2BAnyOfferChanged::Offer]?
        attr_reader seller_id: String?
        attr_reader summary: String?
        def members: () -> [ :offer_change_trigger, :offers, :seller_id, :summary ]

        def to_h: () -> { offer_change_trigger: String?, offers: Array[Peddler::Notifications::B2BAnyOfferChanged::Offer]?, seller_id: String?, summary: String? }
      end

      class BuyBoxPrice < Data
        def self.new: (condition: String?, listing_price: Peddler::Money?, offer_type: String?, quantity_tier: String?, ?discount_type: String?, ?landed_price: Peddler::Money?, ?seller_id: String?, ?shipping: Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice
                    | (String?, Peddler::Money?, String?, String?, String?, Peddler::Money?, String?, Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice

        def self.[]: (condition: String?, listing_price: Peddler::Money?, offer_type: String?, quantity_tier: String?, ?discount_type: String?, ?landed_price: Peddler::Money?, ?seller_id: String?, ?shipping: Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice
                   | (String?, Peddler::Money?, String?, String?, String?, Peddler::Money?, String?, Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice

        def self.members: () -> [ :condition, :listing_price, :offer_type, :quantity_tier, :discount_type, :landed_price, :seller_id, :shipping ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice

        attr_reader condition: String?
        attr_reader discount_type: String?
        attr_reader landed_price: Peddler::Money?
        attr_reader listing_price: Peddler::Money?
        attr_reader offer_type: String?
        attr_reader quantity_tier: String?
        attr_reader seller_id: String?
        attr_reader shipping: Peddler::Money?
        def members: () -> [ :condition, :listing_price, :offer_type, :quantity_tier, :discount_type, :landed_price, :seller_id, :shipping ]

        def to_h: () -> { condition: String?, listing_price: Peddler::Money?, offer_type: String?, quantity_tier: String?, discount_type: String?, landed_price: Peddler::Money?, seller_id: String?, shipping: Peddler::Money? }
      end

      class LowestPrice < Data
        def self.new: (condition: String?, fulfillment_channel: String?, listing_price: Peddler::Money?, offer_type: String?, quantity_tier: String?, ?discount_type: String?, ?landed_price: Peddler::Money?, ?shipping: Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::LowestPrice
                    | (String?, String?, Peddler::Money?, String?, String?, String?, Peddler::Money?, Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::LowestPrice

        def self.[]: (condition: String?, fulfillment_channel: String?, listing_price: Peddler::Money?, offer_type: String?, quantity_tier: String?, ?discount_type: String?, ?landed_price: Peddler::Money?, ?shipping: Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::LowestPrice
                   | (String?, String?, Peddler::Money?, String?, String?, String?, Peddler::Money?, Peddler::Money?) -> Peddler::Notifications::B2BAnyOfferChanged::LowestPrice

        def self.members: () -> [ :condition, :fulfillment_channel, :listing_price, :offer_type, :quantity_tier, :discount_type, :landed_price, :shipping ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::LowestPrice

        attr_reader condition: String?
        attr_reader discount_type: String?
        attr_reader fulfillment_channel: String?
        attr_reader landed_price: Peddler::Money?
        attr_reader listing_price: Peddler::Money?
        attr_reader offer_type: String?
        attr_reader quantity_tier: String?
        attr_reader shipping: Peddler::Money?
        def members: () -> [ :condition, :fulfillment_channel, :listing_price, :offer_type, :quantity_tier, :discount_type, :landed_price, :shipping ]

        def to_h: () -> { condition: String?, fulfillment_channel: String?, listing_price: Peddler::Money?, offer_type: String?, quantity_tier: String?, discount_type: String?, landed_price: Peddler::Money?, shipping: Peddler::Money? }
      end

      class Notification < Data
        def self.new: (event_time: String?, notification_metadata: String?, notification_type: String?, notification_version: String?, payload: Peddler::Notifications::B2BAnyOfferChanged::Payload?, payload_version: String?) -> Peddler::Notifications::B2BAnyOfferChanged::Notification
                    | (String?, String?, String?, String?, Peddler::Notifications::B2BAnyOfferChanged::Payload?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::Notification

        def self.[]: (event_time: String?, notification_metadata: String?, notification_type: String?, notification_version: String?, payload: Peddler::Notifications::B2BAnyOfferChanged::Payload?, payload_version: String?) -> Peddler::Notifications::B2BAnyOfferChanged::Notification
                   | (String?, String?, String?, String?, Peddler::Notifications::B2BAnyOfferChanged::Payload?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::Notification

        def self.members: () -> [ :event_time, :notification_metadata, :notification_type, :notification_version, :payload, :payload_version ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::Notification

        attr_reader event_time: String?
        attr_reader notification_metadata: String?
        attr_reader notification_type: String?
        attr_reader notification_version: String?
        attr_reader payload: Peddler::Notifications::B2BAnyOfferChanged::Payload?
        attr_reader payload_version: String?
        def members: () -> [ :event_time, :notification_metadata, :notification_type, :notification_version, :payload, :payload_version ]

        def to_h: () -> { event_time: String?, notification_metadata: String?, notification_type: String?, notification_version: String?, payload: Peddler::Notifications::B2BAnyOfferChanged::Payload?, payload_version: String? }
      end

      class NotificationMetadata < Data
        def self.new: (application_id: String?, notification_id: String?, publish_time: String?, subscription_id: String?) -> Peddler::Notifications::B2BAnyOfferChanged::NotificationMetadata
                    | (String?, String?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::NotificationMetadata

        def self.[]: (application_id: String?, notification_id: String?, publish_time: String?, subscription_id: String?) -> Peddler::Notifications::B2BAnyOfferChanged::NotificationMetadata
                   | (String?, String?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::NotificationMetadata

        def self.members: () -> [ :application_id, :notification_id, :publish_time, :subscription_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::NotificationMetadata

        attr_reader application_id: String?
        attr_reader notification_id: String?
        attr_reader publish_time: String?
        attr_reader subscription_id: String?
        def members: () -> [ :application_id, :notification_id, :publish_time, :subscription_id ]

        def to_h: () -> { application_id: String?, notification_id: String?, publish_time: String?, subscription_id: String? }
      end

      class Offer < Data
        def self.new: (fulfilled_by_amazon: bool?, listing_price: Peddler::Money?, seller_id: String?, shipping: Peddler::Money?, shipping_time: String?, sub_condition: String?, ?condition_notes: String?, ?buy_box_winner: bool?, ?featured_merchant: bool?, ?quantity_discount_price: Array[Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType]?, ?seller_feedback_rating: String?, ?ships_from: String?) -> Peddler::Notifications::B2BAnyOfferChanged::Offer
                    | (bool?, Peddler::Money?, String?, Peddler::Money?, String?, String?, String?, bool?, bool?, Array[Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType]?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::Offer

        def self.[]: (fulfilled_by_amazon: bool?, listing_price: Peddler::Money?, seller_id: String?, shipping: Peddler::Money?, shipping_time: String?, sub_condition: String?, ?condition_notes: String?, ?buy_box_winner: bool?, ?featured_merchant: bool?, ?quantity_discount_price: Array[Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType]?, ?seller_feedback_rating: String?, ?ships_from: String?) -> Peddler::Notifications::B2BAnyOfferChanged::Offer
                   | (bool?, Peddler::Money?, String?, Peddler::Money?, String?, String?, String?, bool?, bool?, Array[Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType]?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::Offer

        def self.members: () -> [ :fulfilled_by_amazon, :listing_price, :seller_id, :shipping, :shipping_time, :sub_condition, :condition_notes, :buy_box_winner, :featured_merchant, :quantity_discount_price, :seller_feedback_rating, :ships_from ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::Offer

        attr_reader buy_box_winner: bool?
        attr_reader condition_notes: String?
        attr_reader featured_merchant: bool?
        attr_reader fulfilled_by_amazon: bool?
        attr_reader listing_price: Peddler::Money?
        attr_reader quantity_discount_price: Array[Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType]?
        attr_reader seller_feedback_rating: String?
        attr_reader seller_id: String?
        attr_reader shipping: Peddler::Money?
        attr_reader shipping_time: String?
        attr_reader ships_from: String?
        attr_reader sub_condition: String?

        def buy_box_winner?: () -> bool
        def featured_merchant?: () -> bool
        def fulfilled_by_amazon?: () -> bool
        def members: () -> [ :fulfilled_by_amazon, :listing_price, :seller_id, :shipping, :shipping_time, :sub_condition, :condition_notes, :buy_box_winner, :featured_merchant, :quantity_discount_price, :seller_feedback_rating, :ships_from ]

        def to_h: () -> { fulfilled_by_amazon: bool?, listing_price: Peddler::Money?, seller_id: String?, shipping: Peddler::Money?, shipping_time: String?, sub_condition: String?, condition_notes: String?, buy_box_winner: bool?, featured_merchant: bool?, quantity_discount_price: Array[Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType]?, seller_feedback_rating: String?, ships_from: String? }
      end

      class OfferChangeTrigger < Data
        def self.new: (asin: String?, item_condition: String?, marketplace_id: String?, time_of_offer_change: String?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferChangeTrigger
                    | (String?, String?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferChangeTrigger

        def self.[]: (asin: String?, item_condition: String?, marketplace_id: String?, time_of_offer_change: String?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferChangeTrigger
                   | (String?, String?, String?, String?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferChangeTrigger

        def self.members: () -> [ :asin, :item_condition, :marketplace_id, :time_of_offer_change ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::OfferChangeTrigger

        attr_reader asin: String?
        attr_reader item_condition: String?
        attr_reader marketplace_id: String?
        attr_reader time_of_offer_change: String?
        def members: () -> [ :asin, :item_condition, :marketplace_id, :time_of_offer_change ]

        def to_h: () -> { asin: String?, item_condition: String?, marketplace_id: String?, time_of_offer_change: String? }
      end

      class OfferCount < Data
        def self.new: (condition: String?, fulfillment_channel: String?, offer_count: Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferCount
                    | (String?, String?, Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferCount

        def self.[]: (condition: String?, fulfillment_channel: String?, offer_count: Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferCount
                   | (String?, String?, Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::OfferCount

        def self.members: () -> [ :condition, :fulfillment_channel, :offer_count ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::OfferCount

        attr_reader condition: String?
        attr_reader fulfillment_channel: String?
        attr_reader offer_count: Integer?
        def members: () -> [ :condition, :fulfillment_channel, :offer_count ]

        def to_h: () -> { condition: String?, fulfillment_channel: String?, offer_count: Integer? }
      end

      class Payload < Data
        def self.new: (b2b_any_offer_changed_notification: Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification?) -> Peddler::Notifications::B2BAnyOfferChanged::Payload
                    | (Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification?) -> Peddler::Notifications::B2BAnyOfferChanged::Payload

        def self.[]: (b2b_any_offer_changed_notification: Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification?) -> Peddler::Notifications::B2BAnyOfferChanged::Payload
                   | (Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification?) -> Peddler::Notifications::B2BAnyOfferChanged::Payload

        def self.members: () -> [ :b2b_any_offer_changed_notification ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::Payload

        attr_reader b2b_any_offer_changed_notification: Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification?
        def members: () -> [ :b2b_any_offer_changed_notification ]

        def to_h: () -> { b2b_any_offer_changed_notification: Peddler::Notifications::B2BAnyOfferChanged::B2BAnyOfferChangedNotification? }
      end

      class PrimeInformation < Data
        def self.new: (offer_national_prime: bool?, offer_prime: bool?) -> Peddler::Notifications::B2BAnyOfferChanged::PrimeInformation
                    | (bool?, bool?) -> Peddler::Notifications::B2BAnyOfferChanged::PrimeInformation

        def self.[]: (offer_national_prime: bool?, offer_prime: bool?) -> Peddler::Notifications::B2BAnyOfferChanged::PrimeInformation
                   | (bool?, bool?) -> Peddler::Notifications::B2BAnyOfferChanged::PrimeInformation

        def self.members: () -> [ :offer_national_prime, :offer_prime ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::PrimeInformation

        attr_reader offer_national_prime: bool?
        attr_reader offer_prime: bool?

        def members: () -> [ :offer_national_prime, :offer_prime ]
        def offer_national_prime?: () -> bool
        def offer_prime?: () -> bool

        def to_h: () -> { offer_national_prime: bool?, offer_prime: bool? }
      end

      class QuantityDiscountPriceType < Data
        def self.new: (listing_price: Peddler::Money?, quantity_discount_type: String?, quantity_tier: Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType
                    | (Peddler::Money?, String?, Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType

        def self.[]: (listing_price: Peddler::Money?, quantity_discount_type: String?, quantity_tier: Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType
                   | (Peddler::Money?, String?, Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType

        def self.members: () -> [ :listing_price, :quantity_discount_type, :quantity_tier ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::QuantityDiscountPriceType

        attr_reader listing_price: Peddler::Money?
        attr_reader quantity_discount_type: String?
        attr_reader quantity_tier: Integer?
        def members: () -> [ :listing_price, :quantity_discount_type, :quantity_tier ]

        def to_h: () -> { listing_price: Peddler::Money?, quantity_discount_type: String?, quantity_tier: Integer? }
      end

      class SellerFeedbackRating < Data
        def self.new: (feedback_count: Integer?, seller_positive_feedback_rating: Float?) -> Peddler::Notifications::B2BAnyOfferChanged::SellerFeedbackRating
                    | (Integer?, Float?) -> Peddler::Notifications::B2BAnyOfferChanged::SellerFeedbackRating

        def self.[]: (feedback_count: Integer?, seller_positive_feedback_rating: Float?) -> Peddler::Notifications::B2BAnyOfferChanged::SellerFeedbackRating
                   | (Integer?, Float?) -> Peddler::Notifications::B2BAnyOfferChanged::SellerFeedbackRating

        def self.members: () -> [ :feedback_count, :seller_positive_feedback_rating ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::SellerFeedbackRating

        attr_reader feedback_count: Integer?
        attr_reader seller_positive_feedback_rating: Float?
        def members: () -> [ :feedback_count, :seller_positive_feedback_rating ]

        def to_h: () -> { feedback_count: Integer?, seller_positive_feedback_rating: Float? }
      end

      class ShippingTime < Data
        def self.new: (?availability_type: String?, ?available_date: String?, ?maximum_hours: Integer?, ?minimum_hours: Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::ShippingTime
                    | (String?, String?, Integer?, Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::ShippingTime

        def self.[]: (?availability_type: String?, ?available_date: String?, ?maximum_hours: Integer?, ?minimum_hours: Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::ShippingTime
                   | (String?, String?, Integer?, Integer?) -> Peddler::Notifications::B2BAnyOfferChanged::ShippingTime

        def self.members: () -> [ :availability_type, :available_date, :maximum_hours, :minimum_hours ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::ShippingTime

        attr_reader availability_type: String?
        attr_reader available_date: String?
        attr_reader maximum_hours: Integer?
        attr_reader minimum_hours: Integer?
        def members: () -> [ :availability_type, :available_date, :maximum_hours, :minimum_hours ]

        def to_h: () -> { availability_type: String?, available_date: String?, maximum_hours: Integer?, minimum_hours: Integer? }
      end

      class ShipsFrom < Data
        def self.new: (country: String?) -> Peddler::Notifications::B2BAnyOfferChanged::ShipsFrom
                    | (String?) -> Peddler::Notifications::B2BAnyOfferChanged::ShipsFrom

        def self.[]: (country: String?) -> Peddler::Notifications::B2BAnyOfferChanged::ShipsFrom
                   | (String?) -> Peddler::Notifications::B2BAnyOfferChanged::ShipsFrom

        def self.members: () -> [ :country ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::ShipsFrom

        attr_reader country: String?
        def members: () -> [ :country ]

        def to_h: () -> { country: String? }
      end

      class Summary < Data
        def self.new: (buy_box_eligible_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?, buy_box_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice]?, lowest_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::LowestPrice]?, number_of_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?) -> Peddler::Notifications::B2BAnyOfferChanged::Summary
                    | (Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?, Array[Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice]?, Array[Peddler::Notifications::B2BAnyOfferChanged::LowestPrice]?, Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?) -> Peddler::Notifications::B2BAnyOfferChanged::Summary

        def self.[]: (buy_box_eligible_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?, buy_box_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice]?, lowest_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::LowestPrice]?, number_of_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?) -> Peddler::Notifications::B2BAnyOfferChanged::Summary
                   | (Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?, Array[Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice]?, Array[Peddler::Notifications::B2BAnyOfferChanged::LowestPrice]?, Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?) -> Peddler::Notifications::B2BAnyOfferChanged::Summary

        def self.members: () -> [ :buy_box_eligible_offers, :buy_box_prices, :lowest_prices, :number_of_offers ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::B2BAnyOfferChanged::Summary

        attr_reader buy_box_eligible_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?
        attr_reader buy_box_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice]?
        attr_reader lowest_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::LowestPrice]?
        attr_reader number_of_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?
        def members: () -> [ :buy_box_eligible_offers, :buy_box_prices, :lowest_prices, :number_of_offers ]

        def to_h: () -> { buy_box_eligible_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]?, buy_box_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::BuyBoxPrice]?, lowest_prices: Array[Peddler::Notifications::B2BAnyOfferChanged::LowestPrice]?, number_of_offers: Array[Peddler::Notifications::B2BAnyOfferChanged::OfferCount]? }
      end

      def self.parse: (Hash[String | Symbol, untyped]) -> Peddler::Notifications::B2BAnyOfferChanged::Notification
    end
  end
end
