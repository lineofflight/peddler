module Peddler
  module Notifications
    module FBAInventoryAvailabilityChange
      class Notification < Data
        def self.new: (payload: Peddler::Notifications::FBAInventoryAvailabilityChange::Payload?, ?event_time: Time?, ?notification_type: String?, ?notification_version: String?, ?payload_version: String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Notification
                    | (Peddler::Notifications::FBAInventoryAvailabilityChange::Payload?, Time?, String?, String?, String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Notification

        def self.[]: (payload: Peddler::Notifications::FBAInventoryAvailabilityChange::Payload?, ?event_time: Time?, ?notification_type: String?, ?notification_version: String?, ?payload_version: String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Notification
                   | (Peddler::Notifications::FBAInventoryAvailabilityChange::Payload?, Time?, String?, String?, String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Notification

        def self.members: () -> [ :payload, :event_time, :notification_type, :notification_version, :payload_version ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Notification

        attr_reader event_time: Time?
        attr_reader notification_type: String?
        attr_reader notification_version: String?
        attr_reader payload: Peddler::Notifications::FBAInventoryAvailabilityChange::Payload?
        attr_reader payload_version: String?
        def members: () -> [ :payload, :event_time, :notification_type, :notification_version, :payload_version ]

        def to_h: () -> { payload: Peddler::Notifications::FBAInventoryAvailabilityChange::Payload?, event_time: Time?, notification_type: String?, notification_version: String?, payload_version: String? }
      end

      class Payload < Data
        def self.new: (asin: String?, fn_sku: String?, fulfillment_inventory_by_marketplace: Array[untyped]?, sku: String?, seller_id: String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Payload
                    | (String?, String?, Array[untyped]?, String?, String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Payload

        def self.[]: (asin: String?, fn_sku: String?, fulfillment_inventory_by_marketplace: Array[untyped]?, sku: String?, seller_id: String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Payload
                   | (String?, String?, Array[untyped]?, String?, String?) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Payload

        def self.members: () -> [ :asin, :fn_sku, :fulfillment_inventory_by_marketplace, :sku, :seller_id ]

        def self.parse: (?Hash[String | Symbol, untyped], **untyped) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Payload

        attr_reader asin: String?
        attr_reader fn_sku: String?
        attr_reader fulfillment_inventory_by_marketplace: Array[untyped]?
        attr_reader seller_id: String?
        attr_reader sku: String?
        def members: () -> [ :asin, :fn_sku, :fulfillment_inventory_by_marketplace, :sku, :seller_id ]

        def to_h: () -> { asin: String?, fn_sku: String?, fulfillment_inventory_by_marketplace: Array[untyped]?, sku: String?, seller_id: String? }
      end

      def self.parse: (Hash[String | Symbol, untyped]) -> Peddler::Notifications::FBAInventoryAvailabilityChange::Notification
    end
  end
end
