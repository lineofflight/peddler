module Generator
  class CircularDependencyDetector
    include Logger

    @circular_deps: Set[String]?
    @cycle_edges: Set[[ String, String ]]?
    @dependency_graph: Hash[String, Array[String]]?

    attr_reader types: Array[Type]

    def initialize: (Array[Type] types) -> void

    def circular_deps: () -> Set[String]

    def cycle_edges: () -> Set[[ String, String ]]
    def detect: () -> void

    private

    def build_dependency_graph: () -> Hash[String, Array[String]]
    def dependency_graph: () -> Hash[String, Array[String]]

    def mark_cycle: (Array[String] rec_stack, String neighbor, String node) -> void
    def traverse_for_cycles: (String node, ?visited: Set[String], ?rec_stack: Array[String]) -> void
  end
end
