module Generator
  class Operation
    DEFAULT_TEMPLATE: String
    include Formatter

    @parameters: Array[Hash[String, untyped]]?
    @rate_limit: (Float | :unknown | nil)?
    @response_model: Hash[Symbol, untyped]?

    attr_reader api_name_with_version: String?
    attr_reader operation: Hash[String, untyped]
    attr_reader path: Path

    attr_reader template: String
    attr_reader verb: String

    def initialize: (Path path, String verb, Hash[String, untyped] operation, ?api_name_with_version: String?, ?template: String) -> void

    def body_param_name: () -> String?
    def description: () -> String

    def has_typed_response?: () -> bool
    def method_definition: () -> String
    def operation_id: () -> String?

    def parameters: () -> Array[Hash[String, untyped]]
    def query_params: () -> Hash[String, String]

    def rate_limit: () -> (Float | :unknown | nil)
    def render: () -> String

    def request_args: () -> Array[String]

    def response_model: () -> Hash[Symbol, untyped]
    def sandbox_rule: () -> String?
    def tags: () -> Array[String]

    private

    def build_dig_path: (Array[String] path) -> String
    def build_type_class_name: (String model_name) -> String

    def dynamic_sandbox?: () -> bool
    def name: () -> String
    def parse_array_type: (String type_class, Array[String] path) -> String

    def parse_nested_array: (String type_class, String array_name) -> String
    def parse_response_type: (String type_class) -> String

    def parse_simple_array: (String type_class) -> String
    def parse_single_type: (String type_class, Array[String] path) -> String
    def parser_class: () -> String?

    def parsing_logic: () -> String?

    def sandbox_only?: () -> bool
    def static_sandbox?: () -> bool
    def use_ternary?: () -> bool
  end
end
